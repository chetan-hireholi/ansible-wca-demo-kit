#!/bin/bash
# Purpose:
#	- bootstrap machine in order to prepare for ansible playbook run

RELEASE="main"
DOWNLOAD="https://github.ibm.com/pnuw/ansible-lightspeed-with-watson-ai-demo-01/archive/$RELEASE.tar.gz"



set -e

# Download and install Command Line Tools if no developer tools exist
#       * previous evaluation didn't work completely, due to gcc binary existing for vanilla os x install
#       * gcc output on vanilla osx box:
#       * 'xcode-select: note: no developer tools were found at '/Applications/Xcode.app', requesting install.
#       * Choose an option in the dialog to download the command line developer tools'
#
# Evaluate 2 conditions
#       * ensure dev tools are installed by checking the output of gcc
#       * check to see if gcc binary even exists ( original logic )
# if either of the conditions are met, install dev tools

echo '==================================='
echo ' Ansible Lightspeed Demo Installer'
echo '==================================='
echo
echo ' Uses the following Ansible playbook...'
echo 'https://github.ibm.com/pnuw/ansible-lightspeed-with-watson-ai-demo-01'
echo
echo


if [[ $(/usr/bin/gcc 2>&1) =~ "no developer tools were found" ]] || [[ ! -x /usr/bin/gcc ]]; then
    echo "Info   | Install   | xcode command line tools"
    xcode-select --install
fi

# Download and install Homebrew
if [[ ! -x /opt/homebrew/bin/brew ]]; then
    echo "Info   | Install   | homebrew"
    ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/main/install)"
fi

# Download and install Python 3
if [[ ! -x /usr/local/bin/python ]]; then
    echo "Info   | Install   | Python"
    brew install python
fi

# Download and install Visual Studio Code
if [[ ! -x /usr/local/bin/code ]]; then
    echo "Info   | Install   | VS Code"
    brew install --cask visual-studio-code
fi

# Download and install Ansible and Ansible Linting into Python installed by pip3
if [[ ! -x /usr/local/bin/ansible ]]; then
    echo "Info   | Install   | Ansible and Ansible Linting"
    pip3 install ansible ansible-lint
fi

# Remove old ansible-lightspeed-with-watson-ai-demo-01 playbook
if [[ ! -x /tmp/ansible-lightspeed-with-watson-ai-demo-01.tar.gz ]]; then
	echo "Info   | Remove  | ansible-lightspeed-with-watson-ai-demo-01 playbook"
	rm -rf /tmp/ansible-lightspeed-with-watson-ai-demo-01*
fi

# Download and run ansible-lightspeed-with-watson-ai-demo-01 playbook
echo "Info   | Download  | ansible-lightspeed-with-watson-ai-demo-01 playbook"
cd /tmp
curl -fsSL -o ansible-lightspeed-with-watson-ai-demo-01.tar.gz $DOWNLOAD
tar zxf ansible-lightspeed-with-watson-ai-demo-01*.tar.gz

# Modify the PATH
# This should be subsequently updated in shell settings
export PATH=/usr/local/bin:$PATH

echo "Info   | Run | ansible-playbook-mac-dev playbook"
cd /tmp/ansible-lightspeed-with-watson-ai-demo-01-*
ansible-galaxy install -r ./roles/requirements.yml
echo "[localhost]" >> ./demo-setup/inventory.laptop
echo `hostname` >> ./demo-setup/inventory.laptop
ansible-playbook ./demo-setup/main.yml -i ./demo-setup/inventory.laptop
