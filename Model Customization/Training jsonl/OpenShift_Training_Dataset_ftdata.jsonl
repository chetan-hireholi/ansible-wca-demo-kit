{"data_source_description": "", "input": "---\n- name: Create APPID instance.\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n    - name: Read the variables from var file", "license": "", "module": "include_vars", "output": "      include_vars:\n        file: vars.yml", "path": "examples/appid-instance-creation/create.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: Create APPID instance.\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n    - name: Read the variables from var file\n      include_vars:\n        file: vars.yml\n    - name: Create a APPID instance", "license": "", "module": "ibm_resource_instance", "output": "      ibm_resource_instance:\n        name: \"{{ instance_name }}\"\n        service: \"appid\"\n        plan: \"{{ plan_type }}\"\n        location: \"{{ location_info }}\"", "path": "examples/appid-instance-creation/create.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: Create APPID instance.\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n    - name: Read the variables from var file", "license": "", "module": "include_vars", "output": "      include_vars:\n        file: vars.yml", "path": "examples/appid-instance-creation/destroy.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: Create APPID instance.\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n    - name: Read the variables from var file\n      include_vars:\n        file: vars.yml\n    - name: Get Resource id details", "license": "", "module": "ibm_resource_instance_info", "output": "      ibm_resource_instance_info:\n        name: \"{{ instance_name }}\"\n      register: resource_info", "path": "examples/appid-instance-creation/destroy.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: Create APPID instance.\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n    - name: Read the variables from var file\n      include_vars:\n        file: vars.yml\n    - name: Get Resource id details\n      ibm_resource_instance_info:\n        name: \"{{ instance_name }}\"\n      register: resource_info\n    - name: Get resource", "license": "", "module": "set_fact", "output": "      set_fact:\n        cacheable: True\n        resource: \"{{ resource_info.resource }}\"", "path": "examples/appid-instance-creation/destroy.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: Create APPID instance.\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n    - name: Read the variables from var file\n      include_vars:\n        file: vars.yml\n    - name: Get Resource id details\n      ibm_resource_instance_info:\n        name: \"{{ instance_name }}\"\n      register: resource_info\n    - name: Get resource\n      set_fact:\n        cacheable: True\n        resource: \"{{ resource_info.resource }}\"\n    - name: Destroy APPID instance", "license": "", "module": "ibm_resource_instance", "output": "      ibm_resource_instance:\n        name: \"{{ instance_name }}\"\n        id: \"{{ resource.id }}\"\n        service: \"appid\"\n        plan: \"{{ plan_type }}\"\n        location: \"{{ location_info }}\"\n        state: absent", "path": "examples/appid-instance-creation/destroy.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: IBM IAM User invite example.\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n\n    - name: Fetch the variables from var file", "license": "", "module": "include_vars", "output": "      include_vars:\n        file: vars.yml", "path": "examples/iam-user-invite/create.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: IBM IAM User invite example.\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n\n    - name: Fetch the variables from var file\n      include_vars:\n        file: vars.yml\n    - name: space data details", "license": "", "module": "ibm_space_info", "output": "      ibm_space_info:\n        space: \"{{ ibm_space }}\"\n        org: \"{{ ibm_org }}\"\n      register: space", "path": "examples/iam-user-invite/create.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: IBM IAM User invite example.\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n\n    - name: Fetch the variables from var file\n      include_vars:\n        file: vars.yml\n    - name: space data details\n      ibm_space_info:\n        space: \"{{ ibm_space }}\"\n        org: \"{{ ibm_org }}\"\n      register: space\n    - name: space data details", "license": "", "module": "set_fact", "output": "      set_fact:\n        cacheable: True\n        space_info: \"{{ space.resource }}\"\n      when: space.rc==0", "path": "examples/iam-user-invite/create.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: IBM IAM User invite example.\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n\n    - name: Fetch the variables from var file\n      include_vars:\n        file: vars.yml\n    - name: space data details\n      ibm_space_info:\n        space: \"{{ ibm_space }}\"\n        org: \"{{ ibm_org }}\"\n      register: space\n    - name: space data details\n      set_fact:\n        cacheable: True\n        space_info: \"{{ space.resource }}\"\n      when: space.rc==0\n    - name: New access group", "license": "", "module": "ibm_iam_access_group", "output": "      ibm_iam_access_group:\n        name: \"test\"\n      register: accgrp", "path": "examples/iam-user-invite/create.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: IBM IAM User invite example.\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n\n    - name: Fetch the variables from var file\n      include_vars:\n        file: vars.yml\n    - name: space data details\n      ibm_space_info:\n        space: \"{{ ibm_space }}\"\n        org: \"{{ ibm_org }}\"\n      register: space\n    - name: space data details\n      set_fact:\n        cacheable: True\n        space_info: \"{{ space.resource }}\"\n      when: space.rc==0\n    - name: New access group\n      ibm_iam_access_group:\n        name: \"test\"\n      register: accgrp\n    - name: access group details", "license": "", "module": "set_fact", "output": "      set_fact:\n        cacheable: True\n        access_group: \"{{ accgrp.resource }}\"\n      when: accgrp.rc==0", "path": "examples/iam-user-invite/create.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: IBM IAM User invite example.\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n\n    - name: Fetch the variables from var file\n      include_vars:\n        file: vars.yml\n    - name: space data details\n      ibm_space_info:\n        space: \"{{ ibm_space }}\"\n        org: \"{{ ibm_org }}\"\n      register: space\n    - name: space data details\n      set_fact:\n        cacheable: True\n        space_info: \"{{ space.resource }}\"\n      when: space.rc==0\n    - name: New access group\n      ibm_iam_access_group:\n        name: \"test\"\n      register: accgrp\n    - name: access group details\n      set_fact:\n        cacheable: True\n        access_group: \"{{ accgrp.resource }}\"\n      when: accgrp.rc==0\n    - name: Resource group details", "license": "", "module": "ibm_resource_group_info", "output": "      ibm_resource_group_info:\n        name: \"Default\"\n      register: group", "path": "examples/iam-user-invite/create.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: IBM IAM User invite example.\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n\n    - name: Fetch the variables from var file\n      include_vars:\n        file: vars.yml\n    - name: space data details\n      ibm_space_info:\n        space: \"{{ ibm_space }}\"\n        org: \"{{ ibm_org }}\"\n      register: space\n    - name: space data details\n      set_fact:\n        cacheable: True\n        space_info: \"{{ space.resource }}\"\n      when: space.rc==0\n    - name: New access group\n      ibm_iam_access_group:\n        name: \"test\"\n      register: accgrp\n    - name: access group details\n      set_fact:\n        cacheable: True\n        access_group: \"{{ accgrp.resource }}\"\n      when: accgrp.rc==0\n    - name: Resource group details\n      ibm_resource_group_info:\n        name: \"Default\"\n      register: group\n    - name: resource group", "license": "", "module": "set_fact", "output": "      set_fact:\n        cacheable: True\n        resource_group: \"{{ group.resource }}\"\n      when: group.rc==0", "path": "examples/iam-user-invite/create.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: IBM IAM User invite example.\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n\n    - name: Fetch the variables from var file\n      include_vars:\n        file: vars.yml\n    - name: space data details\n      ibm_space_info:\n        space: \"{{ ibm_space }}\"\n        org: \"{{ ibm_org }}\"\n      register: space\n    - name: space data details\n      set_fact:\n        cacheable: True\n        space_info: \"{{ space.resource }}\"\n      when: space.rc==0\n    - name: New access group\n      ibm_iam_access_group:\n        name: \"test\"\n      register: accgrp\n    - name: access group details\n      set_fact:\n        cacheable: True\n        access_group: \"{{ accgrp.resource }}\"\n      when: accgrp.rc==0\n    - name: Resource group details\n      ibm_resource_group_info:\n        name: \"Default\"\n      register: group\n    - name: resource group\n      set_fact:\n        cacheable: True\n        resource_group: \"{{ group.resource }}\"\n      when: group.rc==0\n    - name: IBM IAM user invite", "license": "", "module": "ibm_iam_user_invite", "output": "      ibm_iam_user_invite:\n        users:\n          - \"{{ user1 }}\"\n        access_groups:\n          - \"{{ access_group.id }}\"\n        iam_policy:\n          - roles:\n             - Operator\n             - Writer\n             - Manager\n             - Viewer\n            resources:\n              service: \"containers-kubernetes\"\n              resource_group_id: \"{{ resource_group.id }}\"\n        classic_infra_roles:\n          - permissions:\n              - PORT_CONTROL\n              - DATACENTER_ACCESS\n            permission_set: \"basicuser\"\n        cloud_foundry_roles:\n          -  org_roles:\n              - Manager\n              - Auditor\n             organization_guid: 952bf1ca-3ae6-46dc-8075-1c99ccb5b267\n             spaces:\n              space_guid: \"{{ space_info.id }}\"\n              space_roles:\n                - Manager\n                - Developer", "path": "examples/iam-user-invite/create.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: Create an endpoint for a given OpenAPI definition and to create a subscription for this endpoint.\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n    - name: Fetch the variables from var file", "license": "", "module": "include_vars", "output": "      include_vars:\n        file: vars.yml\n    ", "path": "examples/ibm-api-gateway/create.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: Create an endpoint for a given OpenAPI definition and to create a subscription for this endpoint.\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n    - name: Fetch the variables from var file\n      include_vars:\n        file: vars.yml\n    \n    - name: provision apigateway resource instance", "license": "", "module": "ibm_resource_instance", "output": "      ibm_resource_instance:\n        name: \"{{ service_name }}\"\n        location: \"global\"\n        service: \"api-gateway\"\n        plan: \"lite\"\n      register: resource_instance_output\n    ", "path": "examples/ibm-api-gateway/create.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: Create an endpoint for a given OpenAPI definition and to create a subscription for this endpoint.\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n    - name: Fetch the variables from var file\n      include_vars:\n        file: vars.yml\n    \n    - name: provision apigateway resource instance\n      ibm_resource_instance:\n        name: \"{{ service_name }}\"\n        location: \"global\"\n        service: \"api-gateway\"\n        plan: \"lite\"\n      register: resource_instance_output\n    \n    - name: Save api-gateway resource instance as fact", "license": "", "module": "set_fact", "output": "      set_fact:\n        cacheable: True\n        api-gateway: \"{{ resource_instance_output.resource }}\"\n      when: resource_instance_output.rc==0\n", "path": "examples/ibm-api-gateway/create.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: Create an endpoint for a given OpenAPI definition and to create a subscription for this endpoint.\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n    - name: Fetch the variables from var file\n      include_vars:\n        file: vars.yml\n    \n    - name: provision apigateway resource instance\n      ibm_resource_instance:\n        name: \"{{ service_name }}\"\n        location: \"global\"\n        service: \"api-gateway\"\n        plan: \"lite\"\n      register: resource_instance_output\n    \n    - name: Save api-gateway resource instance as fact\n      set_fact:\n        cacheable: True\n        api-gateway: \"{{ resource_instance_output.resource }}\"\n      when: resource_instance_output.rc==0\n\n    - name: provision endpoint resource for one api document", "license": "", "module": "ibm_api_gateway_endpoint", "output": "      ibm_api_gateway_endpoint:\n        service_instance_crn: \"{{ api-gateway.id }}\"\n        name: \"{{ endpoint_name }}\"\n        managed: \"{{ managed }}\"\n        open_api_doc_name: \"{{ file_path }}\"\n      register: api_gateway_endpoint_output\n", "path": "examples/ibm-api-gateway/create.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: Create an endpoint for a given OpenAPI definition and to create a subscription for this endpoint.\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n    - name: Fetch the variables from var file\n      include_vars:\n        file: vars.yml\n    \n    - name: provision apigateway resource instance\n      ibm_resource_instance:\n        name: \"{{ service_name }}\"\n        location: \"global\"\n        service: \"api-gateway\"\n        plan: \"lite\"\n      register: resource_instance_output\n    \n    - name: Save api-gateway resource instance as fact\n      set_fact:\n        cacheable: True\n        api-gateway: \"{{ resource_instance_output.resource }}\"\n      when: resource_instance_output.rc==0\n\n    - name: provision endpoint resource for one api document\n      ibm_api_gateway_endpoint:\n        service_instance_crn: \"{{ api-gateway.id }}\"\n        name: \"{{ endpoint_name }}\"\n        managed: \"{{ managed }}\"\n        open_api_doc_name: \"{{ file_path }}\"\n      register: api_gateway_endpoint_output\n\n    - name: Save endpoint resource as fact", "license": "", "module": "set_fact", "output": "      set_fact:\n        cacheable: True\n        endpoint: \"{{ api_gateway_endpoint_output.resource }}\"\n      when: api_gateway_endpoint_output.rc==0\n", "path": "examples/ibm-api-gateway/create.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: Create an endpoint for a given OpenAPI definition and to create a subscription for this endpoint.\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n    - name: Fetch the variables from var file\n      include_vars:\n        file: vars.yml\n    \n    - name: provision apigateway resource instance\n      ibm_resource_instance:\n        name: \"{{ service_name }}\"\n        location: \"global\"\n        service: \"api-gateway\"\n        plan: \"lite\"\n      register: resource_instance_output\n    \n    - name: Save api-gateway resource instance as fact\n      set_fact:\n        cacheable: True\n        api-gateway: \"{{ resource_instance_output.resource }}\"\n      when: resource_instance_output.rc==0\n\n    - name: provision endpoint resource for one api document\n      ibm_api_gateway_endpoint:\n        service_instance_crn: \"{{ api-gateway.id }}\"\n        name: \"{{ endpoint_name }}\"\n        managed: \"{{ managed }}\"\n        open_api_doc_name: \"{{ file_path }}\"\n      register: api_gateway_endpoint_output\n\n    - name: Save endpoint resource as fact\n      set_fact:\n        cacheable: True\n        endpoint: \"{{ api_gateway_endpoint_output.resource }}\"\n      when: api_gateway_endpoint_output.rc==0\n\n    - name: provision endpoint resources for a directory of api douments", "license": "", "module": "ibm_api_gateway_endpoint", "output": "      ibm_api_gateway_endpoint:\n        service_instance_crn: \"{{ api-gateway.id }}\"\n        name: \"{{ item.split('.')[0] }}\"\n        managed: \"{{ managed }}\"\n        open_api_doc_name: \"{{ dir_path }}/{{ item }}\"\n      with_fileglob: '{{ dir_path }}/*.json'\n      register: api_gateway_endpoints_output \n", "path": "examples/ibm-api-gateway/create.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: Create an endpoint for a given OpenAPI definition and to create a subscription for this endpoint.\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n    - name: Fetch the variables from var file\n      include_vars:\n        file: vars.yml\n    \n    - name: provision apigateway resource instance\n      ibm_resource_instance:\n        name: \"{{ service_name }}\"\n        location: \"global\"\n        service: \"api-gateway\"\n        plan: \"lite\"\n      register: resource_instance_output\n    \n    - name: Save api-gateway resource instance as fact\n      set_fact:\n        cacheable: True\n        api-gateway: \"{{ resource_instance_output.resource }}\"\n      when: resource_instance_output.rc==0\n\n    - name: provision endpoint resource for one api document\n      ibm_api_gateway_endpoint:\n        service_instance_crn: \"{{ api-gateway.id }}\"\n        name: \"{{ endpoint_name }}\"\n        managed: \"{{ managed }}\"\n        open_api_doc_name: \"{{ file_path }}\"\n      register: api_gateway_endpoint_output\n\n    - name: Save endpoint resource as fact\n      set_fact:\n        cacheable: True\n        endpoint: \"{{ api_gateway_endpoint_output.resource }}\"\n      when: api_gateway_endpoint_output.rc==0\n\n    - name: provision endpoint resources for a directory of api douments\n      ibm_api_gateway_endpoint:\n        service_instance_crn: \"{{ api-gateway.id }}\"\n        name: \"{{ item.split('.')[0] }}\"\n        managed: \"{{ managed }}\"\n        open_api_doc_name: \"{{ dir_path }}/{{ item }}\"\n      with_fileglob: '{{ dir_path }}/*.json'\n      register: api_gateway_endpoints_output \n\n    - name: Get api gateway info", "license": "", "module": "ibm_api_gateway_info", "output": "      ibm_api_gateway_info:\n        service_instance_crn: \"{{ api-gateway.id }}\"\n      register: apigateway_output\n", "path": "examples/ibm-api-gateway/create.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: Create an endpoint for a given OpenAPI definition and to create a subscription for this endpoint.\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n    - name: Fetch the variables from var file\n      include_vars:\n        file: vars.yml\n    \n    - name: provision apigateway resource instance\n      ibm_resource_instance:\n        name: \"{{ service_name }}\"\n        location: \"global\"\n        service: \"api-gateway\"\n        plan: \"lite\"\n      register: resource_instance_output\n    \n    - name: Save api-gateway resource instance as fact\n      set_fact:\n        cacheable: True\n        api-gateway: \"{{ resource_instance_output.resource }}\"\n      when: resource_instance_output.rc==0\n\n    - name: provision endpoint resource for one api document\n      ibm_api_gateway_endpoint:\n        service_instance_crn: \"{{ api-gateway.id }}\"\n        name: \"{{ endpoint_name }}\"\n        managed: \"{{ managed }}\"\n        open_api_doc_name: \"{{ file_path }}\"\n      register: api_gateway_endpoint_output\n\n    - name: Save endpoint resource as fact\n      set_fact:\n        cacheable: True\n        endpoint: \"{{ api_gateway_endpoint_output.resource }}\"\n      when: api_gateway_endpoint_output.rc==0\n\n    - name: provision endpoint resources for a directory of api douments\n      ibm_api_gateway_endpoint:\n        service_instance_crn: \"{{ api-gateway.id }}\"\n        name: \"{{ item.split('.')[0] }}\"\n        managed: \"{{ managed }}\"\n        open_api_doc_name: \"{{ dir_path }}/{{ item }}\"\n      with_fileglob: '{{ dir_path }}/*.json'\n      register: api_gateway_endpoints_output \n\n    - name: Get api gateway info\n      ibm_api_gateway_info:\n        service_instance_crn: \"{{ api-gateway.id }}\"\n      register: apigateway_output\n\n    - name: Save api gateway info as fact", "license": "", "module": "set_fact", "output": "      set_fact:\n        cacheable: True\n        endpoint-info: \"{{ apigateway_output.resource }}\"\n      when: apigateway_output.rc==0\n       ", "path": "examples/ibm-api-gateway/create.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: Create an endpoint for a given OpenAPI definition and to create a subscription for this endpoint.\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n    - name: Fetch the variables from var file\n      include_vars:\n        file: vars.yml\n    \n    - name: provision apigateway resource instance\n      ibm_resource_instance:\n        name: \"{{ service_name }}\"\n        location: \"global\"\n        service: \"api-gateway\"\n        plan: \"lite\"\n      register: resource_instance_output\n    \n    - name: Save api-gateway resource instance as fact\n      set_fact:\n        cacheable: True\n        api-gateway: \"{{ resource_instance_output.resource }}\"\n      when: resource_instance_output.rc==0\n\n    - name: provision endpoint resource for one api document\n      ibm_api_gateway_endpoint:\n        service_instance_crn: \"{{ api-gateway.id }}\"\n        name: \"{{ endpoint_name }}\"\n        managed: \"{{ managed }}\"\n        open_api_doc_name: \"{{ file_path }}\"\n      register: api_gateway_endpoint_output\n\n    - name: Save endpoint resource as fact\n      set_fact:\n        cacheable: True\n        endpoint: \"{{ api_gateway_endpoint_output.resource }}\"\n      when: api_gateway_endpoint_output.rc==0\n\n    - name: provision endpoint resources for a directory of api douments\n      ibm_api_gateway_endpoint:\n        service_instance_crn: \"{{ api-gateway.id }}\"\n        name: \"{{ item.split('.')[0] }}\"\n        managed: \"{{ managed }}\"\n        open_api_doc_name: \"{{ dir_path }}/{{ item }}\"\n      with_fileglob: '{{ dir_path }}/*.json'\n      register: api_gateway_endpoints_output \n\n    - name: Get api gateway info\n      ibm_api_gateway_info:\n        service_instance_crn: \"{{ api-gateway.id }}\"\n      register: apigateway_output\n\n    - name: Save api gateway info as fact\n      set_fact:\n        cacheable: True\n        endpoint-info: \"{{ apigateway_output.resource }}\"\n      when: apigateway_output.rc==0\n       \n    - name: provision subscription resource for one endpoint", "license": "", "module": "ibm_api_gateway_endpoint_subscription", "output": "      ibm_api_gateway_endpoint_subscription:\n        artifact_id: endpoint-info.endpoint.endpoints[0].endpoint_id\n        name: \"{{ subscription_name }}\"\n        type: \"{{ subscription_type }}\"\n        client_secret: \"{{ secret }}\"\n      register: subscription_output\n", "path": "examples/ibm-api-gateway/create.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: Create an endpoint for a given OpenAPI definition and to create a subscription for this endpoint.\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n    - name: Fetch the variables from var file\n      include_vars:\n        file: vars.yml\n    \n    - name: provision apigateway resource instance\n      ibm_resource_instance:\n        name: \"{{ service_name }}\"\n        location: \"global\"\n        service: \"api-gateway\"\n        plan: \"lite\"\n      register: resource_instance_output\n    \n    - name: Save api-gateway resource instance as fact\n      set_fact:\n        cacheable: True\n        api-gateway: \"{{ resource_instance_output.resource }}\"\n      when: resource_instance_output.rc==0\n\n    - name: provision endpoint resource for one api document\n      ibm_api_gateway_endpoint:\n        service_instance_crn: \"{{ api-gateway.id }}\"\n        name: \"{{ endpoint_name }}\"\n        managed: \"{{ managed }}\"\n        open_api_doc_name: \"{{ file_path }}\"\n      register: api_gateway_endpoint_output\n\n    - name: Save endpoint resource as fact\n      set_fact:\n        cacheable: True\n        endpoint: \"{{ api_gateway_endpoint_output.resource }}\"\n      when: api_gateway_endpoint_output.rc==0\n\n    - name: provision endpoint resources for a directory of api douments\n      ibm_api_gateway_endpoint:\n        service_instance_crn: \"{{ api-gateway.id }}\"\n        name: \"{{ item.split('.')[0] }}\"\n        managed: \"{{ managed }}\"\n        open_api_doc_name: \"{{ dir_path }}/{{ item }}\"\n      with_fileglob: '{{ dir_path }}/*.json'\n      register: api_gateway_endpoints_output \n\n    - name: Get api gateway info\n      ibm_api_gateway_info:\n        service_instance_crn: \"{{ api-gateway.id }}\"\n      register: apigateway_output\n\n    - name: Save api gateway info as fact\n      set_fact:\n        cacheable: True\n        endpoint-info: \"{{ apigateway_output.resource }}\"\n      when: apigateway_output.rc==0\n       \n    - name: provision subscription resource for one endpoint\n      ibm_api_gateway_endpoint_subscription:\n        artifact_id: endpoint-info.endpoint.endpoints[0].endpoint_id\n        name: \"{{ subscription_name }}\"\n        type: \"{{ subscription_type }}\"\n        client_secret: \"{{ secret }}\"\n      register: subscription_output\n\n    - name: Save api gateway endpoint suscription info as fact", "license": "", "module": "set_fact", "output": "      set_fact:\n        cacheable: True\n        endpoint: \"{{ subscription_output.resource }}\"\n      when: subscription_output.rc==0    ", "path": "examples/ibm-api-gateway/create.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: Destroy api gateway endpoint subscription and api gateway instance.\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n    - name: Fetch the variables from var file", "license": "", "module": "include_vars", "output": "      include_vars:\n        file: vars.yml\n", "path": "examples/ibm-api-gateway/delete.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: Destroy api gateway endpoint subscription and api gateway instance.\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n    - name: Fetch the variables from var file\n      include_vars:\n        file: vars.yml\n\n    - name: Get Resource id details", "license": "", "module": "ibm_resource_instance_info", "output": "      ibm_resource_instance_info:\n        name: \"{{ service_name }}\"\n      register: resource_info\n", "path": "examples/ibm-api-gateway/delete.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: Destroy api gateway endpoint subscription and api gateway instance.\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n    - name: Fetch the variables from var file\n      include_vars:\n        file: vars.yml\n\n    - name: Get Resource id details\n      ibm_resource_instance_info:\n        name: \"{{ service_name }}\"\n      register: resource_info\n\n    - name: Get resource", "license": "", "module": "set_fact", "output": "      set_fact:\n        cacheable: True\n        api-gateway: \"{{ resource_info.resource }}\"\n", "path": "examples/ibm-api-gateway/delete.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: Destroy api gateway endpoint subscription and api gateway instance.\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n    - name: Fetch the variables from var file\n      include_vars:\n        file: vars.yml\n\n    - name: Get Resource id details\n      ibm_resource_instance_info:\n        name: \"{{ service_name }}\"\n      register: resource_info\n\n    - name: Get resource\n      set_fact:\n        cacheable: True\n        api-gateway: \"{{ resource_info.resource }}\"\n\n    - name: Get api gateway info", "license": "", "module": "ibm_api_gateway_info", "output": "      ibm_api_gateway_info:\n        service_instance_crn: \"{{ api-gateway.id }}\"\n      register: apigateway_output\n", "path": "examples/ibm-api-gateway/delete.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: Destroy api gateway endpoint subscription and api gateway instance.\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n    - name: Fetch the variables from var file\n      include_vars:\n        file: vars.yml\n\n    - name: Get Resource id details\n      ibm_resource_instance_info:\n        name: \"{{ service_name }}\"\n      register: resource_info\n\n    - name: Get resource\n      set_fact:\n        cacheable: True\n        api-gateway: \"{{ resource_info.resource }}\"\n\n    - name: Get api gateway info\n      ibm_api_gateway_info:\n        service_instance_crn: \"{{ api-gateway.id }}\"\n      register: apigateway_output\n\n    - name: Save api gateway info as fact", "license": "", "module": "set_fact", "output": "      set_fact:\n        cacheable: True\n        endpoint-info: \"{{ apigateway_output.resource }}\"\n      when: apigateway_output.rc==0\n", "path": "examples/ibm-api-gateway/delete.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: Destroy api gateway endpoint subscription and api gateway instance.\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n    - name: Fetch the variables from var file\n      include_vars:\n        file: vars.yml\n\n    - name: Get Resource id details\n      ibm_resource_instance_info:\n        name: \"{{ service_name }}\"\n      register: resource_info\n\n    - name: Get resource\n      set_fact:\n        cacheable: True\n        api-gateway: \"{{ resource_info.resource }}\"\n\n    - name: Get api gateway info\n      ibm_api_gateway_info:\n        service_instance_crn: \"{{ api-gateway.id }}\"\n      register: apigateway_output\n\n    - name: Save api gateway info as fact\n      set_fact:\n        cacheable: True\n        endpoint-info: \"{{ apigateway_output.resource }}\"\n      when: apigateway_output.rc==0\n\n    - name: destroy endpoint resource for one api document", "license": "", "module": "ibm_api_gateway_endpoint", "output": "      ibm_api_gateway_endpoint:\n        service_instance_crn: \"{{ api-gateway.id }}\"\n        name: \"{{ endpoint_name }}\"\n        managed: \"{{ managed }}\"\n        open_api_doc_name: \"{{ file_path }}\"\n        id: endpoint-info.endpoint.endpoints[0].endpoint_id\n        state: absent\n", "path": "examples/ibm-api-gateway/delete.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: Destroy api gateway endpoint subscription and api gateway instance.\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n    - name: Fetch the variables from var file\n      include_vars:\n        file: vars.yml\n\n    - name: Get Resource id details\n      ibm_resource_instance_info:\n        name: \"{{ service_name }}\"\n      register: resource_info\n\n    - name: Get resource\n      set_fact:\n        cacheable: True\n        api-gateway: \"{{ resource_info.resource }}\"\n\n    - name: Get api gateway info\n      ibm_api_gateway_info:\n        service_instance_crn: \"{{ api-gateway.id }}\"\n      register: apigateway_output\n\n    - name: Save api gateway info as fact\n      set_fact:\n        cacheable: True\n        endpoint-info: \"{{ apigateway_output.resource }}\"\n      when: apigateway_output.rc==0\n\n    - name: destroy endpoint resource for one api document\n      ibm_api_gateway_endpoint:\n        service_instance_crn: \"{{ api-gateway.id }}\"\n        name: \"{{ endpoint_name }}\"\n        managed: \"{{ managed }}\"\n        open_api_doc_name: \"{{ file_path }}\"\n        id: endpoint-info.endpoint.endpoints[0].endpoint_id\n        state: absent\n\n    - name: destroy apigateway resource instance", "license": "", "module": "ibm_resource_instance", "output": "      ibm_resource_instance:\n        name: \"{{ service_name }}\"\n        location: \"global\"\n        service: \"api-gateway\"\n        plan: \"lite\"\n        id: \"{{ api-gateway.id }}\"\n        state: absent\n      register: resource_instance_output", "path": "examples/ibm-api-gateway/delete.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: Import a certificate on a certificate manager insatnce.\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n    - name: Fetch the variables from var file", "license": "", "module": "include_vars", "output": "      include_vars:\n        file: vars.yml\n    ", "path": "examples/ibm-certificate-manager/create.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: Import a certificate on a certificate manager insatnce.\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n    - name: Fetch the variables from var file\n      include_vars:\n        file: vars.yml\n    \n    - name: provision certificate manager resource instance", "license": "", "module": "ibm_resource_instance", "output": "      ibm_resource_instance:\n        name: \"{{ service_name }}\"\n        location: \"{{ location }}\"\n        service: \"cloudcerts\"\n        plan: \"free\"\n      register: resource_instance_output\n    ", "path": "examples/ibm-certificate-manager/create.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: Import a certificate on a certificate manager insatnce.\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n    - name: Fetch the variables from var file\n      include_vars:\n        file: vars.yml\n    \n    - name: provision certificate manager resource instance\n      ibm_resource_instance:\n        name: \"{{ service_name }}\"\n        location: \"{{ location }}\"\n        service: \"cloudcerts\"\n        plan: \"free\"\n      register: resource_instance_output\n    \n    - name: Save certificate manager resource instance as fact", "license": "", "module": "set_fact", "output": "      set_fact:\n        cacheable: True\n        cms: \"{{ resource_instance_output.resource }}\"\n      when: resource_instance_output.rc==0\n", "path": "examples/ibm-certificate-manager/create.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: Import a certificate on a certificate manager insatnce.\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n    - name: Fetch the variables from var file\n      include_vars:\n        file: vars.yml\n    \n    - name: provision certificate manager resource instance\n      ibm_resource_instance:\n        name: \"{{ service_name }}\"\n        location: \"{{ location }}\"\n        service: \"cloudcerts\"\n        plan: \"free\"\n      register: resource_instance_output\n    \n    - name: Save certificate manager resource instance as fact\n      set_fact:\n        cacheable: True\n        cms: \"{{ resource_instance_output.resource }}\"\n      when: resource_instance_output.rc==0\n\n    - name: provision cms import resource.", "license": "", "module": "ibm_certificate_manager_import", "output": "      ibm_certificate_manager_import:\n        certificate_manager_instance_id: \"{{ cms.id }}\"\n        name: \"{{ import_name }}\"\n        data: \n          content: \"{{ lookup('file', '/Users/kavya/ca.crt') }}\"\n      register: cms_import_output\n", "path": "examples/ibm-certificate-manager/create.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: Import a certificate on a certificate manager insatnce.\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n    - name: Fetch the variables from var file\n      include_vars:\n        file: vars.yml\n    \n    - name: provision certificate manager resource instance\n      ibm_resource_instance:\n        name: \"{{ service_name }}\"\n        location: \"{{ location }}\"\n        service: \"cloudcerts\"\n        plan: \"free\"\n      register: resource_instance_output\n    \n    - name: Save certificate manager resource instance as fact\n      set_fact:\n        cacheable: True\n        cms: \"{{ resource_instance_output.resource }}\"\n      when: resource_instance_output.rc==0\n\n    - name: provision cms import resource.\n      ibm_certificate_manager_import:\n        certificate_manager_instance_id: \"{{ cms.id }}\"\n        name: \"{{ import_name }}\"\n        data: \n          content: \"{{ lookup('file', '/Users/kavya/ca.crt') }}\"\n      register: cms_import_output\n\n    - name: Save cms import resource as fact", "license": "", "module": "set_fact", "output": "      set_fact:\n        cacheable: True\n        cms_import: \"{{ cms_import_output.resource }}\"\n      when: cms_import_output.rc==0\n", "path": "examples/ibm-certificate-manager/create.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: Import a certificate on a certificate manager insatnce.\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n    - name: Fetch the variables from var file\n      include_vars:\n        file: vars.yml\n    \n    - name: provision certificate manager resource instance\n      ibm_resource_instance:\n        name: \"{{ service_name }}\"\n        location: \"{{ location }}\"\n        service: \"cloudcerts\"\n        plan: \"free\"\n      register: resource_instance_output\n    \n    - name: Save certificate manager resource instance as fact\n      set_fact:\n        cacheable: True\n        cms: \"{{ resource_instance_output.resource }}\"\n      when: resource_instance_output.rc==0\n\n    - name: provision cms import resource.\n      ibm_certificate_manager_import:\n        certificate_manager_instance_id: \"{{ cms.id }}\"\n        name: \"{{ import_name }}\"\n        data: \n          content: \"{{ lookup('file', '/Users/kavya/ca.crt') }}\"\n      register: cms_import_output\n\n    - name: Save cms import resource as fact\n      set_fact:\n        cacheable: True\n        cms_import: \"{{ cms_import_output.resource }}\"\n      when: cms_import_output.rc==0\n\n    - name: provision cms order resource", "license": "", "module": "ibm_certificate_manager_order", "output": "      ibm_certificate_manager_order:\n        certificate_manager_instance_id: \"{{ cms.id }}\"\n        name: \"{{ order_name }}\"\n        description: \"Order Certificate\"\n        domains: \n          - \"cis-terraform.com\"\n        rotate_keys: \"{{ rotate_keys }}\"\n        domain_validation_method: \"dns-01\"\n        dns_provider_instance_crn: \"{{  cis_id }}\"\n      register: cms_order_output\n", "path": "examples/ibm-certificate-manager/create.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: Import a certificate on a certificate manager insatnce.\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n    - name: Fetch the variables from var file\n      include_vars:\n        file: vars.yml\n    \n    - name: provision certificate manager resource instance\n      ibm_resource_instance:\n        name: \"{{ service_name }}\"\n        location: \"{{ location }}\"\n        service: \"cloudcerts\"\n        plan: \"free\"\n      register: resource_instance_output\n    \n    - name: Save certificate manager resource instance as fact\n      set_fact:\n        cacheable: True\n        cms: \"{{ resource_instance_output.resource }}\"\n      when: resource_instance_output.rc==0\n\n    - name: provision cms import resource.\n      ibm_certificate_manager_import:\n        certificate_manager_instance_id: \"{{ cms.id }}\"\n        name: \"{{ import_name }}\"\n        data: \n          content: \"{{ lookup('file', '/Users/kavya/ca.crt') }}\"\n      register: cms_import_output\n\n    - name: Save cms import resource as fact\n      set_fact:\n        cacheable: True\n        cms_import: \"{{ cms_import_output.resource }}\"\n      when: cms_import_output.rc==0\n\n    - name: provision cms order resource\n      ibm_certificate_manager_order:\n        certificate_manager_instance_id: \"{{ cms.id }}\"\n        name: \"{{ order_name }}\"\n        description: \"Order Certificate\"\n        domains: \n          - \"cis-terraform.com\"\n        rotate_keys: \"{{ rotate_keys }}\"\n        domain_validation_method: \"dns-01\"\n        dns_provider_instance_crn: \"{{  cis_id }}\"\n      register: cms_order_output\n\n    - name: Save cms order info as fact", "license": "", "module": "set_fact", "output": "      set_fact:\n        cacheable: True\n        cms_order: \"{{ cms_order_output.resource }}\"\n      when: cms_order_output.rc==0   \n", "path": "examples/ibm-certificate-manager/create.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: Import a certificate on a certificate manager insatnce.\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n    - name: Fetch the variables from var file\n      include_vars:\n        file: vars.yml\n    \n    - name: provision certificate manager resource instance\n      ibm_resource_instance:\n        name: \"{{ service_name }}\"\n        location: \"{{ location }}\"\n        service: \"cloudcerts\"\n        plan: \"free\"\n      register: resource_instance_output\n    \n    - name: Save certificate manager resource instance as fact\n      set_fact:\n        cacheable: True\n        cms: \"{{ resource_instance_output.resource }}\"\n      when: resource_instance_output.rc==0\n\n    - name: provision cms import resource.\n      ibm_certificate_manager_import:\n        certificate_manager_instance_id: \"{{ cms.id }}\"\n        name: \"{{ import_name }}\"\n        data: \n          content: \"{{ lookup('file', '/Users/kavya/ca.crt') }}\"\n      register: cms_import_output\n\n    - name: Save cms import resource as fact\n      set_fact:\n        cacheable: True\n        cms_import: \"{{ cms_import_output.resource }}\"\n      when: cms_import_output.rc==0\n\n    - name: provision cms order resource\n      ibm_certificate_manager_order:\n        certificate_manager_instance_id: \"{{ cms.id }}\"\n        name: \"{{ order_name }}\"\n        description: \"Order Certificate\"\n        domains: \n          - \"cis-terraform.com\"\n        rotate_keys: \"{{ rotate_keys }}\"\n        domain_validation_method: \"dns-01\"\n        dns_provider_instance_crn: \"{{  cis_id }}\"\n      register: cms_order_output\n\n    - name: Save cms order info as fact\n      set_fact:\n        cacheable: True\n        cms_order: \"{{ cms_order_output.resource }}\"\n      when: cms_order_output.rc==0   \n\n    - name: Get cms certificate info", "license": "", "module": "ibm_certificate_manager_certificate_info", "output": "      ibm_certificate_manager_certificate_info:\n        certificate_manager_instance_id: \"{{ cms.id }}\"\n        name: \"{{ import_name }}\"\n      register: certificate_output\n", "path": "examples/ibm-certificate-manager/create.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: Import a certificate on a certificate manager insatnce.\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n    - name: Fetch the variables from var file\n      include_vars:\n        file: vars.yml\n    \n    - name: provision certificate manager resource instance\n      ibm_resource_instance:\n        name: \"{{ service_name }}\"\n        location: \"{{ location }}\"\n        service: \"cloudcerts\"\n        plan: \"free\"\n      register: resource_instance_output\n    \n    - name: Save certificate manager resource instance as fact\n      set_fact:\n        cacheable: True\n        cms: \"{{ resource_instance_output.resource }}\"\n      when: resource_instance_output.rc==0\n\n    - name: provision cms import resource.\n      ibm_certificate_manager_import:\n        certificate_manager_instance_id: \"{{ cms.id }}\"\n        name: \"{{ import_name }}\"\n        data: \n          content: \"{{ lookup('file', '/Users/kavya/ca.crt') }}\"\n      register: cms_import_output\n\n    - name: Save cms import resource as fact\n      set_fact:\n        cacheable: True\n        cms_import: \"{{ cms_import_output.resource }}\"\n      when: cms_import_output.rc==0\n\n    - name: provision cms order resource\n      ibm_certificate_manager_order:\n        certificate_manager_instance_id: \"{{ cms.id }}\"\n        name: \"{{ order_name }}\"\n        description: \"Order Certificate\"\n        domains: \n          - \"cis-terraform.com\"\n        rotate_keys: \"{{ rotate_keys }}\"\n        domain_validation_method: \"dns-01\"\n        dns_provider_instance_crn: \"{{  cis_id }}\"\n      register: cms_order_output\n\n    - name: Save cms order info as fact\n      set_fact:\n        cacheable: True\n        cms_order: \"{{ cms_order_output.resource }}\"\n      when: cms_order_output.rc==0   \n\n    - name: Get cms certificate info\n      ibm_certificate_manager_certificate_info:\n        certificate_manager_instance_id: \"{{ cms.id }}\"\n        name: \"{{ import_name }}\"\n      register: certificate_output\n\n    - name: Save cms certificate info as fact", "license": "", "module": "set_fact", "output": "      set_fact:\n        cacheable: True\n        certificate_info: \"{{ certificate_output.resource }}\"\n      when: certificate_output.rc==0\n    ", "path": "examples/ibm-certificate-manager/create.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: Import a certificate on a certificate manager insatnce.\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n    - name: Fetch the variables from var file\n      include_vars:\n        file: vars.yml\n    \n    - name: provision certificate manager resource instance\n      ibm_resource_instance:\n        name: \"{{ service_name }}\"\n        location: \"{{ location }}\"\n        service: \"cloudcerts\"\n        plan: \"free\"\n      register: resource_instance_output\n    \n    - name: Save certificate manager resource instance as fact\n      set_fact:\n        cacheable: True\n        cms: \"{{ resource_instance_output.resource }}\"\n      when: resource_instance_output.rc==0\n\n    - name: provision cms import resource.\n      ibm_certificate_manager_import:\n        certificate_manager_instance_id: \"{{ cms.id }}\"\n        name: \"{{ import_name }}\"\n        data: \n          content: \"{{ lookup('file', '/Users/kavya/ca.crt') }}\"\n      register: cms_import_output\n\n    - name: Save cms import resource as fact\n      set_fact:\n        cacheable: True\n        cms_import: \"{{ cms_import_output.resource }}\"\n      when: cms_import_output.rc==0\n\n    - name: provision cms order resource\n      ibm_certificate_manager_order:\n        certificate_manager_instance_id: \"{{ cms.id }}\"\n        name: \"{{ order_name }}\"\n        description: \"Order Certificate\"\n        domains: \n          - \"cis-terraform.com\"\n        rotate_keys: \"{{ rotate_keys }}\"\n        domain_validation_method: \"dns-01\"\n        dns_provider_instance_crn: \"{{  cis_id }}\"\n      register: cms_order_output\n\n    - name: Save cms order info as fact\n      set_fact:\n        cacheable: True\n        cms_order: \"{{ cms_order_output.resource }}\"\n      when: cms_order_output.rc==0   \n\n    - name: Get cms certificate info\n      ibm_certificate_manager_certificate_info:\n        certificate_manager_instance_id: \"{{ cms.id }}\"\n        name: \"{{ import_name }}\"\n      register: certificate_output\n\n    - name: Save cms certificate info as fact\n      set_fact:\n        cacheable: True\n        certificate_info: \"{{ certificate_output.resource }}\"\n      when: certificate_output.rc==0\n    \n    - name: Get cms certificates info", "license": "", "module": "ibm_certificate_manager_certificates_info", "output": "      ibm_certificate_manager_certificates_info:\n        certificate_manager_instance_id: \"{{ cms.id }}\"\n      register: certificates_output\n", "path": "examples/ibm-certificate-manager/create.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: Import a certificate on a certificate manager insatnce.\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n    - name: Fetch the variables from var file\n      include_vars:\n        file: vars.yml\n    \n    - name: provision certificate manager resource instance\n      ibm_resource_instance:\n        name: \"{{ service_name }}\"\n        location: \"{{ location }}\"\n        service: \"cloudcerts\"\n        plan: \"free\"\n      register: resource_instance_output\n    \n    - name: Save certificate manager resource instance as fact\n      set_fact:\n        cacheable: True\n        cms: \"{{ resource_instance_output.resource }}\"\n      when: resource_instance_output.rc==0\n\n    - name: provision cms import resource.\n      ibm_certificate_manager_import:\n        certificate_manager_instance_id: \"{{ cms.id }}\"\n        name: \"{{ import_name }}\"\n        data: \n          content: \"{{ lookup('file', '/Users/kavya/ca.crt') }}\"\n      register: cms_import_output\n\n    - name: Save cms import resource as fact\n      set_fact:\n        cacheable: True\n        cms_import: \"{{ cms_import_output.resource }}\"\n      when: cms_import_output.rc==0\n\n    - name: provision cms order resource\n      ibm_certificate_manager_order:\n        certificate_manager_instance_id: \"{{ cms.id }}\"\n        name: \"{{ order_name }}\"\n        description: \"Order Certificate\"\n        domains: \n          - \"cis-terraform.com\"\n        rotate_keys: \"{{ rotate_keys }}\"\n        domain_validation_method: \"dns-01\"\n        dns_provider_instance_crn: \"{{  cis_id }}\"\n      register: cms_order_output\n\n    - name: Save cms order info as fact\n      set_fact:\n        cacheable: True\n        cms_order: \"{{ cms_order_output.resource }}\"\n      when: cms_order_output.rc==0   \n\n    - name: Get cms certificate info\n      ibm_certificate_manager_certificate_info:\n        certificate_manager_instance_id: \"{{ cms.id }}\"\n        name: \"{{ import_name }}\"\n      register: certificate_output\n\n    - name: Save cms certificate info as fact\n      set_fact:\n        cacheable: True\n        certificate_info: \"{{ certificate_output.resource }}\"\n      when: certificate_output.rc==0\n    \n    - name: Get cms certificates info\n      ibm_certificate_manager_certificates_info:\n        certificate_manager_instance_id: \"{{ cms.id }}\"\n      register: certificates_output\n\n    - name: Save cms certificates list info as fact", "license": "", "module": "set_fact", "output": "      set_fact:\n        cacheable: True\n        certificates_info: \"{{ certificates_output.resource }}\"\n      when: certificates_output.rc==0\n     ", "path": "examples/ibm-certificate-manager/create.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: Destroy cms certificates and cms instance.\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n    - name: Fetch the variables from var file", "license": "", "module": "include_vars", "output": "      include_vars:\n        file: vars.yml\n", "path": "examples/ibm-certificate-manager/delete.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: Destroy cms certificates and cms instance.\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n    - name: Fetch the variables from var file\n      include_vars:\n        file: vars.yml\n\n    - name: Get Resource id details", "license": "", "module": "ibm_resource_instance_info", "output": "      ibm_resource_instance_info:\n        name: \"{{ service_name }}\"\n      register: resource_info\n", "path": "examples/ibm-certificate-manager/delete.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: Destroy cms certificates and cms instance.\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n    - name: Fetch the variables from var file\n      include_vars:\n        file: vars.yml\n\n    - name: Get Resource id details\n      ibm_resource_instance_info:\n        name: \"{{ service_name }}\"\n      register: resource_info\n\n    - name: Get resource", "license": "", "module": "set_fact", "output": "      set_fact:\n        cacheable: True\n        cms: \"{{ resource_info.resource }}\"\n", "path": "examples/ibm-certificate-manager/delete.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: Destroy cms certificates and cms instance.\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n    - name: Fetch the variables from var file\n      include_vars:\n        file: vars.yml\n\n    - name: Get Resource id details\n      ibm_resource_instance_info:\n        name: \"{{ service_name }}\"\n      register: resource_info\n\n    - name: Get resource\n      set_fact:\n        cacheable: True\n        cms: \"{{ resource_info.resource }}\"\n\n    - name: Get certificate", "license": "", "module": "ibm_certificate_manager_certificate_info", "output": "      ibm_certificate_manager_certificate_info:\n        certificate_manager_instance_id: \"{{ cms.id }}\"\n        name: \"{{ import_name }}\"\n      register: certificate1_output\n", "path": "examples/ibm-certificate-manager/delete.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: Destroy cms certificates and cms instance.\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n    - name: Fetch the variables from var file\n      include_vars:\n        file: vars.yml\n\n    - name: Get Resource id details\n      ibm_resource_instance_info:\n        name: \"{{ service_name }}\"\n      register: resource_info\n\n    - name: Get resource\n      set_fact:\n        cacheable: True\n        cms: \"{{ resource_info.resource }}\"\n\n    - name: Get certificate\n      ibm_certificate_manager_certificate_info:\n        certificate_manager_instance_id: \"{{ cms.id }}\"\n        name: \"{{ import_name }}\"\n      register: certificate1_output\n\n    - name: Save cms imported certificate info as fact", "license": "", "module": "set_fact", "output": "      set_fact:\n        cacheable: True\n        certificate1_info: \"{{ certificate1_output.resource }}\"\n      when: certificate1_output.rc==0\n\n", "path": "examples/ibm-certificate-manager/delete.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: Destroy cms certificates and cms instance.\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n    - name: Fetch the variables from var file\n      include_vars:\n        file: vars.yml\n\n    - name: Get Resource id details\n      ibm_resource_instance_info:\n        name: \"{{ service_name }}\"\n      register: resource_info\n\n    - name: Get resource\n      set_fact:\n        cacheable: True\n        cms: \"{{ resource_info.resource }}\"\n\n    - name: Get certificate\n      ibm_certificate_manager_certificate_info:\n        certificate_manager_instance_id: \"{{ cms.id }}\"\n        name: \"{{ import_name }}\"\n      register: certificate1_output\n\n    - name: Save cms imported certificate info as fact\n      set_fact:\n        cacheable: True\n        certificate1_info: \"{{ certificate1_output.resource }}\"\n      when: certificate1_output.rc==0\n\n\n    - name: Get 2nd certificate", "license": "", "module": "ibm_certificate_manager_certificate_info", "output": "      ibm_certificate_manager_certificate_info:\n        certificate_manager_instance_id: \"{{ cms.id }}\"\n        name: \"{{ order_name }}\"\n      register: certificate2_output\n", "path": "examples/ibm-certificate-manager/delete.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: Destroy cms certificates and cms instance.\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n    - name: Fetch the variables from var file\n      include_vars:\n        file: vars.yml\n\n    - name: Get Resource id details\n      ibm_resource_instance_info:\n        name: \"{{ service_name }}\"\n      register: resource_info\n\n    - name: Get resource\n      set_fact:\n        cacheable: True\n        cms: \"{{ resource_info.resource }}\"\n\n    - name: Get certificate\n      ibm_certificate_manager_certificate_info:\n        certificate_manager_instance_id: \"{{ cms.id }}\"\n        name: \"{{ import_name }}\"\n      register: certificate1_output\n\n    - name: Save cms imported certificate info as fact\n      set_fact:\n        cacheable: True\n        certificate1_info: \"{{ certificate1_output.resource }}\"\n      when: certificate1_output.rc==0\n\n\n    - name: Get 2nd certificate\n      ibm_certificate_manager_certificate_info:\n        certificate_manager_instance_id: \"{{ cms.id }}\"\n        name: \"{{ order_name }}\"\n      register: certificate2_output\n\n    - name: Save cms ordered certificate info as fact", "license": "", "module": "set_fact", "output": "      set_fact:\n        cacheable: True\n        certificate2_info: \"{{ certificate2_output.resource }}\"\n      when: certificate2_output.rc==0\n", "path": "examples/ibm-certificate-manager/delete.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: Destroy cms certificates and cms instance.\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n    - name: Fetch the variables from var file\n      include_vars:\n        file: vars.yml\n\n    - name: Get Resource id details\n      ibm_resource_instance_info:\n        name: \"{{ service_name }}\"\n      register: resource_info\n\n    - name: Get resource\n      set_fact:\n        cacheable: True\n        cms: \"{{ resource_info.resource }}\"\n\n    - name: Get certificate\n      ibm_certificate_manager_certificate_info:\n        certificate_manager_instance_id: \"{{ cms.id }}\"\n        name: \"{{ import_name }}\"\n      register: certificate1_output\n\n    - name: Save cms imported certificate info as fact\n      set_fact:\n        cacheable: True\n        certificate1_info: \"{{ certificate1_output.resource }}\"\n      when: certificate1_output.rc==0\n\n\n    - name: Get 2nd certificate\n      ibm_certificate_manager_certificate_info:\n        certificate_manager_instance_id: \"{{ cms.id }}\"\n        name: \"{{ order_name }}\"\n      register: certificate2_output\n\n    - name: Save cms ordered certificate info as fact\n      set_fact:\n        cacheable: True\n        certificate2_info: \"{{ certificate2_output.resource }}\"\n      when: certificate2_output.rc==0\n\n    - name: destroy imported certificate", "license": "", "module": "ibm_certificate_manager_import", "output": "      ibm_certificate_manager_import:\n        certificate_manager_instance_id: \"{{ cms.id }}\"\n        name: \"{{ import_name }}\"\n        data: \n          content: \"{{ lookup('file', '/Users/kavya/ca.crt') }}\"\n        id: certificate1_info.certificate_details[0].cert_id\n        state: absent\n", "path": "examples/ibm-certificate-manager/delete.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: Destroy cms certificates and cms instance.\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n    - name: Fetch the variables from var file\n      include_vars:\n        file: vars.yml\n\n    - name: Get Resource id details\n      ibm_resource_instance_info:\n        name: \"{{ service_name }}\"\n      register: resource_info\n\n    - name: Get resource\n      set_fact:\n        cacheable: True\n        cms: \"{{ resource_info.resource }}\"\n\n    - name: Get certificate\n      ibm_certificate_manager_certificate_info:\n        certificate_manager_instance_id: \"{{ cms.id }}\"\n        name: \"{{ import_name }}\"\n      register: certificate1_output\n\n    - name: Save cms imported certificate info as fact\n      set_fact:\n        cacheable: True\n        certificate1_info: \"{{ certificate1_output.resource }}\"\n      when: certificate1_output.rc==0\n\n\n    - name: Get 2nd certificate\n      ibm_certificate_manager_certificate_info:\n        certificate_manager_instance_id: \"{{ cms.id }}\"\n        name: \"{{ order_name }}\"\n      register: certificate2_output\n\n    - name: Save cms ordered certificate info as fact\n      set_fact:\n        cacheable: True\n        certificate2_info: \"{{ certificate2_output.resource }}\"\n      when: certificate2_output.rc==0\n\n    - name: destroy imported certificate\n      ibm_certificate_manager_import:\n        certificate_manager_instance_id: \"{{ cms.id }}\"\n        name: \"{{ import_name }}\"\n        data: \n          content: \"{{ lookup('file', '/Users/kavya/ca.crt') }}\"\n        id: certificate1_info.certificate_details[0].cert_id\n        state: absent\n\n    - name: destroy ordered certificate", "license": "", "module": "ibm_certificate_manager_order", "output": "      ibm_certificate_manager_order:\n        certificate_manager_instance_id: \"{{ cms.id }}\"\n        name: \"{{ order_name }}\"\n        description: \"Order Certificate\"\n        domains: \n          - \"cis-terraform.com\"\n        rotate_keys: \"{{ rotate_keys }}\"\n        domain_validation_method: \"dns-01\"\n        dns_provider_instance_crn: \"{{  cis_id }}\"\n        id: certificate2_info.certificate_details[0].cert_id\n        state: absent\n\n", "path": "examples/ibm-certificate-manager/delete.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: Destroy cms certificates and cms instance.\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n    - name: Fetch the variables from var file\n      include_vars:\n        file: vars.yml\n\n    - name: Get Resource id details\n      ibm_resource_instance_info:\n        name: \"{{ service_name }}\"\n      register: resource_info\n\n    - name: Get resource\n      set_fact:\n        cacheable: True\n        cms: \"{{ resource_info.resource }}\"\n\n    - name: Get certificate\n      ibm_certificate_manager_certificate_info:\n        certificate_manager_instance_id: \"{{ cms.id }}\"\n        name: \"{{ import_name }}\"\n      register: certificate1_output\n\n    - name: Save cms imported certificate info as fact\n      set_fact:\n        cacheable: True\n        certificate1_info: \"{{ certificate1_output.resource }}\"\n      when: certificate1_output.rc==0\n\n\n    - name: Get 2nd certificate\n      ibm_certificate_manager_certificate_info:\n        certificate_manager_instance_id: \"{{ cms.id }}\"\n        name: \"{{ order_name }}\"\n      register: certificate2_output\n\n    - name: Save cms ordered certificate info as fact\n      set_fact:\n        cacheable: True\n        certificate2_info: \"{{ certificate2_output.resource }}\"\n      when: certificate2_output.rc==0\n\n    - name: destroy imported certificate\n      ibm_certificate_manager_import:\n        certificate_manager_instance_id: \"{{ cms.id }}\"\n        name: \"{{ import_name }}\"\n        data: \n          content: \"{{ lookup('file', '/Users/kavya/ca.crt') }}\"\n        id: certificate1_info.certificate_details[0].cert_id\n        state: absent\n\n    - name: destroy ordered certificate\n      ibm_certificate_manager_order:\n        certificate_manager_instance_id: \"{{ cms.id }}\"\n        name: \"{{ order_name }}\"\n        description: \"Order Certificate\"\n        domains: \n          - \"cis-terraform.com\"\n        rotate_keys: \"{{ rotate_keys }}\"\n        domain_validation_method: \"dns-01\"\n        dns_provider_instance_crn: \"{{  cis_id }}\"\n        id: certificate2_info.certificate_details[0].cert_id\n        state: absent\n\n\n    - name: destroy cms resource instance", "license": "", "module": "ibm_resource_instance", "output": "      ibm_resource_instance:\n        name: \"{{ service_name }}\"\n        location: \"{{ location }}\"\n        service: \"cloudcerts\"\n        plan: \"free\"\n        id: \"{{ cms.id }}\"\n        state: absent\n      register: resource_instance_output", "path": "examples/ibm-certificate-manager/delete.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: Openshift cluster on Classic infra.\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n    - name: Fetch the variables from var file", "license": "", "module": "include_vars", "output": "      include_vars:\n        file: vars.yml\n    ", "path": "examples/ibm-iks-classic-ROKS/create.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: Openshift cluster on Classic infra.\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n    - name: Fetch the variables from var file\n      include_vars:\n        file: vars.yml\n    \n    - name: Check is cluster Exists", "license": "", "module": "ibm_container_cluster_info", "output": "      ibm_container_cluster_info:\n        cluster_name_id: \"{{ cluster_name }}\"\n      failed_when:\n        - cluster_output.rc != 0\n        - '\"cluster could not be found\" not in cluster_output.stderr'\n      register: cluster_output\n", "path": "examples/ibm-iks-classic-ROKS/create.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: Openshift cluster on Classic infra.\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n    - name: Fetch the variables from var file\n      include_vars:\n        file: vars.yml\n    \n    - name: Check is cluster Exists\n      ibm_container_cluster_info:\n        cluster_name_id: \"{{ cluster_name }}\"\n      failed_when:\n        - cluster_output.rc != 0\n        - '\"cluster could not be found\" not in cluster_output.stderr'\n      register: cluster_output\n\n    - name: Save Cluster info as fact", "license": "", "module": "set_fact", "output": "      set_fact:\n        cacheable: True\n        cluster_info: \"{{ cluster_output.resource }}\"\n      when: cluster_output.rc==0\n    ", "path": "examples/ibm-iks-classic-ROKS/create.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: Openshift cluster on Classic infra.\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n    - name: Fetch the variables from var file\n      include_vars:\n        file: vars.yml\n    \n    - name: Check is cluster Exists\n      ibm_container_cluster_info:\n        cluster_name_id: \"{{ cluster_name }}\"\n      failed_when:\n        - cluster_output.rc != 0\n        - '\"cluster could not be found\" not in cluster_output.stderr'\n      register: cluster_output\n\n    - name: Save Cluster info as fact\n      set_fact:\n        cacheable: True\n        cluster_info: \"{{ cluster_output.resource }}\"\n      when: cluster_output.rc==0\n    \n    - name: Create Openshift Cluster", "license": "", "module": "ibm_container_cluster", "output": "      ibm_container_cluster:\n        name: \"{{ cluster_name }}\"\n        datacenter: \"{{ datacenter }}\"\n        machine_type: \"{{ machine_type }}\"\n        hardware: \"{{ hardware }}\"\n        kube_version: \"{{ kube_version }}\"\n        public_vlan_id: \"{{ public_vlan_id }}\"\n        private_vlan_id: \"{{ private_vlan_id }}\"\n        default_pool_size: \"{{ default_worker_ppol_size }}\"\n        entitlement: \"{{ entitlement }}\"\n      register: cluster_create_output\n      when: cluster_output.rc != 0\n", "path": "examples/ibm-iks-classic-ROKS/create.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: Openshift cluster on Classic infra.\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n    - name: Fetch the variables from var file\n      include_vars:\n        file: vars.yml\n    \n    - name: Check is cluster Exists\n      ibm_container_cluster_info:\n        cluster_name_id: \"{{ cluster_name }}\"\n      failed_when:\n        - cluster_output.rc != 0\n        - '\"cluster could not be found\" not in cluster_output.stderr'\n      register: cluster_output\n\n    - name: Save Cluster info as fact\n      set_fact:\n        cacheable: True\n        cluster_info: \"{{ cluster_output.resource }}\"\n      when: cluster_output.rc==0\n    \n    - name: Create Openshift Cluster\n      ibm_container_cluster:\n        name: \"{{ cluster_name }}\"\n        datacenter: \"{{ datacenter }}\"\n        machine_type: \"{{ machine_type }}\"\n        hardware: \"{{ hardware }}\"\n        kube_version: \"{{ kube_version }}\"\n        public_vlan_id: \"{{ public_vlan_id }}\"\n        private_vlan_id: \"{{ private_vlan_id }}\"\n        default_pool_size: \"{{ default_worker_ppol_size }}\"\n        entitlement: \"{{ entitlement }}\"\n      register: cluster_create_output\n      when: cluster_output.rc != 0\n\n    - name: save created cluster info as fact", "license": "", "module": "set_fact", "output": "      set_fact:\n        cacheable: True\n        cluster_info: \"{{ cluster_create_output.resource }}\"\n      when: cluster_create_output.resource.id is defined\n", "path": "examples/ibm-iks-classic-ROKS/create.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: Openshift cluster on Classic infra.\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n    - name: Fetch the variables from var file\n      include_vars:\n        file: vars.yml\n    \n    - name: Check is cluster Exists\n      ibm_container_cluster_info:\n        cluster_name_id: \"{{ cluster_name }}\"\n      failed_when:\n        - cluster_output.rc != 0\n        - '\"cluster could not be found\" not in cluster_output.stderr'\n      register: cluster_output\n\n    - name: Save Cluster info as fact\n      set_fact:\n        cacheable: True\n        cluster_info: \"{{ cluster_output.resource }}\"\n      when: cluster_output.rc==0\n    \n    - name: Create Openshift Cluster\n      ibm_container_cluster:\n        name: \"{{ cluster_name }}\"\n        datacenter: \"{{ datacenter }}\"\n        machine_type: \"{{ machine_type }}\"\n        hardware: \"{{ hardware }}\"\n        kube_version: \"{{ kube_version }}\"\n        public_vlan_id: \"{{ public_vlan_id }}\"\n        private_vlan_id: \"{{ private_vlan_id }}\"\n        default_pool_size: \"{{ default_worker_ppol_size }}\"\n        entitlement: \"{{ entitlement }}\"\n      register: cluster_create_output\n      when: cluster_output.rc != 0\n\n    - name: save created cluster info as fact\n      set_fact:\n        cacheable: True\n        cluster_info: \"{{ cluster_create_output.resource }}\"\n      when: cluster_create_output.resource.id is defined\n\n    - name: Save Cluster config File", "license": "", "module": "ibm_container_cluster_config_info", "output": "      ibm_container_cluster_config_info:\n        cluster_name_id: \"{{cluster_info.id}}\"\n      register: config_output\n", "path": "examples/ibm-iks-classic-ROKS/create.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: Openshift cluster on Classic infra.\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n    - name: Fetch the variables from var file\n      include_vars:\n        file: vars.yml\n    \n    - name: Check is cluster Exists\n      ibm_container_cluster_info:\n        cluster_name_id: \"{{ cluster_name }}\"\n      failed_when:\n        - cluster_output.rc != 0\n        - '\"cluster could not be found\" not in cluster_output.stderr'\n      register: cluster_output\n\n    - name: Save Cluster info as fact\n      set_fact:\n        cacheable: True\n        cluster_info: \"{{ cluster_output.resource }}\"\n      when: cluster_output.rc==0\n    \n    - name: Create Openshift Cluster\n      ibm_container_cluster:\n        name: \"{{ cluster_name }}\"\n        datacenter: \"{{ datacenter }}\"\n        machine_type: \"{{ machine_type }}\"\n        hardware: \"{{ hardware }}\"\n        kube_version: \"{{ kube_version }}\"\n        public_vlan_id: \"{{ public_vlan_id }}\"\n        private_vlan_id: \"{{ private_vlan_id }}\"\n        default_pool_size: \"{{ default_worker_ppol_size }}\"\n        entitlement: \"{{ entitlement }}\"\n      register: cluster_create_output\n      when: cluster_output.rc != 0\n\n    - name: save created cluster info as fact\n      set_fact:\n        cacheable: True\n        cluster_info: \"{{ cluster_create_output.resource }}\"\n      when: cluster_create_output.resource.id is defined\n\n    - name: Save Cluster config File\n      ibm_container_cluster_config_info:\n        cluster_name_id: \"{{cluster_info.id}}\"\n      register: config_output\n\n    - name: save cluster config path as fact", "license": "", "module": "set_fact", "output": "      set_fact:\n        cacheable: True\n        cluster_config: \"{{ config_output.resource }}\"\n      when: config_output.rc==0      \n", "path": "examples/ibm-iks-classic-ROKS/create.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: Openshift cluster on Classic infra.\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n    - name: Fetch the variables from var file\n      include_vars:\n        file: vars.yml\n    \n    - name: Check is cluster Exists\n      ibm_container_cluster_info:\n        cluster_name_id: \"{{ cluster_name }}\"\n      failed_when:\n        - cluster_output.rc != 0\n        - '\"cluster could not be found\" not in cluster_output.stderr'\n      register: cluster_output\n\n    - name: Save Cluster info as fact\n      set_fact:\n        cacheable: True\n        cluster_info: \"{{ cluster_output.resource }}\"\n      when: cluster_output.rc==0\n    \n    - name: Create Openshift Cluster\n      ibm_container_cluster:\n        name: \"{{ cluster_name }}\"\n        datacenter: \"{{ datacenter }}\"\n        machine_type: \"{{ machine_type }}\"\n        hardware: \"{{ hardware }}\"\n        kube_version: \"{{ kube_version }}\"\n        public_vlan_id: \"{{ public_vlan_id }}\"\n        private_vlan_id: \"{{ private_vlan_id }}\"\n        default_pool_size: \"{{ default_worker_ppol_size }}\"\n        entitlement: \"{{ entitlement }}\"\n      register: cluster_create_output\n      when: cluster_output.rc != 0\n\n    - name: save created cluster info as fact\n      set_fact:\n        cacheable: True\n        cluster_info: \"{{ cluster_create_output.resource }}\"\n      when: cluster_create_output.resource.id is defined\n\n    - name: Save Cluster config File\n      ibm_container_cluster_config_info:\n        cluster_name_id: \"{{cluster_info.id}}\"\n      register: config_output\n\n    - name: save cluster config path as fact\n      set_fact:\n        cacheable: True\n        cluster_config: \"{{ config_output.resource }}\"\n      when: config_output.rc==0      \n\n    - name: Print Cluster info ", "license": "", "module": "debug", "output": "      debug:\n        msg: \"cluster : {{ cluster_info }}\"\n", "path": "examples/ibm-iks-classic-ROKS/create.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: Openshift cluster on Classic infra.\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n    - name: Fetch the variables from var file\n      include_vars:\n        file: vars.yml\n    \n    - name: Check is cluster Exists\n      ibm_container_cluster_info:\n        cluster_name_id: \"{{ cluster_name }}\"\n      failed_when:\n        - cluster_output.rc != 0\n        - '\"cluster could not be found\" not in cluster_output.stderr'\n      register: cluster_output\n\n    - name: Save Cluster info as fact\n      set_fact:\n        cacheable: True\n        cluster_info: \"{{ cluster_output.resource }}\"\n      when: cluster_output.rc==0\n    \n    - name: Create Openshift Cluster\n      ibm_container_cluster:\n        name: \"{{ cluster_name }}\"\n        datacenter: \"{{ datacenter }}\"\n        machine_type: \"{{ machine_type }}\"\n        hardware: \"{{ hardware }}\"\n        kube_version: \"{{ kube_version }}\"\n        public_vlan_id: \"{{ public_vlan_id }}\"\n        private_vlan_id: \"{{ private_vlan_id }}\"\n        default_pool_size: \"{{ default_worker_ppol_size }}\"\n        entitlement: \"{{ entitlement }}\"\n      register: cluster_create_output\n      when: cluster_output.rc != 0\n\n    - name: save created cluster info as fact\n      set_fact:\n        cacheable: True\n        cluster_info: \"{{ cluster_create_output.resource }}\"\n      when: cluster_create_output.resource.id is defined\n\n    - name: Save Cluster config File\n      ibm_container_cluster_config_info:\n        cluster_name_id: \"{{cluster_info.id}}\"\n      register: config_output\n\n    - name: save cluster config path as fact\n      set_fact:\n        cacheable: True\n        cluster_config: \"{{ config_output.resource }}\"\n      when: config_output.rc==0      \n\n    - name: Print Cluster info \n      debug:\n        msg: \"cluster : {{ cluster_info }}\"\n\n    - name: Print Clustet config file path", "license": "", "module": "debug", "output": "      debug:\n        msg: \"cluster config file path : {{ cluster_config.config_file_path }}\"\n      when: config_output.rc==0\n      ", "path": "examples/ibm-iks-classic-ROKS/create.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "- name: Delete openshift cluster on Classic infra.\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n    - name: Fetch the variables from var file", "license": "", "module": "include_vars", "output": "      include_vars:\n        file: vars.yml\n    ", "path": "examples/ibm-iks-classic-ROKS/destroy.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "- name: Delete openshift cluster on Classic infra.\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n    - name: Fetch the variables from var file\n      include_vars:\n        file: vars.yml\n    \n    - name: Check is cluster Exists", "license": "", "module": "ibm_container_cluster_info", "output": "      ibm_container_cluster_info:\n        cluster_name_id: \"{{ cluster_name }}\"\n      failed_when:\n        - cluster_output.rc != 0\n        - '\"cluster could not be found\" not in cluster_output.stderr'\n      register: cluster_output\n", "path": "examples/ibm-iks-classic-ROKS/destroy.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "- name: Delete openshift cluster on Classic infra.\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n    - name: Fetch the variables from var file\n      include_vars:\n        file: vars.yml\n    \n    - name: Check is cluster Exists\n      ibm_container_cluster_info:\n        cluster_name_id: \"{{ cluster_name }}\"\n      failed_when:\n        - cluster_output.rc != 0\n        - '\"cluster could not be found\" not in cluster_output.stderr'\n      register: cluster_output\n\n    - name: Save Cluster info as fact", "license": "", "module": "set_fact", "output": "      set_fact:\n        cacheable: True\n        cluster_info: \"{{ cluster_output.resource }}\"\n      when: cluster_output.rc==0\n    ", "path": "examples/ibm-iks-classic-ROKS/destroy.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "- name: Delete openshift cluster on Classic infra.\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n    - name: Fetch the variables from var file\n      include_vars:\n        file: vars.yml\n    \n    - name: Check is cluster Exists\n      ibm_container_cluster_info:\n        cluster_name_id: \"{{ cluster_name }}\"\n      failed_when:\n        - cluster_output.rc != 0\n        - '\"cluster could not be found\" not in cluster_output.stderr'\n      register: cluster_output\n\n    - name: Save Cluster info as fact\n      set_fact:\n        cacheable: True\n        cluster_info: \"{{ cluster_output.resource }}\"\n      when: cluster_output.rc==0\n    \n    - name: Destroy Openshift Cluster", "license": "", "module": "ibm_container_cluster", "output": "      ibm_container_cluster:\n        name: \"{{ cluster_name }}\"\n        id: \"{{ cluster_info.id }}\"\n        state: absent\n      register: cluster_destroy_output\n      when: cluster_info.id is defined ", "path": "examples/ibm-iks-classic-ROKS/destroy.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: Resource Group Creation.\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n    - name: Fetch the variables from var file", "license": "", "module": "include_vars", "output": "      include_vars:\n        file: vars.yml\n", "path": "examples/ibm-resource-group/create.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: Resource Group Creation.\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n    - name: Fetch the variables from var file\n      include_vars:\n        file: vars.yml\n\n    - name: Check resource group Exists", "license": "", "module": "ibm_resource_group_info", "output": "      ibm_resource_group_info:\n        name: \"{{ resource_group_name }}\"\n      failed_when: \n         - resource_group_output.rc != 0\n         - '\"ResourceGroupDoesnotExist\" not in resource_group_output.stderr'     \n      register: resource_group_output\n", "path": "examples/ibm-resource-group/create.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: Resource Group Creation.\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n    - name: Fetch the variables from var file\n      include_vars:\n        file: vars.yml\n\n    - name: Check resource group Exists\n      ibm_resource_group_info:\n        name: \"{{ resource_group_name }}\"\n      failed_when: \n         - resource_group_output.rc != 0\n         - '\"ResourceGroupDoesnotExist\" not in resource_group_output.stderr'     \n      register: resource_group_output\n\n    - name: Save existing resource group info as fact", "license": "", "module": "set_fact", "output": "      set_fact:\n        cacheable: True\n        resource_group: \"{{ resource_group_output.resource }}\"\n      when: resource_group_output.resource.id is defined\n", "path": "examples/ibm-resource-group/create.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: Resource Group Creation.\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n    - name: Fetch the variables from var file\n      include_vars:\n        file: vars.yml\n\n    - name: Check resource group Exists\n      ibm_resource_group_info:\n        name: \"{{ resource_group_name }}\"\n      failed_when: \n         - resource_group_output.rc != 0\n         - '\"ResourceGroupDoesnotExist\" not in resource_group_output.stderr'     \n      register: resource_group_output\n\n    - name: Save existing resource group info as fact\n      set_fact:\n        cacheable: True\n        resource_group: \"{{ resource_group_output.resource }}\"\n      when: resource_group_output.resource.id is defined\n\n    - name: Create resource Group", "license": "", "module": "ibm_resource_group", "output": "      ibm_resource_group:\n        name: \"{{ resource_group_name }}\"\n      register: rg_create_output\n      when: resource_group is not defined\n", "path": "examples/ibm-resource-group/create.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: Resource Group Creation.\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n    - name: Fetch the variables from var file\n      include_vars:\n        file: vars.yml\n\n    - name: Check resource group Exists\n      ibm_resource_group_info:\n        name: \"{{ resource_group_name }}\"\n      failed_when: \n         - resource_group_output.rc != 0\n         - '\"ResourceGroupDoesnotExist\" not in resource_group_output.stderr'     \n      register: resource_group_output\n\n    - name: Save existing resource group info as fact\n      set_fact:\n        cacheable: True\n        resource_group: \"{{ resource_group_output.resource }}\"\n      when: resource_group_output.resource.id is defined\n\n    - name: Create resource Group\n      ibm_resource_group:\n        name: \"{{ resource_group_name }}\"\n      register: rg_create_output\n      when: resource_group is not defined\n\n    - name: Save newly created resource group info as fact", "license": "", "module": "set_fact", "output": "      set_fact:\n        cacheable: True\n        resource_group: \"{{ rg_create_output.resource }}\"\n      when: rg_create_output.resource.id is defined\n", "path": "examples/ibm-resource-group/create.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: Resource Group Creation.\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n    - name: Fetch the variables from var file\n      include_vars:\n        file: vars.yml\n\n    - name: Check resource group Exists\n      ibm_resource_group_info:\n        name: \"{{ resource_group_name }}\"\n      failed_when: \n         - resource_group_output.rc != 0\n         - '\"ResourceGroupDoesnotExist\" not in resource_group_output.stderr'     \n      register: resource_group_output\n\n    - name: Save existing resource group info as fact\n      set_fact:\n        cacheable: True\n        resource_group: \"{{ resource_group_output.resource }}\"\n      when: resource_group_output.resource.id is defined\n\n    - name: Create resource Group\n      ibm_resource_group:\n        name: \"{{ resource_group_name }}\"\n      register: rg_create_output\n      when: resource_group is not defined\n\n    - name: Save newly created resource group info as fact\n      set_fact:\n        cacheable: True\n        resource_group: \"{{ rg_create_output.resource }}\"\n      when: rg_create_output.resource.id is defined\n\n    - name: Print Resource group info ", "license": "", "module": "debug", "output": "      debug:\n        msg: \"Resource Group : {{ resource_group }}\"\n\n        \n\n      ", "path": "examples/ibm-resource-group/create.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: Resource Group Deletion.\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n    - name: Fetch the variables from var file", "license": "", "module": "include_vars", "output": "      include_vars:\n        file: vars.yml\n", "path": "examples/ibm-resource-group/destroy.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: Resource Group Deletion.\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n    - name: Fetch the variables from var file\n      include_vars:\n        file: vars.yml\n\n    - name: Check if resource Group error exists", "license": "", "module": "ibm_resource_group_info", "output": "      ibm_resource_group_info:\n        name: \"{{ resource_group_name }}\"\n      failed_when:\n         - resource_group_output.rc != 0\n         - '\"ResourceGroupDoesnotExist\" not in resource_group_output.stderr'     \n      register: resource_group_output\n", "path": "examples/ibm-resource-group/destroy.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: Resource Group Deletion.\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n    - name: Fetch the variables from var file\n      include_vars:\n        file: vars.yml\n\n    - name: Check if resource Group error exists\n      ibm_resource_group_info:\n        name: \"{{ resource_group_name }}\"\n      failed_when:\n         - resource_group_output.rc != 0\n         - '\"ResourceGroupDoesnotExist\" not in resource_group_output.stderr'     \n      register: resource_group_output\n\n    - name: Save Resource group info as fact", "license": "", "module": "set_fact", "output": "      set_fact:\n        cacheable: True\n        resource_group: \"{{ resource_group_output.resource }}\"\n      when: resource_group_output.resource.id is defined\n", "path": "examples/ibm-resource-group/destroy.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: Resource Group Deletion.\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n    - name: Fetch the variables from var file\n      include_vars:\n        file: vars.yml\n\n    - name: Check if resource Group error exists\n      ibm_resource_group_info:\n        name: \"{{ resource_group_name }}\"\n      failed_when:\n         - resource_group_output.rc != 0\n         - '\"ResourceGroupDoesnotExist\" not in resource_group_output.stderr'     \n      register: resource_group_output\n\n    - name: Save Resource group info as fact\n      set_fact:\n        cacheable: True\n        resource_group: \"{{ resource_group_output.resource }}\"\n      when: resource_group_output.resource.id is defined\n\n    - name: Delete Resource group", "license": "", "module": "ibm_resource_group", "output": "      ibm_resource_group:\n        id: \"{{ resource_group.id }}\"\n        state: absent\n      register: output\n      when: resource_group.id is defined   ", "path": "examples/ibm-resource-group/destroy.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: Create IBM Cloud VPC VSI\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n    - name: Fetch the variables from var file", "license": "", "module": "include_vars", "output": "      include_vars:\n        file: vars.yml\n", "path": "examples/multiple-vm-ssh/create.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: Create IBM Cloud VPC VSI\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n    - name: Fetch the variables from var file\n      include_vars:\n        file: vars.yml\n\n    - name: Checking for existing VPC", "license": "", "module": "ibm_is_vpc_info", "output": "      ibm_is_vpc_info:\n        name: \"{{ vpc_name }}\"\n      failed_when:\n        - vpc.rc != 0\n        - '\"No VPC found\" not in vpc.stderr'\n      register: vpc\n", "path": "examples/multiple-vm-ssh/create.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: Create IBM Cloud VPC VSI\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n    - name: Fetch the variables from var file\n      include_vars:\n        file: vars.yml\n\n    - name: Checking for existing VPC\n      ibm_is_vpc_info:\n        name: \"{{ vpc_name }}\"\n      failed_when:\n        - vpc.rc != 0\n        - '\"No VPC found\" not in vpc.stderr'\n      register: vpc\n\n    - name: Configure VPC", "license": "", "module": "ibm_is_vpc", "output": "      ibm_is_vpc:\n        name: \"{{ vpc_name }}\"\n        state: available\n        id: \"{{ vpc.resource.id | default(omit) }}\"\n      register: vpc\n", "path": "examples/multiple-vm-ssh/create.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: Create IBM Cloud VPC VSI\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n    - name: Fetch the variables from var file\n      include_vars:\n        file: vars.yml\n\n    - name: Checking for existing VPC\n      ibm_is_vpc_info:\n        name: \"{{ vpc_name }}\"\n      failed_when:\n        - vpc.rc != 0\n        - '\"No VPC found\" not in vpc.stderr'\n      register: vpc\n\n    - name: Configure VPC\n      ibm_is_vpc:\n        name: \"{{ vpc_name }}\"\n        state: available\n        id: \"{{ vpc.resource.id | default(omit) }}\"\n      register: vpc\n\n    - name: Checking for existing VPC Subnet", "license": "", "module": "ibm_is_subnet_info", "output": "      ibm_is_subnet_info:\n        name: \"{{ subnet_name }}\"\n      failed_when:\n        - subnet.rc != 0\n        - '\"No subnet found\" not in subnet.stderr'\n      register: subnet\n", "path": "examples/multiple-vm-ssh/create.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: Create IBM Cloud VPC VSI\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n    - name: Fetch the variables from var file\n      include_vars:\n        file: vars.yml\n\n    - name: Checking for existing VPC\n      ibm_is_vpc_info:\n        name: \"{{ vpc_name }}\"\n      failed_when:\n        - vpc.rc != 0\n        - '\"No VPC found\" not in vpc.stderr'\n      register: vpc\n\n    - name: Configure VPC\n      ibm_is_vpc:\n        name: \"{{ vpc_name }}\"\n        state: available\n        id: \"{{ vpc.resource.id | default(omit) }}\"\n      register: vpc\n\n    - name: Checking for existing VPC Subnet\n      ibm_is_subnet_info:\n        name: \"{{ subnet_name }}\"\n      failed_when:\n        - subnet.rc != 0\n        - '\"No subnet found\" not in subnet.stderr'\n      register: subnet\n\n    - name: Configure VPC Subnet", "license": "", "module": "ibm_is_subnet", "output": "      ibm_is_subnet:\n        name: \"{{ subnet_name }}\"\n        state: available\n        id: \"{{ subnet.id | default(omit) }}\"\n        vpc: \"{{ vpc.resource.id }}\"\n        total_ipv4_address_count: \"{{ total_ipv4_address_count }}\"\n        zone: \"{{ zone }}\"\n      register: subnet\n", "path": "examples/multiple-vm-ssh/create.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: Create IBM Cloud VPC VSI\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n    - name: Fetch the variables from var file\n      include_vars:\n        file: vars.yml\n\n    - name: Checking for existing VPC\n      ibm_is_vpc_info:\n        name: \"{{ vpc_name }}\"\n      failed_when:\n        - vpc.rc != 0\n        - '\"No VPC found\" not in vpc.stderr'\n      register: vpc\n\n    - name: Configure VPC\n      ibm_is_vpc:\n        name: \"{{ vpc_name }}\"\n        state: available\n        id: \"{{ vpc.resource.id | default(omit) }}\"\n      register: vpc\n\n    - name: Checking for existing VPC Subnet\n      ibm_is_subnet_info:\n        name: \"{{ subnet_name }}\"\n      failed_when:\n        - subnet.rc != 0\n        - '\"No subnet found\" not in subnet.stderr'\n      register: subnet\n\n    - name: Configure VPC Subnet\n      ibm_is_subnet:\n        name: \"{{ subnet_name }}\"\n        state: available\n        id: \"{{ subnet.id | default(omit) }}\"\n        vpc: \"{{ vpc.resource.id }}\"\n        total_ipv4_address_count: \"{{ total_ipv4_address_count }}\"\n        zone: \"{{ zone }}\"\n      register: subnet\n\n    - name: Checking for existing SSH key", "license": "", "module": "ibm_is_ssh_key_info", "output": "      ibm_is_ssh_key_info:\n        name: \"{{ ssh_key_name }}\"\n      failed_when:\n        - ssh_key.rc != 0\n        - '\"No SSH Key found\" not in ssh_key.stderr'\n      register: ssh_key\n", "path": "examples/multiple-vm-ssh/create.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: Create IBM Cloud VPC VSI\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n    - name: Fetch the variables from var file\n      include_vars:\n        file: vars.yml\n\n    - name: Checking for existing VPC\n      ibm_is_vpc_info:\n        name: \"{{ vpc_name }}\"\n      failed_when:\n        - vpc.rc != 0\n        - '\"No VPC found\" not in vpc.stderr'\n      register: vpc\n\n    - name: Configure VPC\n      ibm_is_vpc:\n        name: \"{{ vpc_name }}\"\n        state: available\n        id: \"{{ vpc.resource.id | default(omit) }}\"\n      register: vpc\n\n    - name: Checking for existing VPC Subnet\n      ibm_is_subnet_info:\n        name: \"{{ subnet_name }}\"\n      failed_when:\n        - subnet.rc != 0\n        - '\"No subnet found\" not in subnet.stderr'\n      register: subnet\n\n    - name: Configure VPC Subnet\n      ibm_is_subnet:\n        name: \"{{ subnet_name }}\"\n        state: available\n        id: \"{{ subnet.id | default(omit) }}\"\n        vpc: \"{{ vpc.resource.id }}\"\n        total_ipv4_address_count: \"{{ total_ipv4_address_count }}\"\n        zone: \"{{ zone }}\"\n      register: subnet\n\n    - name: Checking for existing SSH key\n      ibm_is_ssh_key_info:\n        name: \"{{ ssh_key_name }}\"\n      failed_when:\n        - ssh_key.rc != 0\n        - '\"No SSH Key found\" not in ssh_key.stderr'\n      register: ssh_key\n\n    - name: Configure SSH Key", "license": "", "module": "ibm_is_ssh_key", "output": "      ibm_is_ssh_key:\n        name: \"{{ ssh_key_name }}\"\n        public_key: \"{{ ssh_public_key.split()[:2]|join(' ') }}\"\n        id: \"{{ ssh_key.resource.id | default(omit) }}\"\n      register: ssh_key\n", "path": "examples/multiple-vm-ssh/create.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: Create IBM Cloud VPC VSI\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n    - name: Fetch the variables from var file\n      include_vars:\n        file: vars.yml\n\n    - name: Checking for existing VPC\n      ibm_is_vpc_info:\n        name: \"{{ vpc_name }}\"\n      failed_when:\n        - vpc.rc != 0\n        - '\"No VPC found\" not in vpc.stderr'\n      register: vpc\n\n    - name: Configure VPC\n      ibm_is_vpc:\n        name: \"{{ vpc_name }}\"\n        state: available\n        id: \"{{ vpc.resource.id | default(omit) }}\"\n      register: vpc\n\n    - name: Checking for existing VPC Subnet\n      ibm_is_subnet_info:\n        name: \"{{ subnet_name }}\"\n      failed_when:\n        - subnet.rc != 0\n        - '\"No subnet found\" not in subnet.stderr'\n      register: subnet\n\n    - name: Configure VPC Subnet\n      ibm_is_subnet:\n        name: \"{{ subnet_name }}\"\n        state: available\n        id: \"{{ subnet.id | default(omit) }}\"\n        vpc: \"{{ vpc.resource.id }}\"\n        total_ipv4_address_count: \"{{ total_ipv4_address_count }}\"\n        zone: \"{{ zone }}\"\n      register: subnet\n\n    - name: Checking for existing SSH key\n      ibm_is_ssh_key_info:\n        name: \"{{ ssh_key_name }}\"\n      failed_when:\n        - ssh_key.rc != 0\n        - '\"No SSH Key found\" not in ssh_key.stderr'\n      register: ssh_key\n\n    - name: Configure SSH Key\n      ibm_is_ssh_key:\n        name: \"{{ ssh_key_name }}\"\n        public_key: \"{{ ssh_public_key.split()[:2]|join(' ') }}\"\n        id: \"{{ ssh_key.resource.id | default(omit) }}\"\n      register: ssh_key\n\n    - name: Retrieve image list", "license": "", "module": "ibm_is_images_info", "output": "      ibm_is_images_info:\n      register: images_list\n", "path": "examples/multiple-vm-ssh/create.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: Create IBM Cloud VPC VSI\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n    - name: Fetch the variables from var file\n      include_vars:\n        file: vars.yml\n\n    - name: Checking for existing VPC\n      ibm_is_vpc_info:\n        name: \"{{ vpc_name }}\"\n      failed_when:\n        - vpc.rc != 0\n        - '\"No VPC found\" not in vpc.stderr'\n      register: vpc\n\n    - name: Configure VPC\n      ibm_is_vpc:\n        name: \"{{ vpc_name }}\"\n        state: available\n        id: \"{{ vpc.resource.id | default(omit) }}\"\n      register: vpc\n\n    - name: Checking for existing VPC Subnet\n      ibm_is_subnet_info:\n        name: \"{{ subnet_name }}\"\n      failed_when:\n        - subnet.rc != 0\n        - '\"No subnet found\" not in subnet.stderr'\n      register: subnet\n\n    - name: Configure VPC Subnet\n      ibm_is_subnet:\n        name: \"{{ subnet_name }}\"\n        state: available\n        id: \"{{ subnet.id | default(omit) }}\"\n        vpc: \"{{ vpc.resource.id }}\"\n        total_ipv4_address_count: \"{{ total_ipv4_address_count }}\"\n        zone: \"{{ zone }}\"\n      register: subnet\n\n    - name: Checking for existing SSH key\n      ibm_is_ssh_key_info:\n        name: \"{{ ssh_key_name }}\"\n      failed_when:\n        - ssh_key.rc != 0\n        - '\"No SSH Key found\" not in ssh_key.stderr'\n      register: ssh_key\n\n    - name: Configure SSH Key\n      ibm_is_ssh_key:\n        name: \"{{ ssh_key_name }}\"\n        public_key: \"{{ ssh_public_key.split()[:2]|join(' ') }}\"\n        id: \"{{ ssh_key.resource.id | default(omit) }}\"\n      register: ssh_key\n\n    - name: Retrieve image list\n      ibm_is_images_info:\n      register: images_list\n\n    - name: Set VM image name/id dictionary fact", "license": "", "module": "set_fact", "output": "      set_fact:\n        image_dict: \"{{ images_list.resource.images |\n                        items2dict(key_name='name', value_name='id') }}\"\n", "path": "examples/multiple-vm-ssh/create.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: Create IBM Cloud VPC VSI\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n    - name: Fetch the variables from var file\n      include_vars:\n        file: vars.yml\n\n    - name: Checking for existing VPC\n      ibm_is_vpc_info:\n        name: \"{{ vpc_name }}\"\n      failed_when:\n        - vpc.rc != 0\n        - '\"No VPC found\" not in vpc.stderr'\n      register: vpc\n\n    - name: Configure VPC\n      ibm_is_vpc:\n        name: \"{{ vpc_name }}\"\n        state: available\n        id: \"{{ vpc.resource.id | default(omit) }}\"\n      register: vpc\n\n    - name: Checking for existing VPC Subnet\n      ibm_is_subnet_info:\n        name: \"{{ subnet_name }}\"\n      failed_when:\n        - subnet.rc != 0\n        - '\"No subnet found\" not in subnet.stderr'\n      register: subnet\n\n    - name: Configure VPC Subnet\n      ibm_is_subnet:\n        name: \"{{ subnet_name }}\"\n        state: available\n        id: \"{{ subnet.id | default(omit) }}\"\n        vpc: \"{{ vpc.resource.id }}\"\n        total_ipv4_address_count: \"{{ total_ipv4_address_count }}\"\n        zone: \"{{ zone }}\"\n      register: subnet\n\n    - name: Checking for existing SSH key\n      ibm_is_ssh_key_info:\n        name: \"{{ ssh_key_name }}\"\n      failed_when:\n        - ssh_key.rc != 0\n        - '\"No SSH Key found\" not in ssh_key.stderr'\n      register: ssh_key\n\n    - name: Configure SSH Key\n      ibm_is_ssh_key:\n        name: \"{{ ssh_key_name }}\"\n        public_key: \"{{ ssh_public_key.split()[:2]|join(' ') }}\"\n        id: \"{{ ssh_key.resource.id | default(omit) }}\"\n      register: ssh_key\n\n    - name: Retrieve image list\n      ibm_is_images_info:\n      register: images_list\n\n    - name: Set VM image name/id dictionary fact\n      set_fact:\n        image_dict: \"{{ images_list.resource.images |\n                        items2dict(key_name='name', value_name='id') }}\"\n\n    - name: Check for existing VSIs", "license": "", "module": "ibm_is_instance_info", "output": "      ibm_is_instance_info:\n        name: \"{{ vsi_name }}-{{ ansible_loop.index}}\"\n      failed_when:\n        - vsi_list.rc != 0\n        - '\"No Instance found\" not in vsi_list.stderr'\n      register: vsi_list\n      loop: \"{{ range(vsi_count)|list }}\"\n      loop_control:\n        extended: yes\n", "path": "examples/multiple-vm-ssh/create.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: Create IBM Cloud VPC VSI\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n    - name: Fetch the variables from var file\n      include_vars:\n        file: vars.yml\n\n    - name: Checking for existing VPC\n      ibm_is_vpc_info:\n        name: \"{{ vpc_name }}\"\n      failed_when:\n        - vpc.rc != 0\n        - '\"No VPC found\" not in vpc.stderr'\n      register: vpc\n\n    - name: Configure VPC\n      ibm_is_vpc:\n        name: \"{{ vpc_name }}\"\n        state: available\n        id: \"{{ vpc.resource.id | default(omit) }}\"\n      register: vpc\n\n    - name: Checking for existing VPC Subnet\n      ibm_is_subnet_info:\n        name: \"{{ subnet_name }}\"\n      failed_when:\n        - subnet.rc != 0\n        - '\"No subnet found\" not in subnet.stderr'\n      register: subnet\n\n    - name: Configure VPC Subnet\n      ibm_is_subnet:\n        name: \"{{ subnet_name }}\"\n        state: available\n        id: \"{{ subnet.id | default(omit) }}\"\n        vpc: \"{{ vpc.resource.id }}\"\n        total_ipv4_address_count: \"{{ total_ipv4_address_count }}\"\n        zone: \"{{ zone }}\"\n      register: subnet\n\n    - name: Checking for existing SSH key\n      ibm_is_ssh_key_info:\n        name: \"{{ ssh_key_name }}\"\n      failed_when:\n        - ssh_key.rc != 0\n        - '\"No SSH Key found\" not in ssh_key.stderr'\n      register: ssh_key\n\n    - name: Configure SSH Key\n      ibm_is_ssh_key:\n        name: \"{{ ssh_key_name }}\"\n        public_key: \"{{ ssh_public_key.split()[:2]|join(' ') }}\"\n        id: \"{{ ssh_key.resource.id | default(omit) }}\"\n      register: ssh_key\n\n    - name: Retrieve image list\n      ibm_is_images_info:\n      register: images_list\n\n    - name: Set VM image name/id dictionary fact\n      set_fact:\n        image_dict: \"{{ images_list.resource.images |\n                        items2dict(key_name='name', value_name='id') }}\"\n\n    - name: Check for existing VSIs\n      ibm_is_instance_info:\n        name: \"{{ vsi_name }}-{{ ansible_loop.index}}\"\n      failed_when:\n        - vsi_list.rc != 0\n        - '\"No Instance found\" not in vsi_list.stderr'\n      register: vsi_list\n      loop: \"{{ range(vsi_count)|list }}\"\n      loop_control:\n        extended: yes\n\n    - name: Configure VSIs", "license": "", "module": "ibm_is_instance", "output": "      ibm_is_instance:\n        name: \"{{ vsi_name }}-{{ ansible_loop.index}}\"\n        state: available\n        id: \"{{ item.resource.id | default(omit) }}\"\n        vpc: \"{{ vpc.resource.id }}\"\n        profile: \"{{ vsi_profile }}\"\n        image: \"{{ image_dict[vsi_image] }}\"\n        keys:\n         - \"{{ ssh_key.resource.id }}\"\n        primary_network_interface:\n         - subnet: \"{{ subnet.resource.id }}\"\n        zone: \"{{ zone }}\"\n      register: vsi_list\n      loop: \"{{ vsi_list.results }}\"\n      loop_control:\n        extended: yes\n", "path": "examples/multiple-vm-ssh/create.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: Create IBM Cloud VPC VSI\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n    - name: Fetch the variables from var file\n      include_vars:\n        file: vars.yml\n\n    - name: Checking for existing VPC\n      ibm_is_vpc_info:\n        name: \"{{ vpc_name }}\"\n      failed_when:\n        - vpc.rc != 0\n        - '\"No VPC found\" not in vpc.stderr'\n      register: vpc\n\n    - name: Configure VPC\n      ibm_is_vpc:\n        name: \"{{ vpc_name }}\"\n        state: available\n        id: \"{{ vpc.resource.id | default(omit) }}\"\n      register: vpc\n\n    - name: Checking for existing VPC Subnet\n      ibm_is_subnet_info:\n        name: \"{{ subnet_name }}\"\n      failed_when:\n        - subnet.rc != 0\n        - '\"No subnet found\" not in subnet.stderr'\n      register: subnet\n\n    - name: Configure VPC Subnet\n      ibm_is_subnet:\n        name: \"{{ subnet_name }}\"\n        state: available\n        id: \"{{ subnet.id | default(omit) }}\"\n        vpc: \"{{ vpc.resource.id }}\"\n        total_ipv4_address_count: \"{{ total_ipv4_address_count }}\"\n        zone: \"{{ zone }}\"\n      register: subnet\n\n    - name: Checking for existing SSH key\n      ibm_is_ssh_key_info:\n        name: \"{{ ssh_key_name }}\"\n      failed_when:\n        - ssh_key.rc != 0\n        - '\"No SSH Key found\" not in ssh_key.stderr'\n      register: ssh_key\n\n    - name: Configure SSH Key\n      ibm_is_ssh_key:\n        name: \"{{ ssh_key_name }}\"\n        public_key: \"{{ ssh_public_key.split()[:2]|join(' ') }}\"\n        id: \"{{ ssh_key.resource.id | default(omit) }}\"\n      register: ssh_key\n\n    - name: Retrieve image list\n      ibm_is_images_info:\n      register: images_list\n\n    - name: Set VM image name/id dictionary fact\n      set_fact:\n        image_dict: \"{{ images_list.resource.images |\n                        items2dict(key_name='name', value_name='id') }}\"\n\n    - name: Check for existing VSIs\n      ibm_is_instance_info:\n        name: \"{{ vsi_name }}-{{ ansible_loop.index}}\"\n      failed_when:\n        - vsi_list.rc != 0\n        - '\"No Instance found\" not in vsi_list.stderr'\n      register: vsi_list\n      loop: \"{{ range(vsi_count)|list }}\"\n      loop_control:\n        extended: yes\n\n    - name: Configure VSIs\n      ibm_is_instance:\n        name: \"{{ vsi_name }}-{{ ansible_loop.index}}\"\n        state: available\n        id: \"{{ item.resource.id | default(omit) }}\"\n        vpc: \"{{ vpc.resource.id }}\"\n        profile: \"{{ vsi_profile }}\"\n        image: \"{{ image_dict[vsi_image] }}\"\n        keys:\n         - \"{{ ssh_key.resource.id }}\"\n        primary_network_interface:\n         - subnet: \"{{ subnet.resource.id }}\"\n        zone: \"{{ zone }}\"\n      register: vsi_list\n      loop: \"{{ vsi_list.results }}\"\n      loop_control:\n        extended: yes\n\n    - name: Check for existing Floating IP Addresses", "license": "", "module": "ibm_is_floating_ip_info", "output": "      ibm_is_floating_ip_info:\n        name: \"{{ fip_name }}-{{ ansible_loop.index}}\"\n      failed_when:\n        - fip_list.rc != 0\n        - '\"No floatingIP found\" not in fip_list.stderr'\n      register: fip_list\n      loop: \"{{ range(vsi_count)|list }}\"\n      loop_control:\n        extended: yes\n", "path": "examples/multiple-vm-ssh/create.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: Create IBM Cloud VPC VSI\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n    - name: Fetch the variables from var file\n      include_vars:\n        file: vars.yml\n\n    - name: Checking for existing VPC\n      ibm_is_vpc_info:\n        name: \"{{ vpc_name }}\"\n      failed_when:\n        - vpc.rc != 0\n        - '\"No VPC found\" not in vpc.stderr'\n      register: vpc\n\n    - name: Configure VPC\n      ibm_is_vpc:\n        name: \"{{ vpc_name }}\"\n        state: available\n        id: \"{{ vpc.resource.id | default(omit) }}\"\n      register: vpc\n\n    - name: Checking for existing VPC Subnet\n      ibm_is_subnet_info:\n        name: \"{{ subnet_name }}\"\n      failed_when:\n        - subnet.rc != 0\n        - '\"No subnet found\" not in subnet.stderr'\n      register: subnet\n\n    - name: Configure VPC Subnet\n      ibm_is_subnet:\n        name: \"{{ subnet_name }}\"\n        state: available\n        id: \"{{ subnet.id | default(omit) }}\"\n        vpc: \"{{ vpc.resource.id }}\"\n        total_ipv4_address_count: \"{{ total_ipv4_address_count }}\"\n        zone: \"{{ zone }}\"\n      register: subnet\n\n    - name: Checking for existing SSH key\n      ibm_is_ssh_key_info:\n        name: \"{{ ssh_key_name }}\"\n      failed_when:\n        - ssh_key.rc != 0\n        - '\"No SSH Key found\" not in ssh_key.stderr'\n      register: ssh_key\n\n    - name: Configure SSH Key\n      ibm_is_ssh_key:\n        name: \"{{ ssh_key_name }}\"\n        public_key: \"{{ ssh_public_key.split()[:2]|join(' ') }}\"\n        id: \"{{ ssh_key.resource.id | default(omit) }}\"\n      register: ssh_key\n\n    - name: Retrieve image list\n      ibm_is_images_info:\n      register: images_list\n\n    - name: Set VM image name/id dictionary fact\n      set_fact:\n        image_dict: \"{{ images_list.resource.images |\n                        items2dict(key_name='name', value_name='id') }}\"\n\n    - name: Check for existing VSIs\n      ibm_is_instance_info:\n        name: \"{{ vsi_name }}-{{ ansible_loop.index}}\"\n      failed_when:\n        - vsi_list.rc != 0\n        - '\"No Instance found\" not in vsi_list.stderr'\n      register: vsi_list\n      loop: \"{{ range(vsi_count)|list }}\"\n      loop_control:\n        extended: yes\n\n    - name: Configure VSIs\n      ibm_is_instance:\n        name: \"{{ vsi_name }}-{{ ansible_loop.index}}\"\n        state: available\n        id: \"{{ item.resource.id | default(omit) }}\"\n        vpc: \"{{ vpc.resource.id }}\"\n        profile: \"{{ vsi_profile }}\"\n        image: \"{{ image_dict[vsi_image] }}\"\n        keys:\n         - \"{{ ssh_key.resource.id }}\"\n        primary_network_interface:\n         - subnet: \"{{ subnet.resource.id }}\"\n        zone: \"{{ zone }}\"\n      register: vsi_list\n      loop: \"{{ vsi_list.results }}\"\n      loop_control:\n        extended: yes\n\n    - name: Check for existing Floating IP Addresses\n      ibm_is_floating_ip_info:\n        name: \"{{ fip_name }}-{{ ansible_loop.index}}\"\n      failed_when:\n        - fip_list.rc != 0\n        - '\"No floatingIP found\" not in fip_list.stderr'\n      register: fip_list\n      loop: \"{{ range(vsi_count)|list }}\"\n      loop_control:\n        extended: yes\n\n    - name: Configure Floating IP Addresses", "license": "", "module": "ibm_is_floating_ip", "output": "      ibm_is_floating_ip:\n        name: \"{{ fip_name }}-{{ ansible_loop.index}}\"\n        state: available\n        id: \"{{ fip_list[ansible_loop.index0].resource.id | default(omit) }}\"\n        target: \"{{ item.resource.primary_network_interface[0]['id'] }}\"\n      register: fip_list\n      loop: \"{{ vsi_list.results }}\"\n      loop_control:\n        extended: yes\n", "path": "examples/multiple-vm-ssh/create.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: Create IBM Cloud VPC VSI\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n    - name: Fetch the variables from var file\n      include_vars:\n        file: vars.yml\n\n    - name: Checking for existing VPC\n      ibm_is_vpc_info:\n        name: \"{{ vpc_name }}\"\n      failed_when:\n        - vpc.rc != 0\n        - '\"No VPC found\" not in vpc.stderr'\n      register: vpc\n\n    - name: Configure VPC\n      ibm_is_vpc:\n        name: \"{{ vpc_name }}\"\n        state: available\n        id: \"{{ vpc.resource.id | default(omit) }}\"\n      register: vpc\n\n    - name: Checking for existing VPC Subnet\n      ibm_is_subnet_info:\n        name: \"{{ subnet_name }}\"\n      failed_when:\n        - subnet.rc != 0\n        - '\"No subnet found\" not in subnet.stderr'\n      register: subnet\n\n    - name: Configure VPC Subnet\n      ibm_is_subnet:\n        name: \"{{ subnet_name }}\"\n        state: available\n        id: \"{{ subnet.id | default(omit) }}\"\n        vpc: \"{{ vpc.resource.id }}\"\n        total_ipv4_address_count: \"{{ total_ipv4_address_count }}\"\n        zone: \"{{ zone }}\"\n      register: subnet\n\n    - name: Checking for existing SSH key\n      ibm_is_ssh_key_info:\n        name: \"{{ ssh_key_name }}\"\n      failed_when:\n        - ssh_key.rc != 0\n        - '\"No SSH Key found\" not in ssh_key.stderr'\n      register: ssh_key\n\n    - name: Configure SSH Key\n      ibm_is_ssh_key:\n        name: \"{{ ssh_key_name }}\"\n        public_key: \"{{ ssh_public_key.split()[:2]|join(' ') }}\"\n        id: \"{{ ssh_key.resource.id | default(omit) }}\"\n      register: ssh_key\n\n    - name: Retrieve image list\n      ibm_is_images_info:\n      register: images_list\n\n    - name: Set VM image name/id dictionary fact\n      set_fact:\n        image_dict: \"{{ images_list.resource.images |\n                        items2dict(key_name='name', value_name='id') }}\"\n\n    - name: Check for existing VSIs\n      ibm_is_instance_info:\n        name: \"{{ vsi_name }}-{{ ansible_loop.index}}\"\n      failed_when:\n        - vsi_list.rc != 0\n        - '\"No Instance found\" not in vsi_list.stderr'\n      register: vsi_list\n      loop: \"{{ range(vsi_count)|list }}\"\n      loop_control:\n        extended: yes\n\n    - name: Configure VSIs\n      ibm_is_instance:\n        name: \"{{ vsi_name }}-{{ ansible_loop.index}}\"\n        state: available\n        id: \"{{ item.resource.id | default(omit) }}\"\n        vpc: \"{{ vpc.resource.id }}\"\n        profile: \"{{ vsi_profile }}\"\n        image: \"{{ image_dict[vsi_image] }}\"\n        keys:\n         - \"{{ ssh_key.resource.id }}\"\n        primary_network_interface:\n         - subnet: \"{{ subnet.resource.id }}\"\n        zone: \"{{ zone }}\"\n      register: vsi_list\n      loop: \"{{ vsi_list.results }}\"\n      loop_control:\n        extended: yes\n\n    - name: Check for existing Floating IP Addresses\n      ibm_is_floating_ip_info:\n        name: \"{{ fip_name }}-{{ ansible_loop.index}}\"\n      failed_when:\n        - fip_list.rc != 0\n        - '\"No floatingIP found\" not in fip_list.stderr'\n      register: fip_list\n      loop: \"{{ range(vsi_count)|list }}\"\n      loop_control:\n        extended: yes\n\n    - name: Configure Floating IP Addresses\n      ibm_is_floating_ip:\n        name: \"{{ fip_name }}-{{ ansible_loop.index}}\"\n        state: available\n        id: \"{{ fip_list[ansible_loop.index0].resource.id | default(omit) }}\"\n        target: \"{{ item.resource.primary_network_interface[0]['id'] }}\"\n      register: fip_list\n      loop: \"{{ vsi_list.results }}\"\n      loop_control:\n        extended: yes\n\n    - name: Configure Security Group Rule to open SSH on the VSI", "license": "", "module": "ibm_is_security_group_rule", "output": "      ibm_is_security_group_rule:\n        state: available\n        group: \"{{ vpc.resource.default_security_group }}\"\n        direction: inbound\n        remote: 0.0.0.0/0\n        tcp:\n          - port_max: 22\n            port_min: 22\n", "path": "examples/multiple-vm-ssh/create.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: Create IBM Cloud VPC VSI\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n    - name: Fetch the variables from var file\n      include_vars:\n        file: vars.yml\n\n    - name: Checking for existing VPC\n      ibm_is_vpc_info:\n        name: \"{{ vpc_name }}\"\n      failed_when:\n        - vpc.rc != 0\n        - '\"No VPC found\" not in vpc.stderr'\n      register: vpc\n\n    - name: Configure VPC\n      ibm_is_vpc:\n        name: \"{{ vpc_name }}\"\n        state: available\n        id: \"{{ vpc.resource.id | default(omit) }}\"\n      register: vpc\n\n    - name: Checking for existing VPC Subnet\n      ibm_is_subnet_info:\n        name: \"{{ subnet_name }}\"\n      failed_when:\n        - subnet.rc != 0\n        - '\"No subnet found\" not in subnet.stderr'\n      register: subnet\n\n    - name: Configure VPC Subnet\n      ibm_is_subnet:\n        name: \"{{ subnet_name }}\"\n        state: available\n        id: \"{{ subnet.id | default(omit) }}\"\n        vpc: \"{{ vpc.resource.id }}\"\n        total_ipv4_address_count: \"{{ total_ipv4_address_count }}\"\n        zone: \"{{ zone }}\"\n      register: subnet\n\n    - name: Checking for existing SSH key\n      ibm_is_ssh_key_info:\n        name: \"{{ ssh_key_name }}\"\n      failed_when:\n        - ssh_key.rc != 0\n        - '\"No SSH Key found\" not in ssh_key.stderr'\n      register: ssh_key\n\n    - name: Configure SSH Key\n      ibm_is_ssh_key:\n        name: \"{{ ssh_key_name }}\"\n        public_key: \"{{ ssh_public_key.split()[:2]|join(' ') }}\"\n        id: \"{{ ssh_key.resource.id | default(omit) }}\"\n      register: ssh_key\n\n    - name: Retrieve image list\n      ibm_is_images_info:\n      register: images_list\n\n    - name: Set VM image name/id dictionary fact\n      set_fact:\n        image_dict: \"{{ images_list.resource.images |\n                        items2dict(key_name='name', value_name='id') }}\"\n\n    - name: Check for existing VSIs\n      ibm_is_instance_info:\n        name: \"{{ vsi_name }}-{{ ansible_loop.index}}\"\n      failed_when:\n        - vsi_list.rc != 0\n        - '\"No Instance found\" not in vsi_list.stderr'\n      register: vsi_list\n      loop: \"{{ range(vsi_count)|list }}\"\n      loop_control:\n        extended: yes\n\n    - name: Configure VSIs\n      ibm_is_instance:\n        name: \"{{ vsi_name }}-{{ ansible_loop.index}}\"\n        state: available\n        id: \"{{ item.resource.id | default(omit) }}\"\n        vpc: \"{{ vpc.resource.id }}\"\n        profile: \"{{ vsi_profile }}\"\n        image: \"{{ image_dict[vsi_image] }}\"\n        keys:\n         - \"{{ ssh_key.resource.id }}\"\n        primary_network_interface:\n         - subnet: \"{{ subnet.resource.id }}\"\n        zone: \"{{ zone }}\"\n      register: vsi_list\n      loop: \"{{ vsi_list.results }}\"\n      loop_control:\n        extended: yes\n\n    - name: Check for existing Floating IP Addresses\n      ibm_is_floating_ip_info:\n        name: \"{{ fip_name }}-{{ ansible_loop.index}}\"\n      failed_when:\n        - fip_list.rc != 0\n        - '\"No floatingIP found\" not in fip_list.stderr'\n      register: fip_list\n      loop: \"{{ range(vsi_count)|list }}\"\n      loop_control:\n        extended: yes\n\n    - name: Configure Floating IP Addresses\n      ibm_is_floating_ip:\n        name: \"{{ fip_name }}-{{ ansible_loop.index}}\"\n        state: available\n        id: \"{{ fip_list[ansible_loop.index0].resource.id | default(omit) }}\"\n        target: \"{{ item.resource.primary_network_interface[0]['id'] }}\"\n      register: fip_list\n      loop: \"{{ vsi_list.results }}\"\n      loop_control:\n        extended: yes\n\n    - name: Configure Security Group Rule to open SSH on the VSI\n      ibm_is_security_group_rule:\n        state: available\n        group: \"{{ vpc.resource.default_security_group }}\"\n        direction: inbound\n        remote: 0.0.0.0/0\n        tcp:\n          - port_max: 22\n            port_min: 22\n\n    - name: Add VSI to Ansible inventory", "license": "", "module": "add_host", "output": "      add_host:\n        name: \"{{ item.resource.address }}\"\n        ansible_user: root\n        groups: new_vsi\n        ansible_ssh_extra_args: -o StrictHostKeyChecking=no\n      loop: \"{{ fip_list.results }}\"\n", "path": "examples/multiple-vm-ssh/create.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: Create IBM Cloud VPC VSI\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n    - name: Fetch the variables from var file\n      include_vars:\n        file: vars.yml\n\n    - name: Checking for existing VPC\n      ibm_is_vpc_info:\n        name: \"{{ vpc_name }}\"\n      failed_when:\n        - vpc.rc != 0\n        - '\"No VPC found\" not in vpc.stderr'\n      register: vpc\n\n    - name: Configure VPC\n      ibm_is_vpc:\n        name: \"{{ vpc_name }}\"\n        state: available\n        id: \"{{ vpc.resource.id | default(omit) }}\"\n      register: vpc\n\n    - name: Checking for existing VPC Subnet\n      ibm_is_subnet_info:\n        name: \"{{ subnet_name }}\"\n      failed_when:\n        - subnet.rc != 0\n        - '\"No subnet found\" not in subnet.stderr'\n      register: subnet\n\n    - name: Configure VPC Subnet\n      ibm_is_subnet:\n        name: \"{{ subnet_name }}\"\n        state: available\n        id: \"{{ subnet.id | default(omit) }}\"\n        vpc: \"{{ vpc.resource.id }}\"\n        total_ipv4_address_count: \"{{ total_ipv4_address_count }}\"\n        zone: \"{{ zone }}\"\n      register: subnet\n\n    - name: Checking for existing SSH key\n      ibm_is_ssh_key_info:\n        name: \"{{ ssh_key_name }}\"\n      failed_when:\n        - ssh_key.rc != 0\n        - '\"No SSH Key found\" not in ssh_key.stderr'\n      register: ssh_key\n\n    - name: Configure SSH Key\n      ibm_is_ssh_key:\n        name: \"{{ ssh_key_name }}\"\n        public_key: \"{{ ssh_public_key.split()[:2]|join(' ') }}\"\n        id: \"{{ ssh_key.resource.id | default(omit) }}\"\n      register: ssh_key\n\n    - name: Retrieve image list\n      ibm_is_images_info:\n      register: images_list\n\n    - name: Set VM image name/id dictionary fact\n      set_fact:\n        image_dict: \"{{ images_list.resource.images |\n                        items2dict(key_name='name', value_name='id') }}\"\n\n    - name: Check for existing VSIs\n      ibm_is_instance_info:\n        name: \"{{ vsi_name }}-{{ ansible_loop.index}}\"\n      failed_when:\n        - vsi_list.rc != 0\n        - '\"No Instance found\" not in vsi_list.stderr'\n      register: vsi_list\n      loop: \"{{ range(vsi_count)|list }}\"\n      loop_control:\n        extended: yes\n\n    - name: Configure VSIs\n      ibm_is_instance:\n        name: \"{{ vsi_name }}-{{ ansible_loop.index}}\"\n        state: available\n        id: \"{{ item.resource.id | default(omit) }}\"\n        vpc: \"{{ vpc.resource.id }}\"\n        profile: \"{{ vsi_profile }}\"\n        image: \"{{ image_dict[vsi_image] }}\"\n        keys:\n         - \"{{ ssh_key.resource.id }}\"\n        primary_network_interface:\n         - subnet: \"{{ subnet.resource.id }}\"\n        zone: \"{{ zone }}\"\n      register: vsi_list\n      loop: \"{{ vsi_list.results }}\"\n      loop_control:\n        extended: yes\n\n    - name: Check for existing Floating IP Addresses\n      ibm_is_floating_ip_info:\n        name: \"{{ fip_name }}-{{ ansible_loop.index}}\"\n      failed_when:\n        - fip_list.rc != 0\n        - '\"No floatingIP found\" not in fip_list.stderr'\n      register: fip_list\n      loop: \"{{ range(vsi_count)|list }}\"\n      loop_control:\n        extended: yes\n\n    - name: Configure Floating IP Addresses\n      ibm_is_floating_ip:\n        name: \"{{ fip_name }}-{{ ansible_loop.index}}\"\n        state: available\n        id: \"{{ fip_list[ansible_loop.index0].resource.id | default(omit) }}\"\n        target: \"{{ item.resource.primary_network_interface[0]['id'] }}\"\n      register: fip_list\n      loop: \"{{ vsi_list.results }}\"\n      loop_control:\n        extended: yes\n\n    - name: Configure Security Group Rule to open SSH on the VSI\n      ibm_is_security_group_rule:\n        state: available\n        group: \"{{ vpc.resource.default_security_group }}\"\n        direction: inbound\n        remote: 0.0.0.0/0\n        tcp:\n          - port_max: 22\n            port_min: 22\n\n    - name: Add VSI to Ansible inventory\n      add_host:\n        name: \"{{ item.resource.address }}\"\n        ansible_user: root\n        groups: new_vsi\n        ansible_ssh_extra_args: -o StrictHostKeyChecking=no\n      loop: \"{{ fip_list.results }}\"\n\n- name: Check Ansible connection to new DEMO VSI\n  hosts: new_vsi\n  gather_facts: False\n  tasks:\n    - name: Wait for VSI to become reachable over SSH", "license": "", "module": "wait_for_connection", "output": "      wait_for_connection:\n", "path": "examples/multiple-vm-ssh/create.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: Create IBM Cloud VPC VSI\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n    - name: Fetch the variables from var file\n      include_vars:\n        file: vars.yml\n\n    - name: Checking for existing VPC\n      ibm_is_vpc_info:\n        name: \"{{ vpc_name }}\"\n      failed_when:\n        - vpc.rc != 0\n        - '\"No VPC found\" not in vpc.stderr'\n      register: vpc\n\n    - name: Configure VPC\n      ibm_is_vpc:\n        name: \"{{ vpc_name }}\"\n        state: available\n        id: \"{{ vpc.resource.id | default(omit) }}\"\n      register: vpc\n\n    - name: Checking for existing VPC Subnet\n      ibm_is_subnet_info:\n        name: \"{{ subnet_name }}\"\n      failed_when:\n        - subnet.rc != 0\n        - '\"No subnet found\" not in subnet.stderr'\n      register: subnet\n\n    - name: Configure VPC Subnet\n      ibm_is_subnet:\n        name: \"{{ subnet_name }}\"\n        state: available\n        id: \"{{ subnet.id | default(omit) }}\"\n        vpc: \"{{ vpc.resource.id }}\"\n        total_ipv4_address_count: \"{{ total_ipv4_address_count }}\"\n        zone: \"{{ zone }}\"\n      register: subnet\n\n    - name: Checking for existing SSH key\n      ibm_is_ssh_key_info:\n        name: \"{{ ssh_key_name }}\"\n      failed_when:\n        - ssh_key.rc != 0\n        - '\"No SSH Key found\" not in ssh_key.stderr'\n      register: ssh_key\n\n    - name: Configure SSH Key\n      ibm_is_ssh_key:\n        name: \"{{ ssh_key_name }}\"\n        public_key: \"{{ ssh_public_key.split()[:2]|join(' ') }}\"\n        id: \"{{ ssh_key.resource.id | default(omit) }}\"\n      register: ssh_key\n\n    - name: Retrieve image list\n      ibm_is_images_info:\n      register: images_list\n\n    - name: Set VM image name/id dictionary fact\n      set_fact:\n        image_dict: \"{{ images_list.resource.images |\n                        items2dict(key_name='name', value_name='id') }}\"\n\n    - name: Check for existing VSIs\n      ibm_is_instance_info:\n        name: \"{{ vsi_name }}-{{ ansible_loop.index}}\"\n      failed_when:\n        - vsi_list.rc != 0\n        - '\"No Instance found\" not in vsi_list.stderr'\n      register: vsi_list\n      loop: \"{{ range(vsi_count)|list }}\"\n      loop_control:\n        extended: yes\n\n    - name: Configure VSIs\n      ibm_is_instance:\n        name: \"{{ vsi_name }}-{{ ansible_loop.index}}\"\n        state: available\n        id: \"{{ item.resource.id | default(omit) }}\"\n        vpc: \"{{ vpc.resource.id }}\"\n        profile: \"{{ vsi_profile }}\"\n        image: \"{{ image_dict[vsi_image] }}\"\n        keys:\n         - \"{{ ssh_key.resource.id }}\"\n        primary_network_interface:\n         - subnet: \"{{ subnet.resource.id }}\"\n        zone: \"{{ zone }}\"\n      register: vsi_list\n      loop: \"{{ vsi_list.results }}\"\n      loop_control:\n        extended: yes\n\n    - name: Check for existing Floating IP Addresses\n      ibm_is_floating_ip_info:\n        name: \"{{ fip_name }}-{{ ansible_loop.index}}\"\n      failed_when:\n        - fip_list.rc != 0\n        - '\"No floatingIP found\" not in fip_list.stderr'\n      register: fip_list\n      loop: \"{{ range(vsi_count)|list }}\"\n      loop_control:\n        extended: yes\n\n    - name: Configure Floating IP Addresses\n      ibm_is_floating_ip:\n        name: \"{{ fip_name }}-{{ ansible_loop.index}}\"\n        state: available\n        id: \"{{ fip_list[ansible_loop.index0].resource.id | default(omit) }}\"\n        target: \"{{ item.resource.primary_network_interface[0]['id'] }}\"\n      register: fip_list\n      loop: \"{{ vsi_list.results }}\"\n      loop_control:\n        extended: yes\n\n    - name: Configure Security Group Rule to open SSH on the VSI\n      ibm_is_security_group_rule:\n        state: available\n        group: \"{{ vpc.resource.default_security_group }}\"\n        direction: inbound\n        remote: 0.0.0.0/0\n        tcp:\n          - port_max: 22\n            port_min: 22\n\n    - name: Add VSI to Ansible inventory\n      add_host:\n        name: \"{{ item.resource.address }}\"\n        ansible_user: root\n        groups: new_vsi\n        ansible_ssh_extra_args: -o StrictHostKeyChecking=no\n      loop: \"{{ fip_list.results }}\"\n\n- name: Check Ansible connection to new DEMO VSI\n  hosts: new_vsi\n  gather_facts: False\n  tasks:\n    - name: Wait for VSI to become reachable over SSH\n      wait_for_connection:\n\n- name: Check Ansible connection to new DEMO VSI\n  hosts: new_vsi\n  tasks:\n    - name: Collect OS information", "license": "", "module": "shell", "output": "      shell: hostname && cat /etc/os-release\n      register: os_info\n", "path": "examples/multiple-vm-ssh/create.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: Create IBM Cloud VPC VSI\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n    - name: Fetch the variables from var file\n      include_vars:\n        file: vars.yml\n\n    - name: Checking for existing VPC\n      ibm_is_vpc_info:\n        name: \"{{ vpc_name }}\"\n      failed_when:\n        - vpc.rc != 0\n        - '\"No VPC found\" not in vpc.stderr'\n      register: vpc\n\n    - name: Configure VPC\n      ibm_is_vpc:\n        name: \"{{ vpc_name }}\"\n        state: available\n        id: \"{{ vpc.resource.id | default(omit) }}\"\n      register: vpc\n\n    - name: Checking for existing VPC Subnet\n      ibm_is_subnet_info:\n        name: \"{{ subnet_name }}\"\n      failed_when:\n        - subnet.rc != 0\n        - '\"No subnet found\" not in subnet.stderr'\n      register: subnet\n\n    - name: Configure VPC Subnet\n      ibm_is_subnet:\n        name: \"{{ subnet_name }}\"\n        state: available\n        id: \"{{ subnet.id | default(omit) }}\"\n        vpc: \"{{ vpc.resource.id }}\"\n        total_ipv4_address_count: \"{{ total_ipv4_address_count }}\"\n        zone: \"{{ zone }}\"\n      register: subnet\n\n    - name: Checking for existing SSH key\n      ibm_is_ssh_key_info:\n        name: \"{{ ssh_key_name }}\"\n      failed_when:\n        - ssh_key.rc != 0\n        - '\"No SSH Key found\" not in ssh_key.stderr'\n      register: ssh_key\n\n    - name: Configure SSH Key\n      ibm_is_ssh_key:\n        name: \"{{ ssh_key_name }}\"\n        public_key: \"{{ ssh_public_key.split()[:2]|join(' ') }}\"\n        id: \"{{ ssh_key.resource.id | default(omit) }}\"\n      register: ssh_key\n\n    - name: Retrieve image list\n      ibm_is_images_info:\n      register: images_list\n\n    - name: Set VM image name/id dictionary fact\n      set_fact:\n        image_dict: \"{{ images_list.resource.images |\n                        items2dict(key_name='name', value_name='id') }}\"\n\n    - name: Check for existing VSIs\n      ibm_is_instance_info:\n        name: \"{{ vsi_name }}-{{ ansible_loop.index}}\"\n      failed_when:\n        - vsi_list.rc != 0\n        - '\"No Instance found\" not in vsi_list.stderr'\n      register: vsi_list\n      loop: \"{{ range(vsi_count)|list }}\"\n      loop_control:\n        extended: yes\n\n    - name: Configure VSIs\n      ibm_is_instance:\n        name: \"{{ vsi_name }}-{{ ansible_loop.index}}\"\n        state: available\n        id: \"{{ item.resource.id | default(omit) }}\"\n        vpc: \"{{ vpc.resource.id }}\"\n        profile: \"{{ vsi_profile }}\"\n        image: \"{{ image_dict[vsi_image] }}\"\n        keys:\n         - \"{{ ssh_key.resource.id }}\"\n        primary_network_interface:\n         - subnet: \"{{ subnet.resource.id }}\"\n        zone: \"{{ zone }}\"\n      register: vsi_list\n      loop: \"{{ vsi_list.results }}\"\n      loop_control:\n        extended: yes\n\n    - name: Check for existing Floating IP Addresses\n      ibm_is_floating_ip_info:\n        name: \"{{ fip_name }}-{{ ansible_loop.index}}\"\n      failed_when:\n        - fip_list.rc != 0\n        - '\"No floatingIP found\" not in fip_list.stderr'\n      register: fip_list\n      loop: \"{{ range(vsi_count)|list }}\"\n      loop_control:\n        extended: yes\n\n    - name: Configure Floating IP Addresses\n      ibm_is_floating_ip:\n        name: \"{{ fip_name }}-{{ ansible_loop.index}}\"\n        state: available\n        id: \"{{ fip_list[ansible_loop.index0].resource.id | default(omit) }}\"\n        target: \"{{ item.resource.primary_network_interface[0]['id'] }}\"\n      register: fip_list\n      loop: \"{{ vsi_list.results }}\"\n      loop_control:\n        extended: yes\n\n    - name: Configure Security Group Rule to open SSH on the VSI\n      ibm_is_security_group_rule:\n        state: available\n        group: \"{{ vpc.resource.default_security_group }}\"\n        direction: inbound\n        remote: 0.0.0.0/0\n        tcp:\n          - port_max: 22\n            port_min: 22\n\n    - name: Add VSI to Ansible inventory\n      add_host:\n        name: \"{{ item.resource.address }}\"\n        ansible_user: root\n        groups: new_vsi\n        ansible_ssh_extra_args: -o StrictHostKeyChecking=no\n      loop: \"{{ fip_list.results }}\"\n\n- name: Check Ansible connection to new DEMO VSI\n  hosts: new_vsi\n  gather_facts: False\n  tasks:\n    - name: Wait for VSI to become reachable over SSH\n      wait_for_connection:\n\n- name: Check Ansible connection to new DEMO VSI\n  hosts: new_vsi\n  tasks:\n    - name: Collect OS information\n      shell: hostname && cat /etc/os-release\n      register: os_info\n\n    - name: Print OS information", "license": "", "module": "debug", "output": "      debug:\n        var: os_info.stdout_lines", "path": "examples/multiple-vm-ssh/create.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: Destroy IBM Cloud VPC VSI\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n    - name: Fetch the variables from var file", "license": "", "module": "include_vars", "output": "      include_vars:\n        file: vars.yml\n", "path": "examples/multiple-vm-ssh/destroy.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: Destroy IBM Cloud VPC VSI\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n    - name: Fetch the variables from var file\n      include_vars:\n        file: vars.yml\n\n    - name: Check for existing Floating IPs", "license": "", "module": "ibm_is_floating_ip_info", "output": "      ibm_is_floating_ip_info:\n        name: \"{{ fip_name }}-{{ ansible_loop.index}}\"\n      failed_when:\n        - fip_list.rc != 0\n        - '\"No floatingIP found\" not in fip_list.stderr'\n      register: fip_list\n      loop: \"{{ range(vsi_count)|list }}\"\n      loop_control:\n        extended: yes\n", "path": "examples/multiple-vm-ssh/destroy.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: Destroy IBM Cloud VPC VSI\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n    - name: Fetch the variables from var file\n      include_vars:\n        file: vars.yml\n\n    - name: Check for existing Floating IPs\n      ibm_is_floating_ip_info:\n        name: \"{{ fip_name }}-{{ ansible_loop.index}}\"\n      failed_when:\n        - fip_list.rc != 0\n        - '\"No floatingIP found\" not in fip_list.stderr'\n      register: fip_list\n      loop: \"{{ range(vsi_count)|list }}\"\n      loop_control:\n        extended: yes\n\n    - name: Release Floating IPs", "license": "", "module": "ibm_is_floating_ip", "output": "      ibm_is_floating_ip:\n        state: absent\n        id: \"{{ item.resource.id }}\"\n      when: item.resource.id is defined\n      loop: \"{{ fip_list.results }}\"\n", "path": "examples/multiple-vm-ssh/destroy.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: Destroy IBM Cloud VPC VSI\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n    - name: Fetch the variables from var file\n      include_vars:\n        file: vars.yml\n\n    - name: Check for existing Floating IPs\n      ibm_is_floating_ip_info:\n        name: \"{{ fip_name }}-{{ ansible_loop.index}}\"\n      failed_when:\n        - fip_list.rc != 0\n        - '\"No floatingIP found\" not in fip_list.stderr'\n      register: fip_list\n      loop: \"{{ range(vsi_count)|list }}\"\n      loop_control:\n        extended: yes\n\n    - name: Release Floating IPs\n      ibm_is_floating_ip:\n        state: absent\n        id: \"{{ item.resource.id }}\"\n      when: item.resource.id is defined\n      loop: \"{{ fip_list.results }}\"\n\n    - name: Check for existing VSIs", "license": "", "module": "ibm_is_instance_info", "output": "      ibm_is_instance_info:\n        name: \"{{ vsi_name }}-{{ ansible_loop.index}}\"\n      failed_when:\n        - vsi_list.rc != 0\n        - '\"No Instance found\" not in vsi_list.stderr'\n      register: vsi_list\n      loop: \"{{ range(vsi_count)|list }}\"\n      loop_control:\n        extended: yes\n", "path": "examples/multiple-vm-ssh/destroy.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: Destroy IBM Cloud VPC VSI\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n    - name: Fetch the variables from var file\n      include_vars:\n        file: vars.yml\n\n    - name: Check for existing Floating IPs\n      ibm_is_floating_ip_info:\n        name: \"{{ fip_name }}-{{ ansible_loop.index}}\"\n      failed_when:\n        - fip_list.rc != 0\n        - '\"No floatingIP found\" not in fip_list.stderr'\n      register: fip_list\n      loop: \"{{ range(vsi_count)|list }}\"\n      loop_control:\n        extended: yes\n\n    - name: Release Floating IPs\n      ibm_is_floating_ip:\n        state: absent\n        id: \"{{ item.resource.id }}\"\n      when: item.resource.id is defined\n      loop: \"{{ fip_list.results }}\"\n\n    - name: Check for existing VSIs\n      ibm_is_instance_info:\n        name: \"{{ vsi_name }}-{{ ansible_loop.index}}\"\n      failed_when:\n        - vsi_list.rc != 0\n        - '\"No Instance found\" not in vsi_list.stderr'\n      register: vsi_list\n      loop: \"{{ range(vsi_count)|list }}\"\n      loop_control:\n        extended: yes\n\n    - name: Remove VSIs", "license": "", "module": "ibm_is_instance", "output": "      ibm_is_instance:\n        state: absent\n        id: \"{{ item.resource.id }}\"\n        vpc: \"{{ item.resource.vpc }}\"\n        keys: []\n        image: \"{{ item.resource.image }}\"\n        profile: \"{{ item.resource.profile }}\"\n        zone: \"{{ item.resource.zone }}\"\n        primary_network_interface:\n          - subnet: \"{{ item.resource.primary_network_interface[0].subnet }}\"\n      when: item.resource.id is defined\n      loop: \"{{ vsi_list.results }}\"\n", "path": "examples/multiple-vm-ssh/destroy.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: Destroy IBM Cloud VPC VSI\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n    - name: Fetch the variables from var file\n      include_vars:\n        file: vars.yml\n\n    - name: Check for existing Floating IPs\n      ibm_is_floating_ip_info:\n        name: \"{{ fip_name }}-{{ ansible_loop.index}}\"\n      failed_when:\n        - fip_list.rc != 0\n        - '\"No floatingIP found\" not in fip_list.stderr'\n      register: fip_list\n      loop: \"{{ range(vsi_count)|list }}\"\n      loop_control:\n        extended: yes\n\n    - name: Release Floating IPs\n      ibm_is_floating_ip:\n        state: absent\n        id: \"{{ item.resource.id }}\"\n      when: item.resource.id is defined\n      loop: \"{{ fip_list.results }}\"\n\n    - name: Check for existing VSIs\n      ibm_is_instance_info:\n        name: \"{{ vsi_name }}-{{ ansible_loop.index}}\"\n      failed_when:\n        - vsi_list.rc != 0\n        - '\"No Instance found\" not in vsi_list.stderr'\n      register: vsi_list\n      loop: \"{{ range(vsi_count)|list }}\"\n      loop_control:\n        extended: yes\n\n    - name: Remove VSIs\n      ibm_is_instance:\n        state: absent\n        id: \"{{ item.resource.id }}\"\n        vpc: \"{{ item.resource.vpc }}\"\n        keys: []\n        image: \"{{ item.resource.image }}\"\n        profile: \"{{ item.resource.profile }}\"\n        zone: \"{{ item.resource.zone }}\"\n        primary_network_interface:\n          - subnet: \"{{ item.resource.primary_network_interface[0].subnet }}\"\n      when: item.resource.id is defined\n      loop: \"{{ vsi_list.results }}\"\n\n    - name: Checking for existing SSH key", "license": "", "module": "ibm_is_ssh_key_info", "output": "      ibm_is_ssh_key_info:\n        name: \"{{ ssh_key_name }}\"\n      failed_when:\n        - ssh_key.rc != 0\n        - '\"No SSH Key found\" not in ssh_key.stderr'\n      register: ssh_key\n", "path": "examples/multiple-vm-ssh/destroy.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: Destroy IBM Cloud VPC VSI\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n    - name: Fetch the variables from var file\n      include_vars:\n        file: vars.yml\n\n    - name: Check for existing Floating IPs\n      ibm_is_floating_ip_info:\n        name: \"{{ fip_name }}-{{ ansible_loop.index}}\"\n      failed_when:\n        - fip_list.rc != 0\n        - '\"No floatingIP found\" not in fip_list.stderr'\n      register: fip_list\n      loop: \"{{ range(vsi_count)|list }}\"\n      loop_control:\n        extended: yes\n\n    - name: Release Floating IPs\n      ibm_is_floating_ip:\n        state: absent\n        id: \"{{ item.resource.id }}\"\n      when: item.resource.id is defined\n      loop: \"{{ fip_list.results }}\"\n\n    - name: Check for existing VSIs\n      ibm_is_instance_info:\n        name: \"{{ vsi_name }}-{{ ansible_loop.index}}\"\n      failed_when:\n        - vsi_list.rc != 0\n        - '\"No Instance found\" not in vsi_list.stderr'\n      register: vsi_list\n      loop: \"{{ range(vsi_count)|list }}\"\n      loop_control:\n        extended: yes\n\n    - name: Remove VSIs\n      ibm_is_instance:\n        state: absent\n        id: \"{{ item.resource.id }}\"\n        vpc: \"{{ item.resource.vpc }}\"\n        keys: []\n        image: \"{{ item.resource.image }}\"\n        profile: \"{{ item.resource.profile }}\"\n        zone: \"{{ item.resource.zone }}\"\n        primary_network_interface:\n          - subnet: \"{{ item.resource.primary_network_interface[0].subnet }}\"\n      when: item.resource.id is defined\n      loop: \"{{ vsi_list.results }}\"\n\n    - name: Checking for existing SSH key\n      ibm_is_ssh_key_info:\n        name: \"{{ ssh_key_name }}\"\n      failed_when:\n        - ssh_key.rc != 0\n        - '\"No SSH Key found\" not in ssh_key.stderr'\n      register: ssh_key\n\n    - name: Remove SSH Key", "license": "", "module": "ibm_is_ssh_key", "output": "      ibm_is_ssh_key:\n        state: absent\n        id: \"{{ ssh_key.resource.id }}\"\n      when: ssh_key.resource.id is defined\n", "path": "examples/multiple-vm-ssh/destroy.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: Destroy IBM Cloud VPC VSI\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n    - name: Fetch the variables from var file\n      include_vars:\n        file: vars.yml\n\n    - name: Check for existing Floating IPs\n      ibm_is_floating_ip_info:\n        name: \"{{ fip_name }}-{{ ansible_loop.index}}\"\n      failed_when:\n        - fip_list.rc != 0\n        - '\"No floatingIP found\" not in fip_list.stderr'\n      register: fip_list\n      loop: \"{{ range(vsi_count)|list }}\"\n      loop_control:\n        extended: yes\n\n    - name: Release Floating IPs\n      ibm_is_floating_ip:\n        state: absent\n        id: \"{{ item.resource.id }}\"\n      when: item.resource.id is defined\n      loop: \"{{ fip_list.results }}\"\n\n    - name: Check for existing VSIs\n      ibm_is_instance_info:\n        name: \"{{ vsi_name }}-{{ ansible_loop.index}}\"\n      failed_when:\n        - vsi_list.rc != 0\n        - '\"No Instance found\" not in vsi_list.stderr'\n      register: vsi_list\n      loop: \"{{ range(vsi_count)|list }}\"\n      loop_control:\n        extended: yes\n\n    - name: Remove VSIs\n      ibm_is_instance:\n        state: absent\n        id: \"{{ item.resource.id }}\"\n        vpc: \"{{ item.resource.vpc }}\"\n        keys: []\n        image: \"{{ item.resource.image }}\"\n        profile: \"{{ item.resource.profile }}\"\n        zone: \"{{ item.resource.zone }}\"\n        primary_network_interface:\n          - subnet: \"{{ item.resource.primary_network_interface[0].subnet }}\"\n      when: item.resource.id is defined\n      loop: \"{{ vsi_list.results }}\"\n\n    - name: Checking for existing SSH key\n      ibm_is_ssh_key_info:\n        name: \"{{ ssh_key_name }}\"\n      failed_when:\n        - ssh_key.rc != 0\n        - '\"No SSH Key found\" not in ssh_key.stderr'\n      register: ssh_key\n\n    - name: Remove SSH Key\n      ibm_is_ssh_key:\n        state: absent\n        id: \"{{ ssh_key.resource.id }}\"\n      when: ssh_key.resource.id is defined\n\n    - name: Checking for existing VPC Subnet", "license": "", "module": "ibm_is_subnet_info", "output": "      ibm_is_subnet_info:\n        name: \"{{ subnet_name }}\"\n      failed_when:\n        - subnet.rc != 0\n        - '\"No subnet found\" not in subnet.stderr'\n      register: subnet\n", "path": "examples/multiple-vm-ssh/destroy.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: Destroy IBM Cloud VPC VSI\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n    - name: Fetch the variables from var file\n      include_vars:\n        file: vars.yml\n\n    - name: Check for existing Floating IPs\n      ibm_is_floating_ip_info:\n        name: \"{{ fip_name }}-{{ ansible_loop.index}}\"\n      failed_when:\n        - fip_list.rc != 0\n        - '\"No floatingIP found\" not in fip_list.stderr'\n      register: fip_list\n      loop: \"{{ range(vsi_count)|list }}\"\n      loop_control:\n        extended: yes\n\n    - name: Release Floating IPs\n      ibm_is_floating_ip:\n        state: absent\n        id: \"{{ item.resource.id }}\"\n      when: item.resource.id is defined\n      loop: \"{{ fip_list.results }}\"\n\n    - name: Check for existing VSIs\n      ibm_is_instance_info:\n        name: \"{{ vsi_name }}-{{ ansible_loop.index}}\"\n      failed_when:\n        - vsi_list.rc != 0\n        - '\"No Instance found\" not in vsi_list.stderr'\n      register: vsi_list\n      loop: \"{{ range(vsi_count)|list }}\"\n      loop_control:\n        extended: yes\n\n    - name: Remove VSIs\n      ibm_is_instance:\n        state: absent\n        id: \"{{ item.resource.id }}\"\n        vpc: \"{{ item.resource.vpc }}\"\n        keys: []\n        image: \"{{ item.resource.image }}\"\n        profile: \"{{ item.resource.profile }}\"\n        zone: \"{{ item.resource.zone }}\"\n        primary_network_interface:\n          - subnet: \"{{ item.resource.primary_network_interface[0].subnet }}\"\n      when: item.resource.id is defined\n      loop: \"{{ vsi_list.results }}\"\n\n    - name: Checking for existing SSH key\n      ibm_is_ssh_key_info:\n        name: \"{{ ssh_key_name }}\"\n      failed_when:\n        - ssh_key.rc != 0\n        - '\"No SSH Key found\" not in ssh_key.stderr'\n      register: ssh_key\n\n    - name: Remove SSH Key\n      ibm_is_ssh_key:\n        state: absent\n        id: \"{{ ssh_key.resource.id }}\"\n      when: ssh_key.resource.id is defined\n\n    - name: Checking for existing VPC Subnet\n      ibm_is_subnet_info:\n        name: \"{{ subnet_name }}\"\n      failed_when:\n        - subnet.rc != 0\n        - '\"No subnet found\" not in subnet.stderr'\n      register: subnet\n\n    - name: Remove VPC Subnet", "license": "", "module": "ibm_is_subnet", "output": "      ibm_is_subnet:\n        state: absent\n        id: \"{{ subnet.resource.id }}\"\n      when: subnet.resource.id is defined\n", "path": "examples/multiple-vm-ssh/destroy.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: Destroy IBM Cloud VPC VSI\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n    - name: Fetch the variables from var file\n      include_vars:\n        file: vars.yml\n\n    - name: Check for existing Floating IPs\n      ibm_is_floating_ip_info:\n        name: \"{{ fip_name }}-{{ ansible_loop.index}}\"\n      failed_when:\n        - fip_list.rc != 0\n        - '\"No floatingIP found\" not in fip_list.stderr'\n      register: fip_list\n      loop: \"{{ range(vsi_count)|list }}\"\n      loop_control:\n        extended: yes\n\n    - name: Release Floating IPs\n      ibm_is_floating_ip:\n        state: absent\n        id: \"{{ item.resource.id }}\"\n      when: item.resource.id is defined\n      loop: \"{{ fip_list.results }}\"\n\n    - name: Check for existing VSIs\n      ibm_is_instance_info:\n        name: \"{{ vsi_name }}-{{ ansible_loop.index}}\"\n      failed_when:\n        - vsi_list.rc != 0\n        - '\"No Instance found\" not in vsi_list.stderr'\n      register: vsi_list\n      loop: \"{{ range(vsi_count)|list }}\"\n      loop_control:\n        extended: yes\n\n    - name: Remove VSIs\n      ibm_is_instance:\n        state: absent\n        id: \"{{ item.resource.id }}\"\n        vpc: \"{{ item.resource.vpc }}\"\n        keys: []\n        image: \"{{ item.resource.image }}\"\n        profile: \"{{ item.resource.profile }}\"\n        zone: \"{{ item.resource.zone }}\"\n        primary_network_interface:\n          - subnet: \"{{ item.resource.primary_network_interface[0].subnet }}\"\n      when: item.resource.id is defined\n      loop: \"{{ vsi_list.results }}\"\n\n    - name: Checking for existing SSH key\n      ibm_is_ssh_key_info:\n        name: \"{{ ssh_key_name }}\"\n      failed_when:\n        - ssh_key.rc != 0\n        - '\"No SSH Key found\" not in ssh_key.stderr'\n      register: ssh_key\n\n    - name: Remove SSH Key\n      ibm_is_ssh_key:\n        state: absent\n        id: \"{{ ssh_key.resource.id }}\"\n      when: ssh_key.resource.id is defined\n\n    - name: Checking for existing VPC Subnet\n      ibm_is_subnet_info:\n        name: \"{{ subnet_name }}\"\n      failed_when:\n        - subnet.rc != 0\n        - '\"No subnet found\" not in subnet.stderr'\n      register: subnet\n\n    - name: Remove VPC Subnet\n      ibm_is_subnet:\n        state: absent\n        id: \"{{ subnet.resource.id }}\"\n      when: subnet.resource.id is defined\n\n    - name: Checking for existing VPC", "license": "", "module": "ibm_is_vpc_info", "output": "      ibm_is_vpc_info:\n        name: \"{{ vpc_name }}\"\n      failed_when:\n        - vpc.rc != 0\n        - '\"No VPC found\" not in vpc.stderr'\n      register: vpc\n", "path": "examples/multiple-vm-ssh/destroy.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: Destroy IBM Cloud VPC VSI\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n    - name: Fetch the variables from var file\n      include_vars:\n        file: vars.yml\n\n    - name: Check for existing Floating IPs\n      ibm_is_floating_ip_info:\n        name: \"{{ fip_name }}-{{ ansible_loop.index}}\"\n      failed_when:\n        - fip_list.rc != 0\n        - '\"No floatingIP found\" not in fip_list.stderr'\n      register: fip_list\n      loop: \"{{ range(vsi_count)|list }}\"\n      loop_control:\n        extended: yes\n\n    - name: Release Floating IPs\n      ibm_is_floating_ip:\n        state: absent\n        id: \"{{ item.resource.id }}\"\n      when: item.resource.id is defined\n      loop: \"{{ fip_list.results }}\"\n\n    - name: Check for existing VSIs\n      ibm_is_instance_info:\n        name: \"{{ vsi_name }}-{{ ansible_loop.index}}\"\n      failed_when:\n        - vsi_list.rc != 0\n        - '\"No Instance found\" not in vsi_list.stderr'\n      register: vsi_list\n      loop: \"{{ range(vsi_count)|list }}\"\n      loop_control:\n        extended: yes\n\n    - name: Remove VSIs\n      ibm_is_instance:\n        state: absent\n        id: \"{{ item.resource.id }}\"\n        vpc: \"{{ item.resource.vpc }}\"\n        keys: []\n        image: \"{{ item.resource.image }}\"\n        profile: \"{{ item.resource.profile }}\"\n        zone: \"{{ item.resource.zone }}\"\n        primary_network_interface:\n          - subnet: \"{{ item.resource.primary_network_interface[0].subnet }}\"\n      when: item.resource.id is defined\n      loop: \"{{ vsi_list.results }}\"\n\n    - name: Checking for existing SSH key\n      ibm_is_ssh_key_info:\n        name: \"{{ ssh_key_name }}\"\n      failed_when:\n        - ssh_key.rc != 0\n        - '\"No SSH Key found\" not in ssh_key.stderr'\n      register: ssh_key\n\n    - name: Remove SSH Key\n      ibm_is_ssh_key:\n        state: absent\n        id: \"{{ ssh_key.resource.id }}\"\n      when: ssh_key.resource.id is defined\n\n    - name: Checking for existing VPC Subnet\n      ibm_is_subnet_info:\n        name: \"{{ subnet_name }}\"\n      failed_when:\n        - subnet.rc != 0\n        - '\"No subnet found\" not in subnet.stderr'\n      register: subnet\n\n    - name: Remove VPC Subnet\n      ibm_is_subnet:\n        state: absent\n        id: \"{{ subnet.resource.id }}\"\n      when: subnet.resource.id is defined\n\n    - name: Checking for existing VPC\n      ibm_is_vpc_info:\n        name: \"{{ vpc_name }}\"\n      failed_when:\n        - vpc.rc != 0\n        - '\"No VPC found\" not in vpc.stderr'\n      register: vpc\n\n    - name: Remove VPC", "license": "", "module": "ibm_is_vpc", "output": "      ibm_is_vpc:\n        state: absent\n        id: \"{{ vpc.resource.id }}\"\n      when: vpc.resource.id is defined", "path": "examples/multiple-vm-ssh/destroy.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: POWER VSI Creation Demo\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  vars:\n    pi_name: ansible-demo-power-vm\n    sys_type: s922\n    pi_image: \"7200-03-03\"\n    proc_type: shared\n    processors: \"0.25\"\n    memory: \"2\"\n    storage_type: tier1\n    pi_cloud_instance_id: \"11956c6d-f7e8-4120-a403-14428405d1fe\"\n    ssh_public_key: \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC0eZ4uNSH6rtxNM7MagrBtxwlASw0iKcxDdXq9eNu93xDpsvxdn6xE/JESlIHhf9/45oLw9AKpu/MZYwqQ0O+uedwgtLvorv++fyXI36cls4xmUCuNnEhoK1aXh26N+V+lxejqF3DJhMKHYprQCnyl/8RWkWIFc2Jo60ACZ98MY4rRHgBP/0t1tqmb0I4IdBaYLctVIdv16gYJ5zqGYKeJBMG7XtgkrtOeacVoArrmjHY6n2cNgE5jLt9n9MyyGLjzq1agIpwwsWJGfhzqo2I98UhGWtUlD2UeNHbuJZmbXeyibuoV7RhDZg9LafkOXOTojjZc9rUrd8BChoHhbW3X anil@Anils-MacBook-Pro.local\"\n  tasks:\n    - name: Check for existing SSH Key", "license": "", "module": "ibm_pi_key_info", "output": "      ibm_pi_key_info:\n        pi_key_name: \"{{ pi_name }}-ssh-key\"\n        pi_cloud_instance_id: \"{{ pi_cloud_instance_id }}\"\n      failed_when:\n        - pi_ssh_key_existing_output.rc != 0\n        - '\"does not exist\" not in pi_ssh_key_existing_output.stderr'\n      register: pi_ssh_key_existing_output\n", "path": "examples/simple-vm-power-vs/create.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: POWER VSI Creation Demo\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  vars:\n    pi_name: ansible-demo-power-vm\n    sys_type: s922\n    pi_image: \"7200-03-03\"\n    proc_type: shared\n    processors: \"0.25\"\n    memory: \"2\"\n    storage_type: tier1\n    pi_cloud_instance_id: \"11956c6d-f7e8-4120-a403-14428405d1fe\"\n    ssh_public_key: \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC0eZ4uNSH6rtxNM7MagrBtxwlASw0iKcxDdXq9eNu93xDpsvxdn6xE/JESlIHhf9/45oLw9AKpu/MZYwqQ0O+uedwgtLvorv++fyXI36cls4xmUCuNnEhoK1aXh26N+V+lxejqF3DJhMKHYprQCnyl/8RWkWIFc2Jo60ACZ98MY4rRHgBP/0t1tqmb0I4IdBaYLctVIdv16gYJ5zqGYKeJBMG7XtgkrtOeacVoArrmjHY6n2cNgE5jLt9n9MyyGLjzq1agIpwwsWJGfhzqo2I98UhGWtUlD2UeNHbuJZmbXeyibuoV7RhDZg9LafkOXOTojjZc9rUrd8BChoHhbW3X anil@Anils-MacBook-Pro.local\"\n  tasks:\n    - name: Check for existing SSH Key\n      ibm_pi_key_info:\n        pi_key_name: \"{{ pi_name }}-ssh-key\"\n        pi_cloud_instance_id: \"{{ pi_cloud_instance_id }}\"\n      failed_when:\n        - pi_ssh_key_existing_output.rc != 0\n        - '\"does not exist\" not in pi_ssh_key_existing_output.stderr'\n      register: pi_ssh_key_existing_output\n\n    - name: Save existing SSH Key as fact", "license": "", "module": "set_fact", "output": "      set_fact:\n        cacheable: True\n        pi_ssh_key: \"{{ pi_ssh_key_existing_output.resource }}\"\n      when: pi_ssh_key_existing_output.resource.id is defined\n", "path": "examples/simple-vm-power-vs/create.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: POWER VSI Creation Demo\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  vars:\n    pi_name: ansible-demo-power-vm\n    sys_type: s922\n    pi_image: \"7200-03-03\"\n    proc_type: shared\n    processors: \"0.25\"\n    memory: \"2\"\n    storage_type: tier1\n    pi_cloud_instance_id: \"11956c6d-f7e8-4120-a403-14428405d1fe\"\n    ssh_public_key: \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC0eZ4uNSH6rtxNM7MagrBtxwlASw0iKcxDdXq9eNu93xDpsvxdn6xE/JESlIHhf9/45oLw9AKpu/MZYwqQ0O+uedwgtLvorv++fyXI36cls4xmUCuNnEhoK1aXh26N+V+lxejqF3DJhMKHYprQCnyl/8RWkWIFc2Jo60ACZ98MY4rRHgBP/0t1tqmb0I4IdBaYLctVIdv16gYJ5zqGYKeJBMG7XtgkrtOeacVoArrmjHY6n2cNgE5jLt9n9MyyGLjzq1agIpwwsWJGfhzqo2I98UhGWtUlD2UeNHbuJZmbXeyibuoV7RhDZg9LafkOXOTojjZc9rUrd8BChoHhbW3X anil@Anils-MacBook-Pro.local\"\n  tasks:\n    - name: Check for existing SSH Key\n      ibm_pi_key_info:\n        pi_key_name: \"{{ pi_name }}-ssh-key\"\n        pi_cloud_instance_id: \"{{ pi_cloud_instance_id }}\"\n      failed_when:\n        - pi_ssh_key_existing_output.rc != 0\n        - '\"does not exist\" not in pi_ssh_key_existing_output.stderr'\n      register: pi_ssh_key_existing_output\n\n    - name: Save existing SSH Key as fact\n      set_fact:\n        cacheable: True\n        pi_ssh_key: \"{{ pi_ssh_key_existing_output.resource }}\"\n      when: pi_ssh_key_existing_output.resource.id is defined\n\n    - name: Add new SSH Key", "license": "", "module": "ibm_pi_key", "output": "      ibm_pi_key:\n        pi_key_name: \"{{ pi_name }}-ssh-key\"\n        pi_ssh_key: \"{{ ssh_public_key }}\"\n        pi_cloud_instance_id: \"{{ pi_cloud_instance_id }}\"\n      register: pi_ssh_key_create_output\n      when: pi_ssh_key_existing_output.resource.id is not defined\n", "path": "examples/simple-vm-power-vs/create.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: POWER VSI Creation Demo\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  vars:\n    pi_name: ansible-demo-power-vm\n    sys_type: s922\n    pi_image: \"7200-03-03\"\n    proc_type: shared\n    processors: \"0.25\"\n    memory: \"2\"\n    storage_type: tier1\n    pi_cloud_instance_id: \"11956c6d-f7e8-4120-a403-14428405d1fe\"\n    ssh_public_key: \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC0eZ4uNSH6rtxNM7MagrBtxwlASw0iKcxDdXq9eNu93xDpsvxdn6xE/JESlIHhf9/45oLw9AKpu/MZYwqQ0O+uedwgtLvorv++fyXI36cls4xmUCuNnEhoK1aXh26N+V+lxejqF3DJhMKHYprQCnyl/8RWkWIFc2Jo60ACZ98MY4rRHgBP/0t1tqmb0I4IdBaYLctVIdv16gYJ5zqGYKeJBMG7XtgkrtOeacVoArrmjHY6n2cNgE5jLt9n9MyyGLjzq1agIpwwsWJGfhzqo2I98UhGWtUlD2UeNHbuJZmbXeyibuoV7RhDZg9LafkOXOTojjZc9rUrd8BChoHhbW3X anil@Anils-MacBook-Pro.local\"\n  tasks:\n    - name: Check for existing SSH Key\n      ibm_pi_key_info:\n        pi_key_name: \"{{ pi_name }}-ssh-key\"\n        pi_cloud_instance_id: \"{{ pi_cloud_instance_id }}\"\n      failed_when:\n        - pi_ssh_key_existing_output.rc != 0\n        - '\"does not exist\" not in pi_ssh_key_existing_output.stderr'\n      register: pi_ssh_key_existing_output\n\n    - name: Save existing SSH Key as fact\n      set_fact:\n        cacheable: True\n        pi_ssh_key: \"{{ pi_ssh_key_existing_output.resource }}\"\n      when: pi_ssh_key_existing_output.resource.id is defined\n\n    - name: Add new SSH Key\n      ibm_pi_key:\n        pi_key_name: \"{{ pi_name }}-ssh-key\"\n        pi_ssh_key: \"{{ ssh_public_key }}\"\n        pi_cloud_instance_id: \"{{ pi_cloud_instance_id }}\"\n      register: pi_ssh_key_create_output\n      when: pi_ssh_key_existing_output.resource.id is not defined\n\n    - name: Save new SSH Key as fact", "license": "", "module": "set_fact", "output": "      set_fact:\n        cacheable: True\n        pi_ssh_key: \"{{ pi_ssh_key_create_output.resource }}\"\n      when: pi_ssh_key_existing_output.resource.id is not defined\n", "path": "examples/simple-vm-power-vs/create.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: POWER VSI Creation Demo\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  vars:\n    pi_name: ansible-demo-power-vm\n    sys_type: s922\n    pi_image: \"7200-03-03\"\n    proc_type: shared\n    processors: \"0.25\"\n    memory: \"2\"\n    storage_type: tier1\n    pi_cloud_instance_id: \"11956c6d-f7e8-4120-a403-14428405d1fe\"\n    ssh_public_key: \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC0eZ4uNSH6rtxNM7MagrBtxwlASw0iKcxDdXq9eNu93xDpsvxdn6xE/JESlIHhf9/45oLw9AKpu/MZYwqQ0O+uedwgtLvorv++fyXI36cls4xmUCuNnEhoK1aXh26N+V+lxejqF3DJhMKHYprQCnyl/8RWkWIFc2Jo60ACZ98MY4rRHgBP/0t1tqmb0I4IdBaYLctVIdv16gYJ5zqGYKeJBMG7XtgkrtOeacVoArrmjHY6n2cNgE5jLt9n9MyyGLjzq1agIpwwsWJGfhzqo2I98UhGWtUlD2UeNHbuJZmbXeyibuoV7RhDZg9LafkOXOTojjZc9rUrd8BChoHhbW3X anil@Anils-MacBook-Pro.local\"\n  tasks:\n    - name: Check for existing SSH Key\n      ibm_pi_key_info:\n        pi_key_name: \"{{ pi_name }}-ssh-key\"\n        pi_cloud_instance_id: \"{{ pi_cloud_instance_id }}\"\n      failed_when:\n        - pi_ssh_key_existing_output.rc != 0\n        - '\"does not exist\" not in pi_ssh_key_existing_output.stderr'\n      register: pi_ssh_key_existing_output\n\n    - name: Save existing SSH Key as fact\n      set_fact:\n        cacheable: True\n        pi_ssh_key: \"{{ pi_ssh_key_existing_output.resource }}\"\n      when: pi_ssh_key_existing_output.resource.id is defined\n\n    - name: Add new SSH Key\n      ibm_pi_key:\n        pi_key_name: \"{{ pi_name }}-ssh-key\"\n        pi_ssh_key: \"{{ ssh_public_key }}\"\n        pi_cloud_instance_id: \"{{ pi_cloud_instance_id }}\"\n      register: pi_ssh_key_create_output\n      when: pi_ssh_key_existing_output.resource.id is not defined\n\n    - name: Save new SSH Key as fact\n      set_fact:\n        cacheable: True\n        pi_ssh_key: \"{{ pi_ssh_key_create_output.resource }}\"\n      when: pi_ssh_key_existing_output.resource.id is not defined\n\n    - name: Retrieve image list", "license": "", "module": "ibm_pi_images_info", "output": "      ibm_pi_images_info:\n        pi_cloud_instance_id: \"{{ pi_cloud_instance_id }}\"\n      register: images_list\n", "path": "examples/simple-vm-power-vs/create.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: POWER VSI Creation Demo\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  vars:\n    pi_name: ansible-demo-power-vm\n    sys_type: s922\n    pi_image: \"7200-03-03\"\n    proc_type: shared\n    processors: \"0.25\"\n    memory: \"2\"\n    storage_type: tier1\n    pi_cloud_instance_id: \"11956c6d-f7e8-4120-a403-14428405d1fe\"\n    ssh_public_key: \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC0eZ4uNSH6rtxNM7MagrBtxwlASw0iKcxDdXq9eNu93xDpsvxdn6xE/JESlIHhf9/45oLw9AKpu/MZYwqQ0O+uedwgtLvorv++fyXI36cls4xmUCuNnEhoK1aXh26N+V+lxejqF3DJhMKHYprQCnyl/8RWkWIFc2Jo60ACZ98MY4rRHgBP/0t1tqmb0I4IdBaYLctVIdv16gYJ5zqGYKeJBMG7XtgkrtOeacVoArrmjHY6n2cNgE5jLt9n9MyyGLjzq1agIpwwsWJGfhzqo2I98UhGWtUlD2UeNHbuJZmbXeyibuoV7RhDZg9LafkOXOTojjZc9rUrd8BChoHhbW3X anil@Anils-MacBook-Pro.local\"\n  tasks:\n    - name: Check for existing SSH Key\n      ibm_pi_key_info:\n        pi_key_name: \"{{ pi_name }}-ssh-key\"\n        pi_cloud_instance_id: \"{{ pi_cloud_instance_id }}\"\n      failed_when:\n        - pi_ssh_key_existing_output.rc != 0\n        - '\"does not exist\" not in pi_ssh_key_existing_output.stderr'\n      register: pi_ssh_key_existing_output\n\n    - name: Save existing SSH Key as fact\n      set_fact:\n        cacheable: True\n        pi_ssh_key: \"{{ pi_ssh_key_existing_output.resource }}\"\n      when: pi_ssh_key_existing_output.resource.id is defined\n\n    - name: Add new SSH Key\n      ibm_pi_key:\n        pi_key_name: \"{{ pi_name }}-ssh-key\"\n        pi_ssh_key: \"{{ ssh_public_key }}\"\n        pi_cloud_instance_id: \"{{ pi_cloud_instance_id }}\"\n      register: pi_ssh_key_create_output\n      when: pi_ssh_key_existing_output.resource.id is not defined\n\n    - name: Save new SSH Key as fact\n      set_fact:\n        cacheable: True\n        pi_ssh_key: \"{{ pi_ssh_key_create_output.resource }}\"\n      when: pi_ssh_key_existing_output.resource.id is not defined\n\n    - name: Retrieve image list\n      ibm_pi_images_info:\n        pi_cloud_instance_id: \"{{ pi_cloud_instance_id }}\"\n      register: images_list\n\n    - name: Set VM image name/id dictionary fact", "license": "", "module": "set_fact", "output": "      set_fact:\n        image_dict: \"{{ images_list.resource.image_info |\n                        items2dict(key_name='name',\n                        value_name='id') }}\"\n", "path": "examples/simple-vm-power-vs/create.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: POWER VSI Creation Demo\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  vars:\n    pi_name: ansible-demo-power-vm\n    sys_type: s922\n    pi_image: \"7200-03-03\"\n    proc_type: shared\n    processors: \"0.25\"\n    memory: \"2\"\n    storage_type: tier1\n    pi_cloud_instance_id: \"11956c6d-f7e8-4120-a403-14428405d1fe\"\n    ssh_public_key: \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC0eZ4uNSH6rtxNM7MagrBtxwlASw0iKcxDdXq9eNu93xDpsvxdn6xE/JESlIHhf9/45oLw9AKpu/MZYwqQ0O+uedwgtLvorv++fyXI36cls4xmUCuNnEhoK1aXh26N+V+lxejqF3DJhMKHYprQCnyl/8RWkWIFc2Jo60ACZ98MY4rRHgBP/0t1tqmb0I4IdBaYLctVIdv16gYJ5zqGYKeJBMG7XtgkrtOeacVoArrmjHY6n2cNgE5jLt9n9MyyGLjzq1agIpwwsWJGfhzqo2I98UhGWtUlD2UeNHbuJZmbXeyibuoV7RhDZg9LafkOXOTojjZc9rUrd8BChoHhbW3X anil@Anils-MacBook-Pro.local\"\n  tasks:\n    - name: Check for existing SSH Key\n      ibm_pi_key_info:\n        pi_key_name: \"{{ pi_name }}-ssh-key\"\n        pi_cloud_instance_id: \"{{ pi_cloud_instance_id }}\"\n      failed_when:\n        - pi_ssh_key_existing_output.rc != 0\n        - '\"does not exist\" not in pi_ssh_key_existing_output.stderr'\n      register: pi_ssh_key_existing_output\n\n    - name: Save existing SSH Key as fact\n      set_fact:\n        cacheable: True\n        pi_ssh_key: \"{{ pi_ssh_key_existing_output.resource }}\"\n      when: pi_ssh_key_existing_output.resource.id is defined\n\n    - name: Add new SSH Key\n      ibm_pi_key:\n        pi_key_name: \"{{ pi_name }}-ssh-key\"\n        pi_ssh_key: \"{{ ssh_public_key }}\"\n        pi_cloud_instance_id: \"{{ pi_cloud_instance_id }}\"\n      register: pi_ssh_key_create_output\n      when: pi_ssh_key_existing_output.resource.id is not defined\n\n    - name: Save new SSH Key as fact\n      set_fact:\n        cacheable: True\n        pi_ssh_key: \"{{ pi_ssh_key_create_output.resource }}\"\n      when: pi_ssh_key_existing_output.resource.id is not defined\n\n    - name: Retrieve image list\n      ibm_pi_images_info:\n        pi_cloud_instance_id: \"{{ pi_cloud_instance_id }}\"\n      register: images_list\n\n    - name: Set VM image name/id dictionary fact\n      set_fact:\n        image_dict: \"{{ images_list.resource.image_info |\n                        items2dict(key_name='name',\n                        value_name='id') }}\"\n\n    - name: Check for existing network", "license": "", "module": "ibm_pi_network_info", "output": "      ibm_pi_network_info:\n        pi_network_name: \"{{ pi_name }}-network\"\n        pi_cloud_instance_id: \"{{ pi_cloud_instance_id }}\"\n      failed_when:\n        - pi_network_existing_output.rc != 0\n        - '\"unable to get network\" not in pi_network_existing_output.stderr'\n        - '\"Error:item not found\" not in pi_network_existing_output.stderr'\n      register: pi_network_existing_output\n", "path": "examples/simple-vm-power-vs/create.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: POWER VSI Creation Demo\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  vars:\n    pi_name: ansible-demo-power-vm\n    sys_type: s922\n    pi_image: \"7200-03-03\"\n    proc_type: shared\n    processors: \"0.25\"\n    memory: \"2\"\n    storage_type: tier1\n    pi_cloud_instance_id: \"11956c6d-f7e8-4120-a403-14428405d1fe\"\n    ssh_public_key: \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC0eZ4uNSH6rtxNM7MagrBtxwlASw0iKcxDdXq9eNu93xDpsvxdn6xE/JESlIHhf9/45oLw9AKpu/MZYwqQ0O+uedwgtLvorv++fyXI36cls4xmUCuNnEhoK1aXh26N+V+lxejqF3DJhMKHYprQCnyl/8RWkWIFc2Jo60ACZ98MY4rRHgBP/0t1tqmb0I4IdBaYLctVIdv16gYJ5zqGYKeJBMG7XtgkrtOeacVoArrmjHY6n2cNgE5jLt9n9MyyGLjzq1agIpwwsWJGfhzqo2I98UhGWtUlD2UeNHbuJZmbXeyibuoV7RhDZg9LafkOXOTojjZc9rUrd8BChoHhbW3X anil@Anils-MacBook-Pro.local\"\n  tasks:\n    - name: Check for existing SSH Key\n      ibm_pi_key_info:\n        pi_key_name: \"{{ pi_name }}-ssh-key\"\n        pi_cloud_instance_id: \"{{ pi_cloud_instance_id }}\"\n      failed_when:\n        - pi_ssh_key_existing_output.rc != 0\n        - '\"does not exist\" not in pi_ssh_key_existing_output.stderr'\n      register: pi_ssh_key_existing_output\n\n    - name: Save existing SSH Key as fact\n      set_fact:\n        cacheable: True\n        pi_ssh_key: \"{{ pi_ssh_key_existing_output.resource }}\"\n      when: pi_ssh_key_existing_output.resource.id is defined\n\n    - name: Add new SSH Key\n      ibm_pi_key:\n        pi_key_name: \"{{ pi_name }}-ssh-key\"\n        pi_ssh_key: \"{{ ssh_public_key }}\"\n        pi_cloud_instance_id: \"{{ pi_cloud_instance_id }}\"\n      register: pi_ssh_key_create_output\n      when: pi_ssh_key_existing_output.resource.id is not defined\n\n    - name: Save new SSH Key as fact\n      set_fact:\n        cacheable: True\n        pi_ssh_key: \"{{ pi_ssh_key_create_output.resource }}\"\n      when: pi_ssh_key_existing_output.resource.id is not defined\n\n    - name: Retrieve image list\n      ibm_pi_images_info:\n        pi_cloud_instance_id: \"{{ pi_cloud_instance_id }}\"\n      register: images_list\n\n    - name: Set VM image name/id dictionary fact\n      set_fact:\n        image_dict: \"{{ images_list.resource.image_info |\n                        items2dict(key_name='name',\n                        value_name='id') }}\"\n\n    - name: Check for existing network\n      ibm_pi_network_info:\n        pi_network_name: \"{{ pi_name }}-network\"\n        pi_cloud_instance_id: \"{{ pi_cloud_instance_id }}\"\n      failed_when:\n        - pi_network_existing_output.rc != 0\n        - '\"unable to get network\" not in pi_network_existing_output.stderr'\n        - '\"Error:item not found\" not in pi_network_existing_output.stderr'\n      register: pi_network_existing_output\n\n    - name: Save existing network as fact", "license": "", "module": "set_fact", "output": "      set_fact:\n        cacheable: True\n        pi_network_id: \"{{ pi_network_existing_output.resource.id }}\"\n      when: pi_network_existing_output.resource.id is defined\n", "path": "examples/simple-vm-power-vs/create.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: POWER VSI Creation Demo\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  vars:\n    pi_name: ansible-demo-power-vm\n    sys_type: s922\n    pi_image: \"7200-03-03\"\n    proc_type: shared\n    processors: \"0.25\"\n    memory: \"2\"\n    storage_type: tier1\n    pi_cloud_instance_id: \"11956c6d-f7e8-4120-a403-14428405d1fe\"\n    ssh_public_key: \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC0eZ4uNSH6rtxNM7MagrBtxwlASw0iKcxDdXq9eNu93xDpsvxdn6xE/JESlIHhf9/45oLw9AKpu/MZYwqQ0O+uedwgtLvorv++fyXI36cls4xmUCuNnEhoK1aXh26N+V+lxejqF3DJhMKHYprQCnyl/8RWkWIFc2Jo60ACZ98MY4rRHgBP/0t1tqmb0I4IdBaYLctVIdv16gYJ5zqGYKeJBMG7XtgkrtOeacVoArrmjHY6n2cNgE5jLt9n9MyyGLjzq1agIpwwsWJGfhzqo2I98UhGWtUlD2UeNHbuJZmbXeyibuoV7RhDZg9LafkOXOTojjZc9rUrd8BChoHhbW3X anil@Anils-MacBook-Pro.local\"\n  tasks:\n    - name: Check for existing SSH Key\n      ibm_pi_key_info:\n        pi_key_name: \"{{ pi_name }}-ssh-key\"\n        pi_cloud_instance_id: \"{{ pi_cloud_instance_id }}\"\n      failed_when:\n        - pi_ssh_key_existing_output.rc != 0\n        - '\"does not exist\" not in pi_ssh_key_existing_output.stderr'\n      register: pi_ssh_key_existing_output\n\n    - name: Save existing SSH Key as fact\n      set_fact:\n        cacheable: True\n        pi_ssh_key: \"{{ pi_ssh_key_existing_output.resource }}\"\n      when: pi_ssh_key_existing_output.resource.id is defined\n\n    - name: Add new SSH Key\n      ibm_pi_key:\n        pi_key_name: \"{{ pi_name }}-ssh-key\"\n        pi_ssh_key: \"{{ ssh_public_key }}\"\n        pi_cloud_instance_id: \"{{ pi_cloud_instance_id }}\"\n      register: pi_ssh_key_create_output\n      when: pi_ssh_key_existing_output.resource.id is not defined\n\n    - name: Save new SSH Key as fact\n      set_fact:\n        cacheable: True\n        pi_ssh_key: \"{{ pi_ssh_key_create_output.resource }}\"\n      when: pi_ssh_key_existing_output.resource.id is not defined\n\n    - name: Retrieve image list\n      ibm_pi_images_info:\n        pi_cloud_instance_id: \"{{ pi_cloud_instance_id }}\"\n      register: images_list\n\n    - name: Set VM image name/id dictionary fact\n      set_fact:\n        image_dict: \"{{ images_list.resource.image_info |\n                        items2dict(key_name='name',\n                        value_name='id') }}\"\n\n    - name: Check for existing network\n      ibm_pi_network_info:\n        pi_network_name: \"{{ pi_name }}-network\"\n        pi_cloud_instance_id: \"{{ pi_cloud_instance_id }}\"\n      failed_when:\n        - pi_network_existing_output.rc != 0\n        - '\"unable to get network\" not in pi_network_existing_output.stderr'\n        - '\"Error:item not found\" not in pi_network_existing_output.stderr'\n      register: pi_network_existing_output\n\n    - name: Save existing network as fact\n      set_fact:\n        cacheable: True\n        pi_network_id: \"{{ pi_network_existing_output.resource.id }}\"\n      when: pi_network_existing_output.resource.id is defined\n\n    - name: Add new network", "license": "", "module": "ibm_pi_network", "output": "      ibm_pi_network:\n        pi_network_name: \"{{ pi_name }}-network\"\n        pi_network_type: \"pub-vlan\"\n        pi_cloud_instance_id: \"{{ pi_cloud_instance_id }}\"\n      register: pi_network_create_output\n      when: pi_network_existing_output.resource.id is not defined\n", "path": "examples/simple-vm-power-vs/create.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: POWER VSI Creation Demo\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  vars:\n    pi_name: ansible-demo-power-vm\n    sys_type: s922\n    pi_image: \"7200-03-03\"\n    proc_type: shared\n    processors: \"0.25\"\n    memory: \"2\"\n    storage_type: tier1\n    pi_cloud_instance_id: \"11956c6d-f7e8-4120-a403-14428405d1fe\"\n    ssh_public_key: \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC0eZ4uNSH6rtxNM7MagrBtxwlASw0iKcxDdXq9eNu93xDpsvxdn6xE/JESlIHhf9/45oLw9AKpu/MZYwqQ0O+uedwgtLvorv++fyXI36cls4xmUCuNnEhoK1aXh26N+V+lxejqF3DJhMKHYprQCnyl/8RWkWIFc2Jo60ACZ98MY4rRHgBP/0t1tqmb0I4IdBaYLctVIdv16gYJ5zqGYKeJBMG7XtgkrtOeacVoArrmjHY6n2cNgE5jLt9n9MyyGLjzq1agIpwwsWJGfhzqo2I98UhGWtUlD2UeNHbuJZmbXeyibuoV7RhDZg9LafkOXOTojjZc9rUrd8BChoHhbW3X anil@Anils-MacBook-Pro.local\"\n  tasks:\n    - name: Check for existing SSH Key\n      ibm_pi_key_info:\n        pi_key_name: \"{{ pi_name }}-ssh-key\"\n        pi_cloud_instance_id: \"{{ pi_cloud_instance_id }}\"\n      failed_when:\n        - pi_ssh_key_existing_output.rc != 0\n        - '\"does not exist\" not in pi_ssh_key_existing_output.stderr'\n      register: pi_ssh_key_existing_output\n\n    - name: Save existing SSH Key as fact\n      set_fact:\n        cacheable: True\n        pi_ssh_key: \"{{ pi_ssh_key_existing_output.resource }}\"\n      when: pi_ssh_key_existing_output.resource.id is defined\n\n    - name: Add new SSH Key\n      ibm_pi_key:\n        pi_key_name: \"{{ pi_name }}-ssh-key\"\n        pi_ssh_key: \"{{ ssh_public_key }}\"\n        pi_cloud_instance_id: \"{{ pi_cloud_instance_id }}\"\n      register: pi_ssh_key_create_output\n      when: pi_ssh_key_existing_output.resource.id is not defined\n\n    - name: Save new SSH Key as fact\n      set_fact:\n        cacheable: True\n        pi_ssh_key: \"{{ pi_ssh_key_create_output.resource }}\"\n      when: pi_ssh_key_existing_output.resource.id is not defined\n\n    - name: Retrieve image list\n      ibm_pi_images_info:\n        pi_cloud_instance_id: \"{{ pi_cloud_instance_id }}\"\n      register: images_list\n\n    - name: Set VM image name/id dictionary fact\n      set_fact:\n        image_dict: \"{{ images_list.resource.image_info |\n                        items2dict(key_name='name',\n                        value_name='id') }}\"\n\n    - name: Check for existing network\n      ibm_pi_network_info:\n        pi_network_name: \"{{ pi_name }}-network\"\n        pi_cloud_instance_id: \"{{ pi_cloud_instance_id }}\"\n      failed_when:\n        - pi_network_existing_output.rc != 0\n        - '\"unable to get network\" not in pi_network_existing_output.stderr'\n        - '\"Error:item not found\" not in pi_network_existing_output.stderr'\n      register: pi_network_existing_output\n\n    - name: Save existing network as fact\n      set_fact:\n        cacheable: True\n        pi_network_id: \"{{ pi_network_existing_output.resource.id }}\"\n      when: pi_network_existing_output.resource.id is defined\n\n    - name: Add new network\n      ibm_pi_network:\n        pi_network_name: \"{{ pi_name }}-network\"\n        pi_network_type: \"pub-vlan\"\n        pi_cloud_instance_id: \"{{ pi_cloud_instance_id }}\"\n      register: pi_network_create_output\n      when: pi_network_existing_output.resource.id is not defined\n\n    - name: Save new network as fact", "license": "", "module": "set_fact", "output": "      set_fact:\n        cacheable: True\n        pi_network_id: \"{{ pi_network_create_output.resource.network_id }}\"\n      when: pi_network_existing_output.resource.id is not defined\n", "path": "examples/simple-vm-power-vs/create.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: POWER VSI Creation Demo\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  vars:\n    pi_name: ansible-demo-power-vm\n    sys_type: s922\n    pi_image: \"7200-03-03\"\n    proc_type: shared\n    processors: \"0.25\"\n    memory: \"2\"\n    storage_type: tier1\n    pi_cloud_instance_id: \"11956c6d-f7e8-4120-a403-14428405d1fe\"\n    ssh_public_key: \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC0eZ4uNSH6rtxNM7MagrBtxwlASw0iKcxDdXq9eNu93xDpsvxdn6xE/JESlIHhf9/45oLw9AKpu/MZYwqQ0O+uedwgtLvorv++fyXI36cls4xmUCuNnEhoK1aXh26N+V+lxejqF3DJhMKHYprQCnyl/8RWkWIFc2Jo60ACZ98MY4rRHgBP/0t1tqmb0I4IdBaYLctVIdv16gYJ5zqGYKeJBMG7XtgkrtOeacVoArrmjHY6n2cNgE5jLt9n9MyyGLjzq1agIpwwsWJGfhzqo2I98UhGWtUlD2UeNHbuJZmbXeyibuoV7RhDZg9LafkOXOTojjZc9rUrd8BChoHhbW3X anil@Anils-MacBook-Pro.local\"\n  tasks:\n    - name: Check for existing SSH Key\n      ibm_pi_key_info:\n        pi_key_name: \"{{ pi_name }}-ssh-key\"\n        pi_cloud_instance_id: \"{{ pi_cloud_instance_id }}\"\n      failed_when:\n        - pi_ssh_key_existing_output.rc != 0\n        - '\"does not exist\" not in pi_ssh_key_existing_output.stderr'\n      register: pi_ssh_key_existing_output\n\n    - name: Save existing SSH Key as fact\n      set_fact:\n        cacheable: True\n        pi_ssh_key: \"{{ pi_ssh_key_existing_output.resource }}\"\n      when: pi_ssh_key_existing_output.resource.id is defined\n\n    - name: Add new SSH Key\n      ibm_pi_key:\n        pi_key_name: \"{{ pi_name }}-ssh-key\"\n        pi_ssh_key: \"{{ ssh_public_key }}\"\n        pi_cloud_instance_id: \"{{ pi_cloud_instance_id }}\"\n      register: pi_ssh_key_create_output\n      when: pi_ssh_key_existing_output.resource.id is not defined\n\n    - name: Save new SSH Key as fact\n      set_fact:\n        cacheable: True\n        pi_ssh_key: \"{{ pi_ssh_key_create_output.resource }}\"\n      when: pi_ssh_key_existing_output.resource.id is not defined\n\n    - name: Retrieve image list\n      ibm_pi_images_info:\n        pi_cloud_instance_id: \"{{ pi_cloud_instance_id }}\"\n      register: images_list\n\n    - name: Set VM image name/id dictionary fact\n      set_fact:\n        image_dict: \"{{ images_list.resource.image_info |\n                        items2dict(key_name='name',\n                        value_name='id') }}\"\n\n    - name: Check for existing network\n      ibm_pi_network_info:\n        pi_network_name: \"{{ pi_name }}-network\"\n        pi_cloud_instance_id: \"{{ pi_cloud_instance_id }}\"\n      failed_when:\n        - pi_network_existing_output.rc != 0\n        - '\"unable to get network\" not in pi_network_existing_output.stderr'\n        - '\"Error:item not found\" not in pi_network_existing_output.stderr'\n      register: pi_network_existing_output\n\n    - name: Save existing network as fact\n      set_fact:\n        cacheable: True\n        pi_network_id: \"{{ pi_network_existing_output.resource.id }}\"\n      when: pi_network_existing_output.resource.id is defined\n\n    - name: Add new network\n      ibm_pi_network:\n        pi_network_name: \"{{ pi_name }}-network\"\n        pi_network_type: \"pub-vlan\"\n        pi_cloud_instance_id: \"{{ pi_cloud_instance_id }}\"\n      register: pi_network_create_output\n      when: pi_network_existing_output.resource.id is not defined\n\n    - name: Save new network as fact\n      set_fact:\n        cacheable: True\n        pi_network_id: \"{{ pi_network_create_output.resource.network_id }}\"\n      when: pi_network_existing_output.resource.id is not defined\n\n    - name: Check for existing Virtual Server Instance", "license": "", "module": "ibm_pi_instance_info", "output": "      ibm_pi_instance_info:\n        pi_instance_name: \"{{ pi_name }}\"\n        pi_cloud_instance_id: \"{{ pi_cloud_instance_id }}\"\n      failed_when:\n        - pi_instance_existing_output.rc != 0\n        - '\"does not exist\" not in pi_instance_existing_output.stderr'\n      register: pi_instance_existing_output\n", "path": "examples/simple-vm-power-vs/create.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: POWER VSI Creation Demo\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  vars:\n    pi_name: ansible-demo-power-vm\n    sys_type: s922\n    pi_image: \"7200-03-03\"\n    proc_type: shared\n    processors: \"0.25\"\n    memory: \"2\"\n    storage_type: tier1\n    pi_cloud_instance_id: \"11956c6d-f7e8-4120-a403-14428405d1fe\"\n    ssh_public_key: \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC0eZ4uNSH6rtxNM7MagrBtxwlASw0iKcxDdXq9eNu93xDpsvxdn6xE/JESlIHhf9/45oLw9AKpu/MZYwqQ0O+uedwgtLvorv++fyXI36cls4xmUCuNnEhoK1aXh26N+V+lxejqF3DJhMKHYprQCnyl/8RWkWIFc2Jo60ACZ98MY4rRHgBP/0t1tqmb0I4IdBaYLctVIdv16gYJ5zqGYKeJBMG7XtgkrtOeacVoArrmjHY6n2cNgE5jLt9n9MyyGLjzq1agIpwwsWJGfhzqo2I98UhGWtUlD2UeNHbuJZmbXeyibuoV7RhDZg9LafkOXOTojjZc9rUrd8BChoHhbW3X anil@Anils-MacBook-Pro.local\"\n  tasks:\n    - name: Check for existing SSH Key\n      ibm_pi_key_info:\n        pi_key_name: \"{{ pi_name }}-ssh-key\"\n        pi_cloud_instance_id: \"{{ pi_cloud_instance_id }}\"\n      failed_when:\n        - pi_ssh_key_existing_output.rc != 0\n        - '\"does not exist\" not in pi_ssh_key_existing_output.stderr'\n      register: pi_ssh_key_existing_output\n\n    - name: Save existing SSH Key as fact\n      set_fact:\n        cacheable: True\n        pi_ssh_key: \"{{ pi_ssh_key_existing_output.resource }}\"\n      when: pi_ssh_key_existing_output.resource.id is defined\n\n    - name: Add new SSH Key\n      ibm_pi_key:\n        pi_key_name: \"{{ pi_name }}-ssh-key\"\n        pi_ssh_key: \"{{ ssh_public_key }}\"\n        pi_cloud_instance_id: \"{{ pi_cloud_instance_id }}\"\n      register: pi_ssh_key_create_output\n      when: pi_ssh_key_existing_output.resource.id is not defined\n\n    - name: Save new SSH Key as fact\n      set_fact:\n        cacheable: True\n        pi_ssh_key: \"{{ pi_ssh_key_create_output.resource }}\"\n      when: pi_ssh_key_existing_output.resource.id is not defined\n\n    - name: Retrieve image list\n      ibm_pi_images_info:\n        pi_cloud_instance_id: \"{{ pi_cloud_instance_id }}\"\n      register: images_list\n\n    - name: Set VM image name/id dictionary fact\n      set_fact:\n        image_dict: \"{{ images_list.resource.image_info |\n                        items2dict(key_name='name',\n                        value_name='id') }}\"\n\n    - name: Check for existing network\n      ibm_pi_network_info:\n        pi_network_name: \"{{ pi_name }}-network\"\n        pi_cloud_instance_id: \"{{ pi_cloud_instance_id }}\"\n      failed_when:\n        - pi_network_existing_output.rc != 0\n        - '\"unable to get network\" not in pi_network_existing_output.stderr'\n        - '\"Error:item not found\" not in pi_network_existing_output.stderr'\n      register: pi_network_existing_output\n\n    - name: Save existing network as fact\n      set_fact:\n        cacheable: True\n        pi_network_id: \"{{ pi_network_existing_output.resource.id }}\"\n      when: pi_network_existing_output.resource.id is defined\n\n    - name: Add new network\n      ibm_pi_network:\n        pi_network_name: \"{{ pi_name }}-network\"\n        pi_network_type: \"pub-vlan\"\n        pi_cloud_instance_id: \"{{ pi_cloud_instance_id }}\"\n      register: pi_network_create_output\n      when: pi_network_existing_output.resource.id is not defined\n\n    - name: Save new network as fact\n      set_fact:\n        cacheable: True\n        pi_network_id: \"{{ pi_network_create_output.resource.network_id }}\"\n      when: pi_network_existing_output.resource.id is not defined\n\n    - name: Check for existing Virtual Server Instance\n      ibm_pi_instance_info:\n        pi_instance_name: \"{{ pi_name }}\"\n        pi_cloud_instance_id: \"{{ pi_cloud_instance_id }}\"\n      failed_when:\n        - pi_instance_existing_output.rc != 0\n        - '\"does not exist\" not in pi_instance_existing_output.stderr'\n      register: pi_instance_existing_output\n\n    - name: Save existing Power VSI fact", "license": "", "module": "set_fact", "output": "      set_fact:\n        cacheable: True\n        pi_instance: \"{{ pi_instance_existing_output.resource }}\"\n      when: pi_instance_existing_output.rc == 0\n", "path": "examples/simple-vm-power-vs/create.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: POWER VSI Creation Demo\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  vars:\n    pi_name: ansible-demo-power-vm\n    sys_type: s922\n    pi_image: \"7200-03-03\"\n    proc_type: shared\n    processors: \"0.25\"\n    memory: \"2\"\n    storage_type: tier1\n    pi_cloud_instance_id: \"11956c6d-f7e8-4120-a403-14428405d1fe\"\n    ssh_public_key: \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC0eZ4uNSH6rtxNM7MagrBtxwlASw0iKcxDdXq9eNu93xDpsvxdn6xE/JESlIHhf9/45oLw9AKpu/MZYwqQ0O+uedwgtLvorv++fyXI36cls4xmUCuNnEhoK1aXh26N+V+lxejqF3DJhMKHYprQCnyl/8RWkWIFc2Jo60ACZ98MY4rRHgBP/0t1tqmb0I4IdBaYLctVIdv16gYJ5zqGYKeJBMG7XtgkrtOeacVoArrmjHY6n2cNgE5jLt9n9MyyGLjzq1agIpwwsWJGfhzqo2I98UhGWtUlD2UeNHbuJZmbXeyibuoV7RhDZg9LafkOXOTojjZc9rUrd8BChoHhbW3X anil@Anils-MacBook-Pro.local\"\n  tasks:\n    - name: Check for existing SSH Key\n      ibm_pi_key_info:\n        pi_key_name: \"{{ pi_name }}-ssh-key\"\n        pi_cloud_instance_id: \"{{ pi_cloud_instance_id }}\"\n      failed_when:\n        - pi_ssh_key_existing_output.rc != 0\n        - '\"does not exist\" not in pi_ssh_key_existing_output.stderr'\n      register: pi_ssh_key_existing_output\n\n    - name: Save existing SSH Key as fact\n      set_fact:\n        cacheable: True\n        pi_ssh_key: \"{{ pi_ssh_key_existing_output.resource }}\"\n      when: pi_ssh_key_existing_output.resource.id is defined\n\n    - name: Add new SSH Key\n      ibm_pi_key:\n        pi_key_name: \"{{ pi_name }}-ssh-key\"\n        pi_ssh_key: \"{{ ssh_public_key }}\"\n        pi_cloud_instance_id: \"{{ pi_cloud_instance_id }}\"\n      register: pi_ssh_key_create_output\n      when: pi_ssh_key_existing_output.resource.id is not defined\n\n    - name: Save new SSH Key as fact\n      set_fact:\n        cacheable: True\n        pi_ssh_key: \"{{ pi_ssh_key_create_output.resource }}\"\n      when: pi_ssh_key_existing_output.resource.id is not defined\n\n    - name: Retrieve image list\n      ibm_pi_images_info:\n        pi_cloud_instance_id: \"{{ pi_cloud_instance_id }}\"\n      register: images_list\n\n    - name: Set VM image name/id dictionary fact\n      set_fact:\n        image_dict: \"{{ images_list.resource.image_info |\n                        items2dict(key_name='name',\n                        value_name='id') }}\"\n\n    - name: Check for existing network\n      ibm_pi_network_info:\n        pi_network_name: \"{{ pi_name }}-network\"\n        pi_cloud_instance_id: \"{{ pi_cloud_instance_id }}\"\n      failed_when:\n        - pi_network_existing_output.rc != 0\n        - '\"unable to get network\" not in pi_network_existing_output.stderr'\n        - '\"Error:item not found\" not in pi_network_existing_output.stderr'\n      register: pi_network_existing_output\n\n    - name: Save existing network as fact\n      set_fact:\n        cacheable: True\n        pi_network_id: \"{{ pi_network_existing_output.resource.id }}\"\n      when: pi_network_existing_output.resource.id is defined\n\n    - name: Add new network\n      ibm_pi_network:\n        pi_network_name: \"{{ pi_name }}-network\"\n        pi_network_type: \"pub-vlan\"\n        pi_cloud_instance_id: \"{{ pi_cloud_instance_id }}\"\n      register: pi_network_create_output\n      when: pi_network_existing_output.resource.id is not defined\n\n    - name: Save new network as fact\n      set_fact:\n        cacheable: True\n        pi_network_id: \"{{ pi_network_create_output.resource.network_id }}\"\n      when: pi_network_existing_output.resource.id is not defined\n\n    - name: Check for existing Virtual Server Instance\n      ibm_pi_instance_info:\n        pi_instance_name: \"{{ pi_name }}\"\n        pi_cloud_instance_id: \"{{ pi_cloud_instance_id }}\"\n      failed_when:\n        - pi_instance_existing_output.rc != 0\n        - '\"does not exist\" not in pi_instance_existing_output.stderr'\n      register: pi_instance_existing_output\n\n    - name: Save existing Power VSI fact\n      set_fact:\n        cacheable: True\n        pi_instance: \"{{ pi_instance_existing_output.resource }}\"\n      when: pi_instance_existing_output.rc == 0\n\n    - name: Create a POWER Virtual Server Instance", "license": "", "module": "ibm_pi_instance", "output": "      ibm_pi_instance:\n        state: available\n        pi_memory: \"{{ memory }}\"\n        pi_processors: \"{{ processors }}\"\n        pi_instance_name: \"{{ pi_name }}\"\n        pi_proc_type: \"{{ proc_type }}\"\n        pi_image_id: \"{{ image_dict[pi_image] }}\"\n        pi_volume_ids: []\n        pi_network:\n          - network_id: \"{{ pi_network_id }}\"\n        pi_key_pair_name: \"{{ pi_ssh_key.pi_key_name }}\"\n        pi_sys_type: \"{{ sys_type }}\"\n        pi_storage_type: \"{{ storage_type }}\"\n        pi_replication_policy: none\n        pi_replication_scheme: suffix\n        pi_replicants: \"1\"\n        pi_cloud_instance_id: \"{{ pi_cloud_instance_id }}\"\n        id: \"{{ pi_instance.resource.id | default(omit) }}\"\n      register: pi_instance_create_output\n      when: pi_instance_existing_output.rc != 0\n", "path": "examples/simple-vm-power-vs/create.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: POWER VSI Creation Demo\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  vars:\n    pi_name: ansible-demo-power-vm\n    sys_type: s922\n    pi_image: \"7200-03-03\"\n    proc_type: shared\n    processors: \"0.25\"\n    memory: \"2\"\n    storage_type: tier1\n    pi_cloud_instance_id: \"11956c6d-f7e8-4120-a403-14428405d1fe\"\n    ssh_public_key: \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC0eZ4uNSH6rtxNM7MagrBtxwlASw0iKcxDdXq9eNu93xDpsvxdn6xE/JESlIHhf9/45oLw9AKpu/MZYwqQ0O+uedwgtLvorv++fyXI36cls4xmUCuNnEhoK1aXh26N+V+lxejqF3DJhMKHYprQCnyl/8RWkWIFc2Jo60ACZ98MY4rRHgBP/0t1tqmb0I4IdBaYLctVIdv16gYJ5zqGYKeJBMG7XtgkrtOeacVoArrmjHY6n2cNgE5jLt9n9MyyGLjzq1agIpwwsWJGfhzqo2I98UhGWtUlD2UeNHbuJZmbXeyibuoV7RhDZg9LafkOXOTojjZc9rUrd8BChoHhbW3X anil@Anils-MacBook-Pro.local\"\n  tasks:\n    - name: Check for existing SSH Key\n      ibm_pi_key_info:\n        pi_key_name: \"{{ pi_name }}-ssh-key\"\n        pi_cloud_instance_id: \"{{ pi_cloud_instance_id }}\"\n      failed_when:\n        - pi_ssh_key_existing_output.rc != 0\n        - '\"does not exist\" not in pi_ssh_key_existing_output.stderr'\n      register: pi_ssh_key_existing_output\n\n    - name: Save existing SSH Key as fact\n      set_fact:\n        cacheable: True\n        pi_ssh_key: \"{{ pi_ssh_key_existing_output.resource }}\"\n      when: pi_ssh_key_existing_output.resource.id is defined\n\n    - name: Add new SSH Key\n      ibm_pi_key:\n        pi_key_name: \"{{ pi_name }}-ssh-key\"\n        pi_ssh_key: \"{{ ssh_public_key }}\"\n        pi_cloud_instance_id: \"{{ pi_cloud_instance_id }}\"\n      register: pi_ssh_key_create_output\n      when: pi_ssh_key_existing_output.resource.id is not defined\n\n    - name: Save new SSH Key as fact\n      set_fact:\n        cacheable: True\n        pi_ssh_key: \"{{ pi_ssh_key_create_output.resource }}\"\n      when: pi_ssh_key_existing_output.resource.id is not defined\n\n    - name: Retrieve image list\n      ibm_pi_images_info:\n        pi_cloud_instance_id: \"{{ pi_cloud_instance_id }}\"\n      register: images_list\n\n    - name: Set VM image name/id dictionary fact\n      set_fact:\n        image_dict: \"{{ images_list.resource.image_info |\n                        items2dict(key_name='name',\n                        value_name='id') }}\"\n\n    - name: Check for existing network\n      ibm_pi_network_info:\n        pi_network_name: \"{{ pi_name }}-network\"\n        pi_cloud_instance_id: \"{{ pi_cloud_instance_id }}\"\n      failed_when:\n        - pi_network_existing_output.rc != 0\n        - '\"unable to get network\" not in pi_network_existing_output.stderr'\n        - '\"Error:item not found\" not in pi_network_existing_output.stderr'\n      register: pi_network_existing_output\n\n    - name: Save existing network as fact\n      set_fact:\n        cacheable: True\n        pi_network_id: \"{{ pi_network_existing_output.resource.id }}\"\n      when: pi_network_existing_output.resource.id is defined\n\n    - name: Add new network\n      ibm_pi_network:\n        pi_network_name: \"{{ pi_name }}-network\"\n        pi_network_type: \"pub-vlan\"\n        pi_cloud_instance_id: \"{{ pi_cloud_instance_id }}\"\n      register: pi_network_create_output\n      when: pi_network_existing_output.resource.id is not defined\n\n    - name: Save new network as fact\n      set_fact:\n        cacheable: True\n        pi_network_id: \"{{ pi_network_create_output.resource.network_id }}\"\n      when: pi_network_existing_output.resource.id is not defined\n\n    - name: Check for existing Virtual Server Instance\n      ibm_pi_instance_info:\n        pi_instance_name: \"{{ pi_name }}\"\n        pi_cloud_instance_id: \"{{ pi_cloud_instance_id }}\"\n      failed_when:\n        - pi_instance_existing_output.rc != 0\n        - '\"does not exist\" not in pi_instance_existing_output.stderr'\n      register: pi_instance_existing_output\n\n    - name: Save existing Power VSI fact\n      set_fact:\n        cacheable: True\n        pi_instance: \"{{ pi_instance_existing_output.resource }}\"\n      when: pi_instance_existing_output.rc == 0\n\n    - name: Create a POWER Virtual Server Instance\n      ibm_pi_instance:\n        state: available\n        pi_memory: \"{{ memory }}\"\n        pi_processors: \"{{ processors }}\"\n        pi_instance_name: \"{{ pi_name }}\"\n        pi_proc_type: \"{{ proc_type }}\"\n        pi_image_id: \"{{ image_dict[pi_image] }}\"\n        pi_volume_ids: []\n        pi_network:\n          - network_id: \"{{ pi_network_id }}\"\n        pi_key_pair_name: \"{{ pi_ssh_key.pi_key_name }}\"\n        pi_sys_type: \"{{ sys_type }}\"\n        pi_storage_type: \"{{ storage_type }}\"\n        pi_replication_policy: none\n        pi_replication_scheme: suffix\n        pi_replicants: \"1\"\n        pi_cloud_instance_id: \"{{ pi_cloud_instance_id }}\"\n        id: \"{{ pi_instance.resource.id | default(omit) }}\"\n      register: pi_instance_create_output\n      when: pi_instance_existing_output.rc != 0\n\n    - name: Check for existing Virtual Server Instance", "license": "", "module": "ibm_pi_instance_info", "output": "      ibm_pi_instance_info:\n        pi_instance_name: \"{{ pi_name }}\"\n        pi_cloud_instance_id: \"{{ pi_cloud_instance_id }}\"\n      register: pi_instance_new_output\n      when: pi_instance_create_output.resource is defined\n", "path": "examples/simple-vm-power-vs/create.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: POWER VSI Creation Demo\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  vars:\n    pi_name: ansible-demo-power-vm\n    sys_type: s922\n    pi_image: \"7200-03-03\"\n    proc_type: shared\n    processors: \"0.25\"\n    memory: \"2\"\n    storage_type: tier1\n    pi_cloud_instance_id: \"11956c6d-f7e8-4120-a403-14428405d1fe\"\n    ssh_public_key: \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC0eZ4uNSH6rtxNM7MagrBtxwlASw0iKcxDdXq9eNu93xDpsvxdn6xE/JESlIHhf9/45oLw9AKpu/MZYwqQ0O+uedwgtLvorv++fyXI36cls4xmUCuNnEhoK1aXh26N+V+lxejqF3DJhMKHYprQCnyl/8RWkWIFc2Jo60ACZ98MY4rRHgBP/0t1tqmb0I4IdBaYLctVIdv16gYJ5zqGYKeJBMG7XtgkrtOeacVoArrmjHY6n2cNgE5jLt9n9MyyGLjzq1agIpwwsWJGfhzqo2I98UhGWtUlD2UeNHbuJZmbXeyibuoV7RhDZg9LafkOXOTojjZc9rUrd8BChoHhbW3X anil@Anils-MacBook-Pro.local\"\n  tasks:\n    - name: Check for existing SSH Key\n      ibm_pi_key_info:\n        pi_key_name: \"{{ pi_name }}-ssh-key\"\n        pi_cloud_instance_id: \"{{ pi_cloud_instance_id }}\"\n      failed_when:\n        - pi_ssh_key_existing_output.rc != 0\n        - '\"does not exist\" not in pi_ssh_key_existing_output.stderr'\n      register: pi_ssh_key_existing_output\n\n    - name: Save existing SSH Key as fact\n      set_fact:\n        cacheable: True\n        pi_ssh_key: \"{{ pi_ssh_key_existing_output.resource }}\"\n      when: pi_ssh_key_existing_output.resource.id is defined\n\n    - name: Add new SSH Key\n      ibm_pi_key:\n        pi_key_name: \"{{ pi_name }}-ssh-key\"\n        pi_ssh_key: \"{{ ssh_public_key }}\"\n        pi_cloud_instance_id: \"{{ pi_cloud_instance_id }}\"\n      register: pi_ssh_key_create_output\n      when: pi_ssh_key_existing_output.resource.id is not defined\n\n    - name: Save new SSH Key as fact\n      set_fact:\n        cacheable: True\n        pi_ssh_key: \"{{ pi_ssh_key_create_output.resource }}\"\n      when: pi_ssh_key_existing_output.resource.id is not defined\n\n    - name: Retrieve image list\n      ibm_pi_images_info:\n        pi_cloud_instance_id: \"{{ pi_cloud_instance_id }}\"\n      register: images_list\n\n    - name: Set VM image name/id dictionary fact\n      set_fact:\n        image_dict: \"{{ images_list.resource.image_info |\n                        items2dict(key_name='name',\n                        value_name='id') }}\"\n\n    - name: Check for existing network\n      ibm_pi_network_info:\n        pi_network_name: \"{{ pi_name }}-network\"\n        pi_cloud_instance_id: \"{{ pi_cloud_instance_id }}\"\n      failed_when:\n        - pi_network_existing_output.rc != 0\n        - '\"unable to get network\" not in pi_network_existing_output.stderr'\n        - '\"Error:item not found\" not in pi_network_existing_output.stderr'\n      register: pi_network_existing_output\n\n    - name: Save existing network as fact\n      set_fact:\n        cacheable: True\n        pi_network_id: \"{{ pi_network_existing_output.resource.id }}\"\n      when: pi_network_existing_output.resource.id is defined\n\n    - name: Add new network\n      ibm_pi_network:\n        pi_network_name: \"{{ pi_name }}-network\"\n        pi_network_type: \"pub-vlan\"\n        pi_cloud_instance_id: \"{{ pi_cloud_instance_id }}\"\n      register: pi_network_create_output\n      when: pi_network_existing_output.resource.id is not defined\n\n    - name: Save new network as fact\n      set_fact:\n        cacheable: True\n        pi_network_id: \"{{ pi_network_create_output.resource.network_id }}\"\n      when: pi_network_existing_output.resource.id is not defined\n\n    - name: Check for existing Virtual Server Instance\n      ibm_pi_instance_info:\n        pi_instance_name: \"{{ pi_name }}\"\n        pi_cloud_instance_id: \"{{ pi_cloud_instance_id }}\"\n      failed_when:\n        - pi_instance_existing_output.rc != 0\n        - '\"does not exist\" not in pi_instance_existing_output.stderr'\n      register: pi_instance_existing_output\n\n    - name: Save existing Power VSI fact\n      set_fact:\n        cacheable: True\n        pi_instance: \"{{ pi_instance_existing_output.resource }}\"\n      when: pi_instance_existing_output.rc == 0\n\n    - name: Create a POWER Virtual Server Instance\n      ibm_pi_instance:\n        state: available\n        pi_memory: \"{{ memory }}\"\n        pi_processors: \"{{ processors }}\"\n        pi_instance_name: \"{{ pi_name }}\"\n        pi_proc_type: \"{{ proc_type }}\"\n        pi_image_id: \"{{ image_dict[pi_image] }}\"\n        pi_volume_ids: []\n        pi_network:\n          - network_id: \"{{ pi_network_id }}\"\n        pi_key_pair_name: \"{{ pi_ssh_key.pi_key_name }}\"\n        pi_sys_type: \"{{ sys_type }}\"\n        pi_storage_type: \"{{ storage_type }}\"\n        pi_replication_policy: none\n        pi_replication_scheme: suffix\n        pi_replicants: \"1\"\n        pi_cloud_instance_id: \"{{ pi_cloud_instance_id }}\"\n        id: \"{{ pi_instance.resource.id | default(omit) }}\"\n      register: pi_instance_create_output\n      when: pi_instance_existing_output.rc != 0\n\n    - name: Check for existing Virtual Server Instance\n      ibm_pi_instance_info:\n        pi_instance_name: \"{{ pi_name }}\"\n        pi_cloud_instance_id: \"{{ pi_cloud_instance_id }}\"\n      register: pi_instance_new_output\n      when: pi_instance_create_output.resource is defined\n\n    - name: Save new Power VSI fact", "license": "", "module": "set_fact", "output": "      set_fact:\n        cacheable: True\n        pi_instance: \"{{ pi_instance_new_output.resource }}\"\n      when: pi_instance_new_output.resource is defined\n", "path": "examples/simple-vm-power-vs/create.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: POWER VSI Creation Demo\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  vars:\n    pi_name: ansible-demo-power-vm\n    sys_type: s922\n    pi_image: \"7200-03-03\"\n    proc_type: shared\n    processors: \"0.25\"\n    memory: \"2\"\n    storage_type: tier1\n    pi_cloud_instance_id: \"11956c6d-f7e8-4120-a403-14428405d1fe\"\n    ssh_public_key: \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC0eZ4uNSH6rtxNM7MagrBtxwlASw0iKcxDdXq9eNu93xDpsvxdn6xE/JESlIHhf9/45oLw9AKpu/MZYwqQ0O+uedwgtLvorv++fyXI36cls4xmUCuNnEhoK1aXh26N+V+lxejqF3DJhMKHYprQCnyl/8RWkWIFc2Jo60ACZ98MY4rRHgBP/0t1tqmb0I4IdBaYLctVIdv16gYJ5zqGYKeJBMG7XtgkrtOeacVoArrmjHY6n2cNgE5jLt9n9MyyGLjzq1agIpwwsWJGfhzqo2I98UhGWtUlD2UeNHbuJZmbXeyibuoV7RhDZg9LafkOXOTojjZc9rUrd8BChoHhbW3X anil@Anils-MacBook-Pro.local\"\n  tasks:\n    - name: Check for existing SSH Key\n      ibm_pi_key_info:\n        pi_key_name: \"{{ pi_name }}-ssh-key\"\n        pi_cloud_instance_id: \"{{ pi_cloud_instance_id }}\"\n      failed_when:\n        - pi_ssh_key_existing_output.rc != 0\n        - '\"does not exist\" not in pi_ssh_key_existing_output.stderr'\n      register: pi_ssh_key_existing_output\n\n    - name: Save existing SSH Key as fact\n      set_fact:\n        cacheable: True\n        pi_ssh_key: \"{{ pi_ssh_key_existing_output.resource }}\"\n      when: pi_ssh_key_existing_output.resource.id is defined\n\n    - name: Add new SSH Key\n      ibm_pi_key:\n        pi_key_name: \"{{ pi_name }}-ssh-key\"\n        pi_ssh_key: \"{{ ssh_public_key }}\"\n        pi_cloud_instance_id: \"{{ pi_cloud_instance_id }}\"\n      register: pi_ssh_key_create_output\n      when: pi_ssh_key_existing_output.resource.id is not defined\n\n    - name: Save new SSH Key as fact\n      set_fact:\n        cacheable: True\n        pi_ssh_key: \"{{ pi_ssh_key_create_output.resource }}\"\n      when: pi_ssh_key_existing_output.resource.id is not defined\n\n    - name: Retrieve image list\n      ibm_pi_images_info:\n        pi_cloud_instance_id: \"{{ pi_cloud_instance_id }}\"\n      register: images_list\n\n    - name: Set VM image name/id dictionary fact\n      set_fact:\n        image_dict: \"{{ images_list.resource.image_info |\n                        items2dict(key_name='name',\n                        value_name='id') }}\"\n\n    - name: Check for existing network\n      ibm_pi_network_info:\n        pi_network_name: \"{{ pi_name }}-network\"\n        pi_cloud_instance_id: \"{{ pi_cloud_instance_id }}\"\n      failed_when:\n        - pi_network_existing_output.rc != 0\n        - '\"unable to get network\" not in pi_network_existing_output.stderr'\n        - '\"Error:item not found\" not in pi_network_existing_output.stderr'\n      register: pi_network_existing_output\n\n    - name: Save existing network as fact\n      set_fact:\n        cacheable: True\n        pi_network_id: \"{{ pi_network_existing_output.resource.id }}\"\n      when: pi_network_existing_output.resource.id is defined\n\n    - name: Add new network\n      ibm_pi_network:\n        pi_network_name: \"{{ pi_name }}-network\"\n        pi_network_type: \"pub-vlan\"\n        pi_cloud_instance_id: \"{{ pi_cloud_instance_id }}\"\n      register: pi_network_create_output\n      when: pi_network_existing_output.resource.id is not defined\n\n    - name: Save new network as fact\n      set_fact:\n        cacheable: True\n        pi_network_id: \"{{ pi_network_create_output.resource.network_id }}\"\n      when: pi_network_existing_output.resource.id is not defined\n\n    - name: Check for existing Virtual Server Instance\n      ibm_pi_instance_info:\n        pi_instance_name: \"{{ pi_name }}\"\n        pi_cloud_instance_id: \"{{ pi_cloud_instance_id }}\"\n      failed_when:\n        - pi_instance_existing_output.rc != 0\n        - '\"does not exist\" not in pi_instance_existing_output.stderr'\n      register: pi_instance_existing_output\n\n    - name: Save existing Power VSI fact\n      set_fact:\n        cacheable: True\n        pi_instance: \"{{ pi_instance_existing_output.resource }}\"\n      when: pi_instance_existing_output.rc == 0\n\n    - name: Create a POWER Virtual Server Instance\n      ibm_pi_instance:\n        state: available\n        pi_memory: \"{{ memory }}\"\n        pi_processors: \"{{ processors }}\"\n        pi_instance_name: \"{{ pi_name }}\"\n        pi_proc_type: \"{{ proc_type }}\"\n        pi_image_id: \"{{ image_dict[pi_image] }}\"\n        pi_volume_ids: []\n        pi_network:\n          - network_id: \"{{ pi_network_id }}\"\n        pi_key_pair_name: \"{{ pi_ssh_key.pi_key_name }}\"\n        pi_sys_type: \"{{ sys_type }}\"\n        pi_storage_type: \"{{ storage_type }}\"\n        pi_replication_policy: none\n        pi_replication_scheme: suffix\n        pi_replicants: \"1\"\n        pi_cloud_instance_id: \"{{ pi_cloud_instance_id }}\"\n        id: \"{{ pi_instance.resource.id | default(omit) }}\"\n      register: pi_instance_create_output\n      when: pi_instance_existing_output.rc != 0\n\n    - name: Check for existing Virtual Server Instance\n      ibm_pi_instance_info:\n        pi_instance_name: \"{{ pi_name }}\"\n        pi_cloud_instance_id: \"{{ pi_cloud_instance_id }}\"\n      register: pi_instance_new_output\n      when: pi_instance_create_output.resource is defined\n\n    - name: Save new Power VSI fact\n      set_fact:\n        cacheable: True\n        pi_instance: \"{{ pi_instance_new_output.resource }}\"\n      when: pi_instance_new_output.resource is defined\n\n    - name: Print Public IP Address", "license": "", "module": "debug", "output": "      debug:\n        var: pi_instance.addresses[0].external_ip\n", "path": "examples/simple-vm-power-vs/create.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: POWER VSI Creation Demo\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  vars:\n    pi_name: ansible-demo-power-vm\n    sys_type: s922\n    pi_image: \"7200-03-03\"\n    proc_type: shared\n    processors: \"0.25\"\n    memory: \"2\"\n    storage_type: tier1\n    pi_cloud_instance_id: \"11956c6d-f7e8-4120-a403-14428405d1fe\"\n    ssh_public_key: \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC0eZ4uNSH6rtxNM7MagrBtxwlASw0iKcxDdXq9eNu93xDpsvxdn6xE/JESlIHhf9/45oLw9AKpu/MZYwqQ0O+uedwgtLvorv++fyXI36cls4xmUCuNnEhoK1aXh26N+V+lxejqF3DJhMKHYprQCnyl/8RWkWIFc2Jo60ACZ98MY4rRHgBP/0t1tqmb0I4IdBaYLctVIdv16gYJ5zqGYKeJBMG7XtgkrtOeacVoArrmjHY6n2cNgE5jLt9n9MyyGLjzq1agIpwwsWJGfhzqo2I98UhGWtUlD2UeNHbuJZmbXeyibuoV7RhDZg9LafkOXOTojjZc9rUrd8BChoHhbW3X anil@Anils-MacBook-Pro.local\"\n  tasks:\n    - name: Check for existing SSH Key\n      ibm_pi_key_info:\n        pi_key_name: \"{{ pi_name }}-ssh-key\"\n        pi_cloud_instance_id: \"{{ pi_cloud_instance_id }}\"\n      failed_when:\n        - pi_ssh_key_existing_output.rc != 0\n        - '\"does not exist\" not in pi_ssh_key_existing_output.stderr'\n      register: pi_ssh_key_existing_output\n\n    - name: Save existing SSH Key as fact\n      set_fact:\n        cacheable: True\n        pi_ssh_key: \"{{ pi_ssh_key_existing_output.resource }}\"\n      when: pi_ssh_key_existing_output.resource.id is defined\n\n    - name: Add new SSH Key\n      ibm_pi_key:\n        pi_key_name: \"{{ pi_name }}-ssh-key\"\n        pi_ssh_key: \"{{ ssh_public_key }}\"\n        pi_cloud_instance_id: \"{{ pi_cloud_instance_id }}\"\n      register: pi_ssh_key_create_output\n      when: pi_ssh_key_existing_output.resource.id is not defined\n\n    - name: Save new SSH Key as fact\n      set_fact:\n        cacheable: True\n        pi_ssh_key: \"{{ pi_ssh_key_create_output.resource }}\"\n      when: pi_ssh_key_existing_output.resource.id is not defined\n\n    - name: Retrieve image list\n      ibm_pi_images_info:\n        pi_cloud_instance_id: \"{{ pi_cloud_instance_id }}\"\n      register: images_list\n\n    - name: Set VM image name/id dictionary fact\n      set_fact:\n        image_dict: \"{{ images_list.resource.image_info |\n                        items2dict(key_name='name',\n                        value_name='id') }}\"\n\n    - name: Check for existing network\n      ibm_pi_network_info:\n        pi_network_name: \"{{ pi_name }}-network\"\n        pi_cloud_instance_id: \"{{ pi_cloud_instance_id }}\"\n      failed_when:\n        - pi_network_existing_output.rc != 0\n        - '\"unable to get network\" not in pi_network_existing_output.stderr'\n        - '\"Error:item not found\" not in pi_network_existing_output.stderr'\n      register: pi_network_existing_output\n\n    - name: Save existing network as fact\n      set_fact:\n        cacheable: True\n        pi_network_id: \"{{ pi_network_existing_output.resource.id }}\"\n      when: pi_network_existing_output.resource.id is defined\n\n    - name: Add new network\n      ibm_pi_network:\n        pi_network_name: \"{{ pi_name }}-network\"\n        pi_network_type: \"pub-vlan\"\n        pi_cloud_instance_id: \"{{ pi_cloud_instance_id }}\"\n      register: pi_network_create_output\n      when: pi_network_existing_output.resource.id is not defined\n\n    - name: Save new network as fact\n      set_fact:\n        cacheable: True\n        pi_network_id: \"{{ pi_network_create_output.resource.network_id }}\"\n      when: pi_network_existing_output.resource.id is not defined\n\n    - name: Check for existing Virtual Server Instance\n      ibm_pi_instance_info:\n        pi_instance_name: \"{{ pi_name }}\"\n        pi_cloud_instance_id: \"{{ pi_cloud_instance_id }}\"\n      failed_when:\n        - pi_instance_existing_output.rc != 0\n        - '\"does not exist\" not in pi_instance_existing_output.stderr'\n      register: pi_instance_existing_output\n\n    - name: Save existing Power VSI fact\n      set_fact:\n        cacheable: True\n        pi_instance: \"{{ pi_instance_existing_output.resource }}\"\n      when: pi_instance_existing_output.rc == 0\n\n    - name: Create a POWER Virtual Server Instance\n      ibm_pi_instance:\n        state: available\n        pi_memory: \"{{ memory }}\"\n        pi_processors: \"{{ processors }}\"\n        pi_instance_name: \"{{ pi_name }}\"\n        pi_proc_type: \"{{ proc_type }}\"\n        pi_image_id: \"{{ image_dict[pi_image] }}\"\n        pi_volume_ids: []\n        pi_network:\n          - network_id: \"{{ pi_network_id }}\"\n        pi_key_pair_name: \"{{ pi_ssh_key.pi_key_name }}\"\n        pi_sys_type: \"{{ sys_type }}\"\n        pi_storage_type: \"{{ storage_type }}\"\n        pi_replication_policy: none\n        pi_replication_scheme: suffix\n        pi_replicants: \"1\"\n        pi_cloud_instance_id: \"{{ pi_cloud_instance_id }}\"\n        id: \"{{ pi_instance.resource.id | default(omit) }}\"\n      register: pi_instance_create_output\n      when: pi_instance_existing_output.rc != 0\n\n    - name: Check for existing Virtual Server Instance\n      ibm_pi_instance_info:\n        pi_instance_name: \"{{ pi_name }}\"\n        pi_cloud_instance_id: \"{{ pi_cloud_instance_id }}\"\n      register: pi_instance_new_output\n      when: pi_instance_create_output.resource is defined\n\n    - name: Save new Power VSI fact\n      set_fact:\n        cacheable: True\n        pi_instance: \"{{ pi_instance_new_output.resource }}\"\n      when: pi_instance_new_output.resource is defined\n\n    - name: Print Public IP Address\n      debug:\n        var: pi_instance.addresses[0].external_ip\n\n    - name: Add VSI to Ansible inventory", "license": "", "module": "add_host", "output": "      add_host:\n        name: \"{{ pi_instance.addresses[0].external_ip }}\"\n        ansible_user: root\n        groups: new_vsi\n        ansible_ssh_extra_args: -o StrictHostKeyChecking=no\n", "path": "examples/simple-vm-power-vs/create.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: POWER VSI Creation Demo\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  vars:\n    pi_name: ansible-demo-power-vm\n    sys_type: s922\n    pi_image: \"7200-03-03\"\n    proc_type: shared\n    processors: \"0.25\"\n    memory: \"2\"\n    storage_type: tier1\n    pi_cloud_instance_id: \"11956c6d-f7e8-4120-a403-14428405d1fe\"\n    ssh_public_key: \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC0eZ4uNSH6rtxNM7MagrBtxwlASw0iKcxDdXq9eNu93xDpsvxdn6xE/JESlIHhf9/45oLw9AKpu/MZYwqQ0O+uedwgtLvorv++fyXI36cls4xmUCuNnEhoK1aXh26N+V+lxejqF3DJhMKHYprQCnyl/8RWkWIFc2Jo60ACZ98MY4rRHgBP/0t1tqmb0I4IdBaYLctVIdv16gYJ5zqGYKeJBMG7XtgkrtOeacVoArrmjHY6n2cNgE5jLt9n9MyyGLjzq1agIpwwsWJGfhzqo2I98UhGWtUlD2UeNHbuJZmbXeyibuoV7RhDZg9LafkOXOTojjZc9rUrd8BChoHhbW3X anil@Anils-MacBook-Pro.local\"\n  tasks:\n    - name: Check for existing SSH Key\n      ibm_pi_key_info:\n        pi_key_name: \"{{ pi_name }}-ssh-key\"\n        pi_cloud_instance_id: \"{{ pi_cloud_instance_id }}\"\n      failed_when:\n        - pi_ssh_key_existing_output.rc != 0\n        - '\"does not exist\" not in pi_ssh_key_existing_output.stderr'\n      register: pi_ssh_key_existing_output\n\n    - name: Save existing SSH Key as fact\n      set_fact:\n        cacheable: True\n        pi_ssh_key: \"{{ pi_ssh_key_existing_output.resource }}\"\n      when: pi_ssh_key_existing_output.resource.id is defined\n\n    - name: Add new SSH Key\n      ibm_pi_key:\n        pi_key_name: \"{{ pi_name }}-ssh-key\"\n        pi_ssh_key: \"{{ ssh_public_key }}\"\n        pi_cloud_instance_id: \"{{ pi_cloud_instance_id }}\"\n      register: pi_ssh_key_create_output\n      when: pi_ssh_key_existing_output.resource.id is not defined\n\n    - name: Save new SSH Key as fact\n      set_fact:\n        cacheable: True\n        pi_ssh_key: \"{{ pi_ssh_key_create_output.resource }}\"\n      when: pi_ssh_key_existing_output.resource.id is not defined\n\n    - name: Retrieve image list\n      ibm_pi_images_info:\n        pi_cloud_instance_id: \"{{ pi_cloud_instance_id }}\"\n      register: images_list\n\n    - name: Set VM image name/id dictionary fact\n      set_fact:\n        image_dict: \"{{ images_list.resource.image_info |\n                        items2dict(key_name='name',\n                        value_name='id') }}\"\n\n    - name: Check for existing network\n      ibm_pi_network_info:\n        pi_network_name: \"{{ pi_name }}-network\"\n        pi_cloud_instance_id: \"{{ pi_cloud_instance_id }}\"\n      failed_when:\n        - pi_network_existing_output.rc != 0\n        - '\"unable to get network\" not in pi_network_existing_output.stderr'\n        - '\"Error:item not found\" not in pi_network_existing_output.stderr'\n      register: pi_network_existing_output\n\n    - name: Save existing network as fact\n      set_fact:\n        cacheable: True\n        pi_network_id: \"{{ pi_network_existing_output.resource.id }}\"\n      when: pi_network_existing_output.resource.id is defined\n\n    - name: Add new network\n      ibm_pi_network:\n        pi_network_name: \"{{ pi_name }}-network\"\n        pi_network_type: \"pub-vlan\"\n        pi_cloud_instance_id: \"{{ pi_cloud_instance_id }}\"\n      register: pi_network_create_output\n      when: pi_network_existing_output.resource.id is not defined\n\n    - name: Save new network as fact\n      set_fact:\n        cacheable: True\n        pi_network_id: \"{{ pi_network_create_output.resource.network_id }}\"\n      when: pi_network_existing_output.resource.id is not defined\n\n    - name: Check for existing Virtual Server Instance\n      ibm_pi_instance_info:\n        pi_instance_name: \"{{ pi_name }}\"\n        pi_cloud_instance_id: \"{{ pi_cloud_instance_id }}\"\n      failed_when:\n        - pi_instance_existing_output.rc != 0\n        - '\"does not exist\" not in pi_instance_existing_output.stderr'\n      register: pi_instance_existing_output\n\n    - name: Save existing Power VSI fact\n      set_fact:\n        cacheable: True\n        pi_instance: \"{{ pi_instance_existing_output.resource }}\"\n      when: pi_instance_existing_output.rc == 0\n\n    - name: Create a POWER Virtual Server Instance\n      ibm_pi_instance:\n        state: available\n        pi_memory: \"{{ memory }}\"\n        pi_processors: \"{{ processors }}\"\n        pi_instance_name: \"{{ pi_name }}\"\n        pi_proc_type: \"{{ proc_type }}\"\n        pi_image_id: \"{{ image_dict[pi_image] }}\"\n        pi_volume_ids: []\n        pi_network:\n          - network_id: \"{{ pi_network_id }}\"\n        pi_key_pair_name: \"{{ pi_ssh_key.pi_key_name }}\"\n        pi_sys_type: \"{{ sys_type }}\"\n        pi_storage_type: \"{{ storage_type }}\"\n        pi_replication_policy: none\n        pi_replication_scheme: suffix\n        pi_replicants: \"1\"\n        pi_cloud_instance_id: \"{{ pi_cloud_instance_id }}\"\n        id: \"{{ pi_instance.resource.id | default(omit) }}\"\n      register: pi_instance_create_output\n      when: pi_instance_existing_output.rc != 0\n\n    - name: Check for existing Virtual Server Instance\n      ibm_pi_instance_info:\n        pi_instance_name: \"{{ pi_name }}\"\n        pi_cloud_instance_id: \"{{ pi_cloud_instance_id }}\"\n      register: pi_instance_new_output\n      when: pi_instance_create_output.resource is defined\n\n    - name: Save new Power VSI fact\n      set_fact:\n        cacheable: True\n        pi_instance: \"{{ pi_instance_new_output.resource }}\"\n      when: pi_instance_new_output.resource is defined\n\n    - name: Print Public IP Address\n      debug:\n        var: pi_instance.addresses[0].external_ip\n\n    - name: Add VSI to Ansible inventory\n      add_host:\n        name: \"{{ pi_instance.addresses[0].external_ip }}\"\n        ansible_user: root\n        groups: new_vsi\n        ansible_ssh_extra_args: -o StrictHostKeyChecking=no\n\n- name: Connect to VSI\n  hosts: new_vsi\n  gather_facts: False\n  tasks:\n    - name: Wait for VSI to become reachable over SSH", "license": "", "module": "wait_for_connection", "output": "      wait_for_connection:\n", "path": "examples/simple-vm-power-vs/create.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: POWER VSI Creation Demo\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  vars:\n    pi_name: ansible-demo-power-vm\n    sys_type: s922\n    pi_image: \"7200-03-03\"\n    proc_type: shared\n    processors: \"0.25\"\n    memory: \"2\"\n    storage_type: tier1\n    pi_cloud_instance_id: \"11956c6d-f7e8-4120-a403-14428405d1fe\"\n    ssh_public_key: \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC0eZ4uNSH6rtxNM7MagrBtxwlASw0iKcxDdXq9eNu93xDpsvxdn6xE/JESlIHhf9/45oLw9AKpu/MZYwqQ0O+uedwgtLvorv++fyXI36cls4xmUCuNnEhoK1aXh26N+V+lxejqF3DJhMKHYprQCnyl/8RWkWIFc2Jo60ACZ98MY4rRHgBP/0t1tqmb0I4IdBaYLctVIdv16gYJ5zqGYKeJBMG7XtgkrtOeacVoArrmjHY6n2cNgE5jLt9n9MyyGLjzq1agIpwwsWJGfhzqo2I98UhGWtUlD2UeNHbuJZmbXeyibuoV7RhDZg9LafkOXOTojjZc9rUrd8BChoHhbW3X anil@Anils-MacBook-Pro.local\"\n  tasks:\n    - name: Check for existing SSH Key\n      ibm_pi_key_info:\n        pi_key_name: \"{{ pi_name }}-ssh-key\"\n        pi_cloud_instance_id: \"{{ pi_cloud_instance_id }}\"\n      failed_when:\n        - pi_ssh_key_existing_output.rc != 0\n        - '\"does not exist\" not in pi_ssh_key_existing_output.stderr'\n      register: pi_ssh_key_existing_output\n\n    - name: Save existing SSH Key as fact\n      set_fact:\n        cacheable: True\n        pi_ssh_key: \"{{ pi_ssh_key_existing_output.resource }}\"\n      when: pi_ssh_key_existing_output.resource.id is defined\n\n    - name: Add new SSH Key\n      ibm_pi_key:\n        pi_key_name: \"{{ pi_name }}-ssh-key\"\n        pi_ssh_key: \"{{ ssh_public_key }}\"\n        pi_cloud_instance_id: \"{{ pi_cloud_instance_id }}\"\n      register: pi_ssh_key_create_output\n      when: pi_ssh_key_existing_output.resource.id is not defined\n\n    - name: Save new SSH Key as fact\n      set_fact:\n        cacheable: True\n        pi_ssh_key: \"{{ pi_ssh_key_create_output.resource }}\"\n      when: pi_ssh_key_existing_output.resource.id is not defined\n\n    - name: Retrieve image list\n      ibm_pi_images_info:\n        pi_cloud_instance_id: \"{{ pi_cloud_instance_id }}\"\n      register: images_list\n\n    - name: Set VM image name/id dictionary fact\n      set_fact:\n        image_dict: \"{{ images_list.resource.image_info |\n                        items2dict(key_name='name',\n                        value_name='id') }}\"\n\n    - name: Check for existing network\n      ibm_pi_network_info:\n        pi_network_name: \"{{ pi_name }}-network\"\n        pi_cloud_instance_id: \"{{ pi_cloud_instance_id }}\"\n      failed_when:\n        - pi_network_existing_output.rc != 0\n        - '\"unable to get network\" not in pi_network_existing_output.stderr'\n        - '\"Error:item not found\" not in pi_network_existing_output.stderr'\n      register: pi_network_existing_output\n\n    - name: Save existing network as fact\n      set_fact:\n        cacheable: True\n        pi_network_id: \"{{ pi_network_existing_output.resource.id }}\"\n      when: pi_network_existing_output.resource.id is defined\n\n    - name: Add new network\n      ibm_pi_network:\n        pi_network_name: \"{{ pi_name }}-network\"\n        pi_network_type: \"pub-vlan\"\n        pi_cloud_instance_id: \"{{ pi_cloud_instance_id }}\"\n      register: pi_network_create_output\n      when: pi_network_existing_output.resource.id is not defined\n\n    - name: Save new network as fact\n      set_fact:\n        cacheable: True\n        pi_network_id: \"{{ pi_network_create_output.resource.network_id }}\"\n      when: pi_network_existing_output.resource.id is not defined\n\n    - name: Check for existing Virtual Server Instance\n      ibm_pi_instance_info:\n        pi_instance_name: \"{{ pi_name }}\"\n        pi_cloud_instance_id: \"{{ pi_cloud_instance_id }}\"\n      failed_when:\n        - pi_instance_existing_output.rc != 0\n        - '\"does not exist\" not in pi_instance_existing_output.stderr'\n      register: pi_instance_existing_output\n\n    - name: Save existing Power VSI fact\n      set_fact:\n        cacheable: True\n        pi_instance: \"{{ pi_instance_existing_output.resource }}\"\n      when: pi_instance_existing_output.rc == 0\n\n    - name: Create a POWER Virtual Server Instance\n      ibm_pi_instance:\n        state: available\n        pi_memory: \"{{ memory }}\"\n        pi_processors: \"{{ processors }}\"\n        pi_instance_name: \"{{ pi_name }}\"\n        pi_proc_type: \"{{ proc_type }}\"\n        pi_image_id: \"{{ image_dict[pi_image] }}\"\n        pi_volume_ids: []\n        pi_network:\n          - network_id: \"{{ pi_network_id }}\"\n        pi_key_pair_name: \"{{ pi_ssh_key.pi_key_name }}\"\n        pi_sys_type: \"{{ sys_type }}\"\n        pi_storage_type: \"{{ storage_type }}\"\n        pi_replication_policy: none\n        pi_replication_scheme: suffix\n        pi_replicants: \"1\"\n        pi_cloud_instance_id: \"{{ pi_cloud_instance_id }}\"\n        id: \"{{ pi_instance.resource.id | default(omit) }}\"\n      register: pi_instance_create_output\n      when: pi_instance_existing_output.rc != 0\n\n    - name: Check for existing Virtual Server Instance\n      ibm_pi_instance_info:\n        pi_instance_name: \"{{ pi_name }}\"\n        pi_cloud_instance_id: \"{{ pi_cloud_instance_id }}\"\n      register: pi_instance_new_output\n      when: pi_instance_create_output.resource is defined\n\n    - name: Save new Power VSI fact\n      set_fact:\n        cacheable: True\n        pi_instance: \"{{ pi_instance_new_output.resource }}\"\n      when: pi_instance_new_output.resource is defined\n\n    - name: Print Public IP Address\n      debug:\n        var: pi_instance.addresses[0].external_ip\n\n    - name: Add VSI to Ansible inventory\n      add_host:\n        name: \"{{ pi_instance.addresses[0].external_ip }}\"\n        ansible_user: root\n        groups: new_vsi\n        ansible_ssh_extra_args: -o StrictHostKeyChecking=no\n\n- name: Connect to VSI\n  hosts: new_vsi\n  gather_facts: False\n  tasks:\n    - name: Wait for VSI to become reachable over SSH\n      wait_for_connection:\n\n    - name: Collect OS login message", "license": "", "module": "command", "output": "      command: cat /etc/motd\n      register: os_motd\n", "path": "examples/simple-vm-power-vs/create.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: POWER VSI Creation Demo\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  vars:\n    pi_name: ansible-demo-power-vm\n    sys_type: s922\n    pi_image: \"7200-03-03\"\n    proc_type: shared\n    processors: \"0.25\"\n    memory: \"2\"\n    storage_type: tier1\n    pi_cloud_instance_id: \"11956c6d-f7e8-4120-a403-14428405d1fe\"\n    ssh_public_key: \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC0eZ4uNSH6rtxNM7MagrBtxwlASw0iKcxDdXq9eNu93xDpsvxdn6xE/JESlIHhf9/45oLw9AKpu/MZYwqQ0O+uedwgtLvorv++fyXI36cls4xmUCuNnEhoK1aXh26N+V+lxejqF3DJhMKHYprQCnyl/8RWkWIFc2Jo60ACZ98MY4rRHgBP/0t1tqmb0I4IdBaYLctVIdv16gYJ5zqGYKeJBMG7XtgkrtOeacVoArrmjHY6n2cNgE5jLt9n9MyyGLjzq1agIpwwsWJGfhzqo2I98UhGWtUlD2UeNHbuJZmbXeyibuoV7RhDZg9LafkOXOTojjZc9rUrd8BChoHhbW3X anil@Anils-MacBook-Pro.local\"\n  tasks:\n    - name: Check for existing SSH Key\n      ibm_pi_key_info:\n        pi_key_name: \"{{ pi_name }}-ssh-key\"\n        pi_cloud_instance_id: \"{{ pi_cloud_instance_id }}\"\n      failed_when:\n        - pi_ssh_key_existing_output.rc != 0\n        - '\"does not exist\" not in pi_ssh_key_existing_output.stderr'\n      register: pi_ssh_key_existing_output\n\n    - name: Save existing SSH Key as fact\n      set_fact:\n        cacheable: True\n        pi_ssh_key: \"{{ pi_ssh_key_existing_output.resource }}\"\n      when: pi_ssh_key_existing_output.resource.id is defined\n\n    - name: Add new SSH Key\n      ibm_pi_key:\n        pi_key_name: \"{{ pi_name }}-ssh-key\"\n        pi_ssh_key: \"{{ ssh_public_key }}\"\n        pi_cloud_instance_id: \"{{ pi_cloud_instance_id }}\"\n      register: pi_ssh_key_create_output\n      when: pi_ssh_key_existing_output.resource.id is not defined\n\n    - name: Save new SSH Key as fact\n      set_fact:\n        cacheable: True\n        pi_ssh_key: \"{{ pi_ssh_key_create_output.resource }}\"\n      when: pi_ssh_key_existing_output.resource.id is not defined\n\n    - name: Retrieve image list\n      ibm_pi_images_info:\n        pi_cloud_instance_id: \"{{ pi_cloud_instance_id }}\"\n      register: images_list\n\n    - name: Set VM image name/id dictionary fact\n      set_fact:\n        image_dict: \"{{ images_list.resource.image_info |\n                        items2dict(key_name='name',\n                        value_name='id') }}\"\n\n    - name: Check for existing network\n      ibm_pi_network_info:\n        pi_network_name: \"{{ pi_name }}-network\"\n        pi_cloud_instance_id: \"{{ pi_cloud_instance_id }}\"\n      failed_when:\n        - pi_network_existing_output.rc != 0\n        - '\"unable to get network\" not in pi_network_existing_output.stderr'\n        - '\"Error:item not found\" not in pi_network_existing_output.stderr'\n      register: pi_network_existing_output\n\n    - name: Save existing network as fact\n      set_fact:\n        cacheable: True\n        pi_network_id: \"{{ pi_network_existing_output.resource.id }}\"\n      when: pi_network_existing_output.resource.id is defined\n\n    - name: Add new network\n      ibm_pi_network:\n        pi_network_name: \"{{ pi_name }}-network\"\n        pi_network_type: \"pub-vlan\"\n        pi_cloud_instance_id: \"{{ pi_cloud_instance_id }}\"\n      register: pi_network_create_output\n      when: pi_network_existing_output.resource.id is not defined\n\n    - name: Save new network as fact\n      set_fact:\n        cacheable: True\n        pi_network_id: \"{{ pi_network_create_output.resource.network_id }}\"\n      when: pi_network_existing_output.resource.id is not defined\n\n    - name: Check for existing Virtual Server Instance\n      ibm_pi_instance_info:\n        pi_instance_name: \"{{ pi_name }}\"\n        pi_cloud_instance_id: \"{{ pi_cloud_instance_id }}\"\n      failed_when:\n        - pi_instance_existing_output.rc != 0\n        - '\"does not exist\" not in pi_instance_existing_output.stderr'\n      register: pi_instance_existing_output\n\n    - name: Save existing Power VSI fact\n      set_fact:\n        cacheable: True\n        pi_instance: \"{{ pi_instance_existing_output.resource }}\"\n      when: pi_instance_existing_output.rc == 0\n\n    - name: Create a POWER Virtual Server Instance\n      ibm_pi_instance:\n        state: available\n        pi_memory: \"{{ memory }}\"\n        pi_processors: \"{{ processors }}\"\n        pi_instance_name: \"{{ pi_name }}\"\n        pi_proc_type: \"{{ proc_type }}\"\n        pi_image_id: \"{{ image_dict[pi_image] }}\"\n        pi_volume_ids: []\n        pi_network:\n          - network_id: \"{{ pi_network_id }}\"\n        pi_key_pair_name: \"{{ pi_ssh_key.pi_key_name }}\"\n        pi_sys_type: \"{{ sys_type }}\"\n        pi_storage_type: \"{{ storage_type }}\"\n        pi_replication_policy: none\n        pi_replication_scheme: suffix\n        pi_replicants: \"1\"\n        pi_cloud_instance_id: \"{{ pi_cloud_instance_id }}\"\n        id: \"{{ pi_instance.resource.id | default(omit) }}\"\n      register: pi_instance_create_output\n      when: pi_instance_existing_output.rc != 0\n\n    - name: Check for existing Virtual Server Instance\n      ibm_pi_instance_info:\n        pi_instance_name: \"{{ pi_name }}\"\n        pi_cloud_instance_id: \"{{ pi_cloud_instance_id }}\"\n      register: pi_instance_new_output\n      when: pi_instance_create_output.resource is defined\n\n    - name: Save new Power VSI fact\n      set_fact:\n        cacheable: True\n        pi_instance: \"{{ pi_instance_new_output.resource }}\"\n      when: pi_instance_new_output.resource is defined\n\n    - name: Print Public IP Address\n      debug:\n        var: pi_instance.addresses[0].external_ip\n\n    - name: Add VSI to Ansible inventory\n      add_host:\n        name: \"{{ pi_instance.addresses[0].external_ip }}\"\n        ansible_user: root\n        groups: new_vsi\n        ansible_ssh_extra_args: -o StrictHostKeyChecking=no\n\n- name: Connect to VSI\n  hosts: new_vsi\n  gather_facts: False\n  tasks:\n    - name: Wait for VSI to become reachable over SSH\n      wait_for_connection:\n\n    - name: Collect OS login message\n      command: cat /etc/motd\n      register: os_motd\n\n    - name: Print MOTD", "license": "", "module": "debug", "output": "      debug:\n        var: os_motd.stdout_lines", "path": "examples/simple-vm-power-vs/create.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: Create IBM Cloud VPC VSI\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n    - name: Fetch the variables from var file", "license": "", "module": "include_vars", "output": "      include_vars:\n        file: vars.yml\n", "path": "examples/simple-vm-ssh/create.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: Create IBM Cloud VPC VSI\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n    - name: Fetch the variables from var file\n      include_vars:\n        file: vars.yml\n\n    - name: Checking for existing VPC", "license": "", "module": "ibm_is_vpc_info", "output": "      ibm_is_vpc_info:\n        name: \"{{ vpc_name }}\"\n      failed_when:\n        - vpc.rc != 0\n        - '\"No VPC found\" not in vpc.stderr'\n      register: vpc\n", "path": "examples/simple-vm-ssh/create.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: Create IBM Cloud VPC VSI\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n    - name: Fetch the variables from var file\n      include_vars:\n        file: vars.yml\n\n    - name: Checking for existing VPC\n      ibm_is_vpc_info:\n        name: \"{{ vpc_name }}\"\n      failed_when:\n        - vpc.rc != 0\n        - '\"No VPC found\" not in vpc.stderr'\n      register: vpc\n\n    - name: Configure VPC", "license": "", "module": "ibm_is_vpc", "output": "      ibm_is_vpc:\n        name: \"{{ vpc_name }}\"\n        state: available\n        id: \"{{ vpc.resource.id | default(omit) }}\"\n      register: vpc\n", "path": "examples/simple-vm-ssh/create.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: Create IBM Cloud VPC VSI\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n    - name: Fetch the variables from var file\n      include_vars:\n        file: vars.yml\n\n    - name: Checking for existing VPC\n      ibm_is_vpc_info:\n        name: \"{{ vpc_name }}\"\n      failed_when:\n        - vpc.rc != 0\n        - '\"No VPC found\" not in vpc.stderr'\n      register: vpc\n\n    - name: Configure VPC\n      ibm_is_vpc:\n        name: \"{{ vpc_name }}\"\n        state: available\n        id: \"{{ vpc.resource.id | default(omit) }}\"\n      register: vpc\n\n    - name: Checking for existing VPC Subnet", "license": "", "module": "ibm_is_subnet_info", "output": "      ibm_is_subnet_info:\n        name: \"{{ subnet_name }}\"\n      failed_when:\n        - subnet.rc != 0\n        - '\"No subnet found\" not in subnet.stderr'\n      register: subnet\n", "path": "examples/simple-vm-ssh/create.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: Create IBM Cloud VPC VSI\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n    - name: Fetch the variables from var file\n      include_vars:\n        file: vars.yml\n\n    - name: Checking for existing VPC\n      ibm_is_vpc_info:\n        name: \"{{ vpc_name }}\"\n      failed_when:\n        - vpc.rc != 0\n        - '\"No VPC found\" not in vpc.stderr'\n      register: vpc\n\n    - name: Configure VPC\n      ibm_is_vpc:\n        name: \"{{ vpc_name }}\"\n        state: available\n        id: \"{{ vpc.resource.id | default(omit) }}\"\n      register: vpc\n\n    - name: Checking for existing VPC Subnet\n      ibm_is_subnet_info:\n        name: \"{{ subnet_name }}\"\n      failed_when:\n        - subnet.rc != 0\n        - '\"No subnet found\" not in subnet.stderr'\n      register: subnet\n\n    - name: Configure VPC Subnet", "license": "", "module": "ibm_is_subnet", "output": "      ibm_is_subnet:\n        name: \"{{ subnet_name }}\"\n        state: available\n        id: \"{{ subnet.id | default(omit) }}\"\n        vpc: \"{{ vpc.resource.id }}\"\n        total_ipv4_address_count: \"{{ total_ipv4_address_count }}\"\n        zone: \"{{ zone }}\"\n      register: subnet\n", "path": "examples/simple-vm-ssh/create.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: Create IBM Cloud VPC VSI\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n    - name: Fetch the variables from var file\n      include_vars:\n        file: vars.yml\n\n    - name: Checking for existing VPC\n      ibm_is_vpc_info:\n        name: \"{{ vpc_name }}\"\n      failed_when:\n        - vpc.rc != 0\n        - '\"No VPC found\" not in vpc.stderr'\n      register: vpc\n\n    - name: Configure VPC\n      ibm_is_vpc:\n        name: \"{{ vpc_name }}\"\n        state: available\n        id: \"{{ vpc.resource.id | default(omit) }}\"\n      register: vpc\n\n    - name: Checking for existing VPC Subnet\n      ibm_is_subnet_info:\n        name: \"{{ subnet_name }}\"\n      failed_when:\n        - subnet.rc != 0\n        - '\"No subnet found\" not in subnet.stderr'\n      register: subnet\n\n    - name: Configure VPC Subnet\n      ibm_is_subnet:\n        name: \"{{ subnet_name }}\"\n        state: available\n        id: \"{{ subnet.id | default(omit) }}\"\n        vpc: \"{{ vpc.resource.id }}\"\n        total_ipv4_address_count: \"{{ total_ipv4_address_count }}\"\n        zone: \"{{ zone }}\"\n      register: subnet\n\n    - name: Checking for existing SSH key", "license": "", "module": "ibm_is_ssh_key_info", "output": "      ibm_is_ssh_key_info:\n        name: \"{{ ssh_key_name }}\"\n      failed_when:\n        - ssh_key.rc != 0\n        - '\"No SSH Key found\" not in ssh_key.stderr'\n      register: ssh_key\n", "path": "examples/simple-vm-ssh/create.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: Create IBM Cloud VPC VSI\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n    - name: Fetch the variables from var file\n      include_vars:\n        file: vars.yml\n\n    - name: Checking for existing VPC\n      ibm_is_vpc_info:\n        name: \"{{ vpc_name }}\"\n      failed_when:\n        - vpc.rc != 0\n        - '\"No VPC found\" not in vpc.stderr'\n      register: vpc\n\n    - name: Configure VPC\n      ibm_is_vpc:\n        name: \"{{ vpc_name }}\"\n        state: available\n        id: \"{{ vpc.resource.id | default(omit) }}\"\n      register: vpc\n\n    - name: Checking for existing VPC Subnet\n      ibm_is_subnet_info:\n        name: \"{{ subnet_name }}\"\n      failed_when:\n        - subnet.rc != 0\n        - '\"No subnet found\" not in subnet.stderr'\n      register: subnet\n\n    - name: Configure VPC Subnet\n      ibm_is_subnet:\n        name: \"{{ subnet_name }}\"\n        state: available\n        id: \"{{ subnet.id | default(omit) }}\"\n        vpc: \"{{ vpc.resource.id }}\"\n        total_ipv4_address_count: \"{{ total_ipv4_address_count }}\"\n        zone: \"{{ zone }}\"\n      register: subnet\n\n    - name: Checking for existing SSH key\n      ibm_is_ssh_key_info:\n        name: \"{{ ssh_key_name }}\"\n      failed_when:\n        - ssh_key.rc != 0\n        - '\"No SSH Key found\" not in ssh_key.stderr'\n      register: ssh_key\n\n    - name: Configure SSH Key", "license": "", "module": "ibm_is_ssh_key", "output": "      ibm_is_ssh_key:\n        name: \"{{ ssh_key_name }}\"\n        public_key: \"{{ ssh_public_key.split()[:2]|join(' ') }}\"\n        id: \"{{ ssh_key.resource.id | default(omit) }}\"\n      register: ssh_key\n", "path": "examples/simple-vm-ssh/create.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: Create IBM Cloud VPC VSI\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n    - name: Fetch the variables from var file\n      include_vars:\n        file: vars.yml\n\n    - name: Checking for existing VPC\n      ibm_is_vpc_info:\n        name: \"{{ vpc_name }}\"\n      failed_when:\n        - vpc.rc != 0\n        - '\"No VPC found\" not in vpc.stderr'\n      register: vpc\n\n    - name: Configure VPC\n      ibm_is_vpc:\n        name: \"{{ vpc_name }}\"\n        state: available\n        id: \"{{ vpc.resource.id | default(omit) }}\"\n      register: vpc\n\n    - name: Checking for existing VPC Subnet\n      ibm_is_subnet_info:\n        name: \"{{ subnet_name }}\"\n      failed_when:\n        - subnet.rc != 0\n        - '\"No subnet found\" not in subnet.stderr'\n      register: subnet\n\n    - name: Configure VPC Subnet\n      ibm_is_subnet:\n        name: \"{{ subnet_name }}\"\n        state: available\n        id: \"{{ subnet.id | default(omit) }}\"\n        vpc: \"{{ vpc.resource.id }}\"\n        total_ipv4_address_count: \"{{ total_ipv4_address_count }}\"\n        zone: \"{{ zone }}\"\n      register: subnet\n\n    - name: Checking for existing SSH key\n      ibm_is_ssh_key_info:\n        name: \"{{ ssh_key_name }}\"\n      failed_when:\n        - ssh_key.rc != 0\n        - '\"No SSH Key found\" not in ssh_key.stderr'\n      register: ssh_key\n\n    - name: Configure SSH Key\n      ibm_is_ssh_key:\n        name: \"{{ ssh_key_name }}\"\n        public_key: \"{{ ssh_public_key.split()[:2]|join(' ') }}\"\n        id: \"{{ ssh_key.resource.id | default(omit) }}\"\n      register: ssh_key\n\n    - name: Retrieve image list", "license": "", "module": "ibm_is_images_info", "output": "      ibm_is_images_info:\n      register: images_list\n", "path": "examples/simple-vm-ssh/create.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: Create IBM Cloud VPC VSI\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n    - name: Fetch the variables from var file\n      include_vars:\n        file: vars.yml\n\n    - name: Checking for existing VPC\n      ibm_is_vpc_info:\n        name: \"{{ vpc_name }}\"\n      failed_when:\n        - vpc.rc != 0\n        - '\"No VPC found\" not in vpc.stderr'\n      register: vpc\n\n    - name: Configure VPC\n      ibm_is_vpc:\n        name: \"{{ vpc_name }}\"\n        state: available\n        id: \"{{ vpc.resource.id | default(omit) }}\"\n      register: vpc\n\n    - name: Checking for existing VPC Subnet\n      ibm_is_subnet_info:\n        name: \"{{ subnet_name }}\"\n      failed_when:\n        - subnet.rc != 0\n        - '\"No subnet found\" not in subnet.stderr'\n      register: subnet\n\n    - name: Configure VPC Subnet\n      ibm_is_subnet:\n        name: \"{{ subnet_name }}\"\n        state: available\n        id: \"{{ subnet.id | default(omit) }}\"\n        vpc: \"{{ vpc.resource.id }}\"\n        total_ipv4_address_count: \"{{ total_ipv4_address_count }}\"\n        zone: \"{{ zone }}\"\n      register: subnet\n\n    - name: Checking for existing SSH key\n      ibm_is_ssh_key_info:\n        name: \"{{ ssh_key_name }}\"\n      failed_when:\n        - ssh_key.rc != 0\n        - '\"No SSH Key found\" not in ssh_key.stderr'\n      register: ssh_key\n\n    - name: Configure SSH Key\n      ibm_is_ssh_key:\n        name: \"{{ ssh_key_name }}\"\n        public_key: \"{{ ssh_public_key.split()[:2]|join(' ') }}\"\n        id: \"{{ ssh_key.resource.id | default(omit) }}\"\n      register: ssh_key\n\n    - name: Retrieve image list\n      ibm_is_images_info:\n      register: images_list\n\n    - name: Set VM image name/id dictionary fact", "license": "", "module": "set_fact", "output": "      set_fact:\n        image_dict: \"{{ images_list.resource.images |\n                        items2dict(key_name='name', value_name='id') }}\"\n", "path": "examples/simple-vm-ssh/create.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: Create IBM Cloud VPC VSI\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n    - name: Fetch the variables from var file\n      include_vars:\n        file: vars.yml\n\n    - name: Checking for existing VPC\n      ibm_is_vpc_info:\n        name: \"{{ vpc_name }}\"\n      failed_when:\n        - vpc.rc != 0\n        - '\"No VPC found\" not in vpc.stderr'\n      register: vpc\n\n    - name: Configure VPC\n      ibm_is_vpc:\n        name: \"{{ vpc_name }}\"\n        state: available\n        id: \"{{ vpc.resource.id | default(omit) }}\"\n      register: vpc\n\n    - name: Checking for existing VPC Subnet\n      ibm_is_subnet_info:\n        name: \"{{ subnet_name }}\"\n      failed_when:\n        - subnet.rc != 0\n        - '\"No subnet found\" not in subnet.stderr'\n      register: subnet\n\n    - name: Configure VPC Subnet\n      ibm_is_subnet:\n        name: \"{{ subnet_name }}\"\n        state: available\n        id: \"{{ subnet.id | default(omit) }}\"\n        vpc: \"{{ vpc.resource.id }}\"\n        total_ipv4_address_count: \"{{ total_ipv4_address_count }}\"\n        zone: \"{{ zone }}\"\n      register: subnet\n\n    - name: Checking for existing SSH key\n      ibm_is_ssh_key_info:\n        name: \"{{ ssh_key_name }}\"\n      failed_when:\n        - ssh_key.rc != 0\n        - '\"No SSH Key found\" not in ssh_key.stderr'\n      register: ssh_key\n\n    - name: Configure SSH Key\n      ibm_is_ssh_key:\n        name: \"{{ ssh_key_name }}\"\n        public_key: \"{{ ssh_public_key.split()[:2]|join(' ') }}\"\n        id: \"{{ ssh_key.resource.id | default(omit) }}\"\n      register: ssh_key\n\n    - name: Retrieve image list\n      ibm_is_images_info:\n      register: images_list\n\n    - name: Set VM image name/id dictionary fact\n      set_fact:\n        image_dict: \"{{ images_list.resource.images |\n                        items2dict(key_name='name', value_name='id') }}\"\n\n    - name: Check for existing VSI", "license": "", "module": "ibm_is_instance_info", "output": "      ibm_is_instance_info:\n        name: \"{{ vsi_name }}\"\n      failed_when:\n        - vsi.rc != 0\n        - '\"No Instance found\" not in vsi.stderr'\n      register: vsi\n", "path": "examples/simple-vm-ssh/create.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: Create IBM Cloud VPC VSI\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n    - name: Fetch the variables from var file\n      include_vars:\n        file: vars.yml\n\n    - name: Checking for existing VPC\n      ibm_is_vpc_info:\n        name: \"{{ vpc_name }}\"\n      failed_when:\n        - vpc.rc != 0\n        - '\"No VPC found\" not in vpc.stderr'\n      register: vpc\n\n    - name: Configure VPC\n      ibm_is_vpc:\n        name: \"{{ vpc_name }}\"\n        state: available\n        id: \"{{ vpc.resource.id | default(omit) }}\"\n      register: vpc\n\n    - name: Checking for existing VPC Subnet\n      ibm_is_subnet_info:\n        name: \"{{ subnet_name }}\"\n      failed_when:\n        - subnet.rc != 0\n        - '\"No subnet found\" not in subnet.stderr'\n      register: subnet\n\n    - name: Configure VPC Subnet\n      ibm_is_subnet:\n        name: \"{{ subnet_name }}\"\n        state: available\n        id: \"{{ subnet.id | default(omit) }}\"\n        vpc: \"{{ vpc.resource.id }}\"\n        total_ipv4_address_count: \"{{ total_ipv4_address_count }}\"\n        zone: \"{{ zone }}\"\n      register: subnet\n\n    - name: Checking for existing SSH key\n      ibm_is_ssh_key_info:\n        name: \"{{ ssh_key_name }}\"\n      failed_when:\n        - ssh_key.rc != 0\n        - '\"No SSH Key found\" not in ssh_key.stderr'\n      register: ssh_key\n\n    - name: Configure SSH Key\n      ibm_is_ssh_key:\n        name: \"{{ ssh_key_name }}\"\n        public_key: \"{{ ssh_public_key.split()[:2]|join(' ') }}\"\n        id: \"{{ ssh_key.resource.id | default(omit) }}\"\n      register: ssh_key\n\n    - name: Retrieve image list\n      ibm_is_images_info:\n      register: images_list\n\n    - name: Set VM image name/id dictionary fact\n      set_fact:\n        image_dict: \"{{ images_list.resource.images |\n                        items2dict(key_name='name', value_name='id') }}\"\n\n    - name: Check for existing VSI\n      ibm_is_instance_info:\n        name: \"{{ vsi_name }}\"\n      failed_when:\n        - vsi.rc != 0\n        - '\"No Instance found\" not in vsi.stderr'\n      register: vsi\n\n    - name: Configure VSI", "license": "", "module": "ibm_is_instance", "output": "      ibm_is_instance:\n        name: \"{{ vsi_name }}\"\n        state: available\n        id: \"{{ vsi.resource.id | default(omit) }}\"\n        vpc: \"{{ vpc.resource.id }}\"\n        profile: \"{{ vsi_profile }}\"\n        image: \"{{ image_dict[vsi_image] }}\"\n        keys:\n         - \"{{ ssh_key.resource.id }}\"\n        primary_network_interface:\n         - subnet: \"{{ subnet.resource.id }}\"\n        zone: \"{{ zone }}\"\n      register: vsi\n", "path": "examples/simple-vm-ssh/create.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: Create IBM Cloud VPC VSI\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n    - name: Fetch the variables from var file\n      include_vars:\n        file: vars.yml\n\n    - name: Checking for existing VPC\n      ibm_is_vpc_info:\n        name: \"{{ vpc_name }}\"\n      failed_when:\n        - vpc.rc != 0\n        - '\"No VPC found\" not in vpc.stderr'\n      register: vpc\n\n    - name: Configure VPC\n      ibm_is_vpc:\n        name: \"{{ vpc_name }}\"\n        state: available\n        id: \"{{ vpc.resource.id | default(omit) }}\"\n      register: vpc\n\n    - name: Checking for existing VPC Subnet\n      ibm_is_subnet_info:\n        name: \"{{ subnet_name }}\"\n      failed_when:\n        - subnet.rc != 0\n        - '\"No subnet found\" not in subnet.stderr'\n      register: subnet\n\n    - name: Configure VPC Subnet\n      ibm_is_subnet:\n        name: \"{{ subnet_name }}\"\n        state: available\n        id: \"{{ subnet.id | default(omit) }}\"\n        vpc: \"{{ vpc.resource.id }}\"\n        total_ipv4_address_count: \"{{ total_ipv4_address_count }}\"\n        zone: \"{{ zone }}\"\n      register: subnet\n\n    - name: Checking for existing SSH key\n      ibm_is_ssh_key_info:\n        name: \"{{ ssh_key_name }}\"\n      failed_when:\n        - ssh_key.rc != 0\n        - '\"No SSH Key found\" not in ssh_key.stderr'\n      register: ssh_key\n\n    - name: Configure SSH Key\n      ibm_is_ssh_key:\n        name: \"{{ ssh_key_name }}\"\n        public_key: \"{{ ssh_public_key.split()[:2]|join(' ') }}\"\n        id: \"{{ ssh_key.resource.id | default(omit) }}\"\n      register: ssh_key\n\n    - name: Retrieve image list\n      ibm_is_images_info:\n      register: images_list\n\n    - name: Set VM image name/id dictionary fact\n      set_fact:\n        image_dict: \"{{ images_list.resource.images |\n                        items2dict(key_name='name', value_name='id') }}\"\n\n    - name: Check for existing VSI\n      ibm_is_instance_info:\n        name: \"{{ vsi_name }}\"\n      failed_when:\n        - vsi.rc != 0\n        - '\"No Instance found\" not in vsi.stderr'\n      register: vsi\n\n    - name: Configure VSI\n      ibm_is_instance:\n        name: \"{{ vsi_name }}\"\n        state: available\n        id: \"{{ vsi.resource.id | default(omit) }}\"\n        vpc: \"{{ vpc.resource.id }}\"\n        profile: \"{{ vsi_profile }}\"\n        image: \"{{ image_dict[vsi_image] }}\"\n        keys:\n         - \"{{ ssh_key.resource.id }}\"\n        primary_network_interface:\n         - subnet: \"{{ subnet.resource.id }}\"\n        zone: \"{{ zone }}\"\n      register: vsi\n\n    - name: Check for existing Floating IP", "license": "", "module": "ibm_is_floating_ip_info", "output": "      ibm_is_floating_ip_info:\n        name: \"{{ fip_name }}\"\n      failed_when:\n        - fip.rc != 0\n        - '\"No floatingIP found\" not in fip.stderr'\n      register: fip\n", "path": "examples/simple-vm-ssh/create.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: Create IBM Cloud VPC VSI\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n    - name: Fetch the variables from var file\n      include_vars:\n        file: vars.yml\n\n    - name: Checking for existing VPC\n      ibm_is_vpc_info:\n        name: \"{{ vpc_name }}\"\n      failed_when:\n        - vpc.rc != 0\n        - '\"No VPC found\" not in vpc.stderr'\n      register: vpc\n\n    - name: Configure VPC\n      ibm_is_vpc:\n        name: \"{{ vpc_name }}\"\n        state: available\n        id: \"{{ vpc.resource.id | default(omit) }}\"\n      register: vpc\n\n    - name: Checking for existing VPC Subnet\n      ibm_is_subnet_info:\n        name: \"{{ subnet_name }}\"\n      failed_when:\n        - subnet.rc != 0\n        - '\"No subnet found\" not in subnet.stderr'\n      register: subnet\n\n    - name: Configure VPC Subnet\n      ibm_is_subnet:\n        name: \"{{ subnet_name }}\"\n        state: available\n        id: \"{{ subnet.id | default(omit) }}\"\n        vpc: \"{{ vpc.resource.id }}\"\n        total_ipv4_address_count: \"{{ total_ipv4_address_count }}\"\n        zone: \"{{ zone }}\"\n      register: subnet\n\n    - name: Checking for existing SSH key\n      ibm_is_ssh_key_info:\n        name: \"{{ ssh_key_name }}\"\n      failed_when:\n        - ssh_key.rc != 0\n        - '\"No SSH Key found\" not in ssh_key.stderr'\n      register: ssh_key\n\n    - name: Configure SSH Key\n      ibm_is_ssh_key:\n        name: \"{{ ssh_key_name }}\"\n        public_key: \"{{ ssh_public_key.split()[:2]|join(' ') }}\"\n        id: \"{{ ssh_key.resource.id | default(omit) }}\"\n      register: ssh_key\n\n    - name: Retrieve image list\n      ibm_is_images_info:\n      register: images_list\n\n    - name: Set VM image name/id dictionary fact\n      set_fact:\n        image_dict: \"{{ images_list.resource.images |\n                        items2dict(key_name='name', value_name='id') }}\"\n\n    - name: Check for existing VSI\n      ibm_is_instance_info:\n        name: \"{{ vsi_name }}\"\n      failed_when:\n        - vsi.rc != 0\n        - '\"No Instance found\" not in vsi.stderr'\n      register: vsi\n\n    - name: Configure VSI\n      ibm_is_instance:\n        name: \"{{ vsi_name }}\"\n        state: available\n        id: \"{{ vsi.resource.id | default(omit) }}\"\n        vpc: \"{{ vpc.resource.id }}\"\n        profile: \"{{ vsi_profile }}\"\n        image: \"{{ image_dict[vsi_image] }}\"\n        keys:\n         - \"{{ ssh_key.resource.id }}\"\n        primary_network_interface:\n         - subnet: \"{{ subnet.resource.id }}\"\n        zone: \"{{ zone }}\"\n      register: vsi\n\n    - name: Check for existing Floating IP\n      ibm_is_floating_ip_info:\n        name: \"{{ fip_name }}\"\n      failed_when:\n        - fip.rc != 0\n        - '\"No floatingIP found\" not in fip.stderr'\n      register: fip\n\n    - name: Configure Floating IP Address", "license": "", "module": "ibm_is_floating_ip", "output": "      ibm_is_floating_ip:\n        name: \"{{ fip_name }}\"\n        state: available\n        id: \"{{ fip.resource.id | default(omit) }}\"\n        target: \"{{ vsi.resource.primary_network_interface[0]['id'] }}\"\n      register: fip\n", "path": "examples/simple-vm-ssh/create.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: Create IBM Cloud VPC VSI\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n    - name: Fetch the variables from var file\n      include_vars:\n        file: vars.yml\n\n    - name: Checking for existing VPC\n      ibm_is_vpc_info:\n        name: \"{{ vpc_name }}\"\n      failed_when:\n        - vpc.rc != 0\n        - '\"No VPC found\" not in vpc.stderr'\n      register: vpc\n\n    - name: Configure VPC\n      ibm_is_vpc:\n        name: \"{{ vpc_name }}\"\n        state: available\n        id: \"{{ vpc.resource.id | default(omit) }}\"\n      register: vpc\n\n    - name: Checking for existing VPC Subnet\n      ibm_is_subnet_info:\n        name: \"{{ subnet_name }}\"\n      failed_when:\n        - subnet.rc != 0\n        - '\"No subnet found\" not in subnet.stderr'\n      register: subnet\n\n    - name: Configure VPC Subnet\n      ibm_is_subnet:\n        name: \"{{ subnet_name }}\"\n        state: available\n        id: \"{{ subnet.id | default(omit) }}\"\n        vpc: \"{{ vpc.resource.id }}\"\n        total_ipv4_address_count: \"{{ total_ipv4_address_count }}\"\n        zone: \"{{ zone }}\"\n      register: subnet\n\n    - name: Checking for existing SSH key\n      ibm_is_ssh_key_info:\n        name: \"{{ ssh_key_name }}\"\n      failed_when:\n        - ssh_key.rc != 0\n        - '\"No SSH Key found\" not in ssh_key.stderr'\n      register: ssh_key\n\n    - name: Configure SSH Key\n      ibm_is_ssh_key:\n        name: \"{{ ssh_key_name }}\"\n        public_key: \"{{ ssh_public_key.split()[:2]|join(' ') }}\"\n        id: \"{{ ssh_key.resource.id | default(omit) }}\"\n      register: ssh_key\n\n    - name: Retrieve image list\n      ibm_is_images_info:\n      register: images_list\n\n    - name: Set VM image name/id dictionary fact\n      set_fact:\n        image_dict: \"{{ images_list.resource.images |\n                        items2dict(key_name='name', value_name='id') }}\"\n\n    - name: Check for existing VSI\n      ibm_is_instance_info:\n        name: \"{{ vsi_name }}\"\n      failed_when:\n        - vsi.rc != 0\n        - '\"No Instance found\" not in vsi.stderr'\n      register: vsi\n\n    - name: Configure VSI\n      ibm_is_instance:\n        name: \"{{ vsi_name }}\"\n        state: available\n        id: \"{{ vsi.resource.id | default(omit) }}\"\n        vpc: \"{{ vpc.resource.id }}\"\n        profile: \"{{ vsi_profile }}\"\n        image: \"{{ image_dict[vsi_image] }}\"\n        keys:\n         - \"{{ ssh_key.resource.id }}\"\n        primary_network_interface:\n         - subnet: \"{{ subnet.resource.id }}\"\n        zone: \"{{ zone }}\"\n      register: vsi\n\n    - name: Check for existing Floating IP\n      ibm_is_floating_ip_info:\n        name: \"{{ fip_name }}\"\n      failed_when:\n        - fip.rc != 0\n        - '\"No floatingIP found\" not in fip.stderr'\n      register: fip\n\n    - name: Configure Floating IP Address\n      ibm_is_floating_ip:\n        name: \"{{ fip_name }}\"\n        state: available\n        id: \"{{ fip.resource.id | default(omit) }}\"\n        target: \"{{ vsi.resource.primary_network_interface[0]['id'] }}\"\n      register: fip\n\n    - name: Print Floating IP Address", "license": "", "module": "debug", "output": "      debug:\n        msg: \"{{ vsi_name }} IP Address: {{ fip.resource.address }}\"\n", "path": "examples/simple-vm-ssh/create.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: Create IBM Cloud VPC VSI\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n    - name: Fetch the variables from var file\n      include_vars:\n        file: vars.yml\n\n    - name: Checking for existing VPC\n      ibm_is_vpc_info:\n        name: \"{{ vpc_name }}\"\n      failed_when:\n        - vpc.rc != 0\n        - '\"No VPC found\" not in vpc.stderr'\n      register: vpc\n\n    - name: Configure VPC\n      ibm_is_vpc:\n        name: \"{{ vpc_name }}\"\n        state: available\n        id: \"{{ vpc.resource.id | default(omit) }}\"\n      register: vpc\n\n    - name: Checking for existing VPC Subnet\n      ibm_is_subnet_info:\n        name: \"{{ subnet_name }}\"\n      failed_when:\n        - subnet.rc != 0\n        - '\"No subnet found\" not in subnet.stderr'\n      register: subnet\n\n    - name: Configure VPC Subnet\n      ibm_is_subnet:\n        name: \"{{ subnet_name }}\"\n        state: available\n        id: \"{{ subnet.id | default(omit) }}\"\n        vpc: \"{{ vpc.resource.id }}\"\n        total_ipv4_address_count: \"{{ total_ipv4_address_count }}\"\n        zone: \"{{ zone }}\"\n      register: subnet\n\n    - name: Checking for existing SSH key\n      ibm_is_ssh_key_info:\n        name: \"{{ ssh_key_name }}\"\n      failed_when:\n        - ssh_key.rc != 0\n        - '\"No SSH Key found\" not in ssh_key.stderr'\n      register: ssh_key\n\n    - name: Configure SSH Key\n      ibm_is_ssh_key:\n        name: \"{{ ssh_key_name }}\"\n        public_key: \"{{ ssh_public_key.split()[:2]|join(' ') }}\"\n        id: \"{{ ssh_key.resource.id | default(omit) }}\"\n      register: ssh_key\n\n    - name: Retrieve image list\n      ibm_is_images_info:\n      register: images_list\n\n    - name: Set VM image name/id dictionary fact\n      set_fact:\n        image_dict: \"{{ images_list.resource.images |\n                        items2dict(key_name='name', value_name='id') }}\"\n\n    - name: Check for existing VSI\n      ibm_is_instance_info:\n        name: \"{{ vsi_name }}\"\n      failed_when:\n        - vsi.rc != 0\n        - '\"No Instance found\" not in vsi.stderr'\n      register: vsi\n\n    - name: Configure VSI\n      ibm_is_instance:\n        name: \"{{ vsi_name }}\"\n        state: available\n        id: \"{{ vsi.resource.id | default(omit) }}\"\n        vpc: \"{{ vpc.resource.id }}\"\n        profile: \"{{ vsi_profile }}\"\n        image: \"{{ image_dict[vsi_image] }}\"\n        keys:\n         - \"{{ ssh_key.resource.id }}\"\n        primary_network_interface:\n         - subnet: \"{{ subnet.resource.id }}\"\n        zone: \"{{ zone }}\"\n      register: vsi\n\n    - name: Check for existing Floating IP\n      ibm_is_floating_ip_info:\n        name: \"{{ fip_name }}\"\n      failed_when:\n        - fip.rc != 0\n        - '\"No floatingIP found\" not in fip.stderr'\n      register: fip\n\n    - name: Configure Floating IP Address\n      ibm_is_floating_ip:\n        name: \"{{ fip_name }}\"\n        state: available\n        id: \"{{ fip.resource.id | default(omit) }}\"\n        target: \"{{ vsi.resource.primary_network_interface[0]['id'] }}\"\n      register: fip\n\n    - name: Print Floating IP Address\n      debug:\n        msg: \"{{ vsi_name }} IP Address: {{ fip.resource.address }}\"\n\n    - name: Configure Security Group Rule to open SSH on the VSI", "license": "", "module": "ibm_is_security_group_rule", "output": "      ibm_is_security_group_rule:\n        state: available\n        group: \"{{ vpc.resource.default_security_group }}\"\n        direction: inbound\n        remote: 0.0.0.0/0\n        tcp:\n          - port_max: 22\n            port_min: 22\n", "path": "examples/simple-vm-ssh/create.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: Create IBM Cloud VPC VSI\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n    - name: Fetch the variables from var file\n      include_vars:\n        file: vars.yml\n\n    - name: Checking for existing VPC\n      ibm_is_vpc_info:\n        name: \"{{ vpc_name }}\"\n      failed_when:\n        - vpc.rc != 0\n        - '\"No VPC found\" not in vpc.stderr'\n      register: vpc\n\n    - name: Configure VPC\n      ibm_is_vpc:\n        name: \"{{ vpc_name }}\"\n        state: available\n        id: \"{{ vpc.resource.id | default(omit) }}\"\n      register: vpc\n\n    - name: Checking for existing VPC Subnet\n      ibm_is_subnet_info:\n        name: \"{{ subnet_name }}\"\n      failed_when:\n        - subnet.rc != 0\n        - '\"No subnet found\" not in subnet.stderr'\n      register: subnet\n\n    - name: Configure VPC Subnet\n      ibm_is_subnet:\n        name: \"{{ subnet_name }}\"\n        state: available\n        id: \"{{ subnet.id | default(omit) }}\"\n        vpc: \"{{ vpc.resource.id }}\"\n        total_ipv4_address_count: \"{{ total_ipv4_address_count }}\"\n        zone: \"{{ zone }}\"\n      register: subnet\n\n    - name: Checking for existing SSH key\n      ibm_is_ssh_key_info:\n        name: \"{{ ssh_key_name }}\"\n      failed_when:\n        - ssh_key.rc != 0\n        - '\"No SSH Key found\" not in ssh_key.stderr'\n      register: ssh_key\n\n    - name: Configure SSH Key\n      ibm_is_ssh_key:\n        name: \"{{ ssh_key_name }}\"\n        public_key: \"{{ ssh_public_key.split()[:2]|join(' ') }}\"\n        id: \"{{ ssh_key.resource.id | default(omit) }}\"\n      register: ssh_key\n\n    - name: Retrieve image list\n      ibm_is_images_info:\n      register: images_list\n\n    - name: Set VM image name/id dictionary fact\n      set_fact:\n        image_dict: \"{{ images_list.resource.images |\n                        items2dict(key_name='name', value_name='id') }}\"\n\n    - name: Check for existing VSI\n      ibm_is_instance_info:\n        name: \"{{ vsi_name }}\"\n      failed_when:\n        - vsi.rc != 0\n        - '\"No Instance found\" not in vsi.stderr'\n      register: vsi\n\n    - name: Configure VSI\n      ibm_is_instance:\n        name: \"{{ vsi_name }}\"\n        state: available\n        id: \"{{ vsi.resource.id | default(omit) }}\"\n        vpc: \"{{ vpc.resource.id }}\"\n        profile: \"{{ vsi_profile }}\"\n        image: \"{{ image_dict[vsi_image] }}\"\n        keys:\n         - \"{{ ssh_key.resource.id }}\"\n        primary_network_interface:\n         - subnet: \"{{ subnet.resource.id }}\"\n        zone: \"{{ zone }}\"\n      register: vsi\n\n    - name: Check for existing Floating IP\n      ibm_is_floating_ip_info:\n        name: \"{{ fip_name }}\"\n      failed_when:\n        - fip.rc != 0\n        - '\"No floatingIP found\" not in fip.stderr'\n      register: fip\n\n    - name: Configure Floating IP Address\n      ibm_is_floating_ip:\n        name: \"{{ fip_name }}\"\n        state: available\n        id: \"{{ fip.resource.id | default(omit) }}\"\n        target: \"{{ vsi.resource.primary_network_interface[0]['id'] }}\"\n      register: fip\n\n    - name: Print Floating IP Address\n      debug:\n        msg: \"{{ vsi_name }} IP Address: {{ fip.resource.address }}\"\n\n    - name: Configure Security Group Rule to open SSH on the VSI\n      ibm_is_security_group_rule:\n        state: available\n        group: \"{{ vpc.resource.default_security_group }}\"\n        direction: inbound\n        remote: 0.0.0.0/0\n        tcp:\n          - port_max: 22\n            port_min: 22\n\n    - name: Add VSI to Ansible inventory", "license": "", "module": "add_host", "output": "      add_host:\n        name: \"{{ fip.resource.address }}\"\n        ansible_user: root\n        groups: new_vsi\n        ansible_ssh_extra_args: -o StrictHostKeyChecking=no\n", "path": "examples/simple-vm-ssh/create.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: Create IBM Cloud VPC VSI\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n    - name: Fetch the variables from var file\n      include_vars:\n        file: vars.yml\n\n    - name: Checking for existing VPC\n      ibm_is_vpc_info:\n        name: \"{{ vpc_name }}\"\n      failed_when:\n        - vpc.rc != 0\n        - '\"No VPC found\" not in vpc.stderr'\n      register: vpc\n\n    - name: Configure VPC\n      ibm_is_vpc:\n        name: \"{{ vpc_name }}\"\n        state: available\n        id: \"{{ vpc.resource.id | default(omit) }}\"\n      register: vpc\n\n    - name: Checking for existing VPC Subnet\n      ibm_is_subnet_info:\n        name: \"{{ subnet_name }}\"\n      failed_when:\n        - subnet.rc != 0\n        - '\"No subnet found\" not in subnet.stderr'\n      register: subnet\n\n    - name: Configure VPC Subnet\n      ibm_is_subnet:\n        name: \"{{ subnet_name }}\"\n        state: available\n        id: \"{{ subnet.id | default(omit) }}\"\n        vpc: \"{{ vpc.resource.id }}\"\n        total_ipv4_address_count: \"{{ total_ipv4_address_count }}\"\n        zone: \"{{ zone }}\"\n      register: subnet\n\n    - name: Checking for existing SSH key\n      ibm_is_ssh_key_info:\n        name: \"{{ ssh_key_name }}\"\n      failed_when:\n        - ssh_key.rc != 0\n        - '\"No SSH Key found\" not in ssh_key.stderr'\n      register: ssh_key\n\n    - name: Configure SSH Key\n      ibm_is_ssh_key:\n        name: \"{{ ssh_key_name }}\"\n        public_key: \"{{ ssh_public_key.split()[:2]|join(' ') }}\"\n        id: \"{{ ssh_key.resource.id | default(omit) }}\"\n      register: ssh_key\n\n    - name: Retrieve image list\n      ibm_is_images_info:\n      register: images_list\n\n    - name: Set VM image name/id dictionary fact\n      set_fact:\n        image_dict: \"{{ images_list.resource.images |\n                        items2dict(key_name='name', value_name='id') }}\"\n\n    - name: Check for existing VSI\n      ibm_is_instance_info:\n        name: \"{{ vsi_name }}\"\n      failed_when:\n        - vsi.rc != 0\n        - '\"No Instance found\" not in vsi.stderr'\n      register: vsi\n\n    - name: Configure VSI\n      ibm_is_instance:\n        name: \"{{ vsi_name }}\"\n        state: available\n        id: \"{{ vsi.resource.id | default(omit) }}\"\n        vpc: \"{{ vpc.resource.id }}\"\n        profile: \"{{ vsi_profile }}\"\n        image: \"{{ image_dict[vsi_image] }}\"\n        keys:\n         - \"{{ ssh_key.resource.id }}\"\n        primary_network_interface:\n         - subnet: \"{{ subnet.resource.id }}\"\n        zone: \"{{ zone }}\"\n      register: vsi\n\n    - name: Check for existing Floating IP\n      ibm_is_floating_ip_info:\n        name: \"{{ fip_name }}\"\n      failed_when:\n        - fip.rc != 0\n        - '\"No floatingIP found\" not in fip.stderr'\n      register: fip\n\n    - name: Configure Floating IP Address\n      ibm_is_floating_ip:\n        name: \"{{ fip_name }}\"\n        state: available\n        id: \"{{ fip.resource.id | default(omit) }}\"\n        target: \"{{ vsi.resource.primary_network_interface[0]['id'] }}\"\n      register: fip\n\n    - name: Print Floating IP Address\n      debug:\n        msg: \"{{ vsi_name }} IP Address: {{ fip.resource.address }}\"\n\n    - name: Configure Security Group Rule to open SSH on the VSI\n      ibm_is_security_group_rule:\n        state: available\n        group: \"{{ vpc.resource.default_security_group }}\"\n        direction: inbound\n        remote: 0.0.0.0/0\n        tcp:\n          - port_max: 22\n            port_min: 22\n\n    - name: Add VSI to Ansible inventory\n      add_host:\n        name: \"{{ fip.resource.address }}\"\n        ansible_user: root\n        groups: new_vsi\n        ansible_ssh_extra_args: -o StrictHostKeyChecking=no\n\n- name: Check Ansible connection to new DEMO VSI\n  hosts: new_vsi\n  gather_facts: False\n  tasks:\n    - name: Wait for VSI to become reachable over SSH", "license": "", "module": "wait_for_connection", "output": "      wait_for_connection:\n", "path": "examples/simple-vm-ssh/create.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: Create IBM Cloud VPC VSI\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n    - name: Fetch the variables from var file\n      include_vars:\n        file: vars.yml\n\n    - name: Checking for existing VPC\n      ibm_is_vpc_info:\n        name: \"{{ vpc_name }}\"\n      failed_when:\n        - vpc.rc != 0\n        - '\"No VPC found\" not in vpc.stderr'\n      register: vpc\n\n    - name: Configure VPC\n      ibm_is_vpc:\n        name: \"{{ vpc_name }}\"\n        state: available\n        id: \"{{ vpc.resource.id | default(omit) }}\"\n      register: vpc\n\n    - name: Checking for existing VPC Subnet\n      ibm_is_subnet_info:\n        name: \"{{ subnet_name }}\"\n      failed_when:\n        - subnet.rc != 0\n        - '\"No subnet found\" not in subnet.stderr'\n      register: subnet\n\n    - name: Configure VPC Subnet\n      ibm_is_subnet:\n        name: \"{{ subnet_name }}\"\n        state: available\n        id: \"{{ subnet.id | default(omit) }}\"\n        vpc: \"{{ vpc.resource.id }}\"\n        total_ipv4_address_count: \"{{ total_ipv4_address_count }}\"\n        zone: \"{{ zone }}\"\n      register: subnet\n\n    - name: Checking for existing SSH key\n      ibm_is_ssh_key_info:\n        name: \"{{ ssh_key_name }}\"\n      failed_when:\n        - ssh_key.rc != 0\n        - '\"No SSH Key found\" not in ssh_key.stderr'\n      register: ssh_key\n\n    - name: Configure SSH Key\n      ibm_is_ssh_key:\n        name: \"{{ ssh_key_name }}\"\n        public_key: \"{{ ssh_public_key.split()[:2]|join(' ') }}\"\n        id: \"{{ ssh_key.resource.id | default(omit) }}\"\n      register: ssh_key\n\n    - name: Retrieve image list\n      ibm_is_images_info:\n      register: images_list\n\n    - name: Set VM image name/id dictionary fact\n      set_fact:\n        image_dict: \"{{ images_list.resource.images |\n                        items2dict(key_name='name', value_name='id') }}\"\n\n    - name: Check for existing VSI\n      ibm_is_instance_info:\n        name: \"{{ vsi_name }}\"\n      failed_when:\n        - vsi.rc != 0\n        - '\"No Instance found\" not in vsi.stderr'\n      register: vsi\n\n    - name: Configure VSI\n      ibm_is_instance:\n        name: \"{{ vsi_name }}\"\n        state: available\n        id: \"{{ vsi.resource.id | default(omit) }}\"\n        vpc: \"{{ vpc.resource.id }}\"\n        profile: \"{{ vsi_profile }}\"\n        image: \"{{ image_dict[vsi_image] }}\"\n        keys:\n         - \"{{ ssh_key.resource.id }}\"\n        primary_network_interface:\n         - subnet: \"{{ subnet.resource.id }}\"\n        zone: \"{{ zone }}\"\n      register: vsi\n\n    - name: Check for existing Floating IP\n      ibm_is_floating_ip_info:\n        name: \"{{ fip_name }}\"\n      failed_when:\n        - fip.rc != 0\n        - '\"No floatingIP found\" not in fip.stderr'\n      register: fip\n\n    - name: Configure Floating IP Address\n      ibm_is_floating_ip:\n        name: \"{{ fip_name }}\"\n        state: available\n        id: \"{{ fip.resource.id | default(omit) }}\"\n        target: \"{{ vsi.resource.primary_network_interface[0]['id'] }}\"\n      register: fip\n\n    - name: Print Floating IP Address\n      debug:\n        msg: \"{{ vsi_name }} IP Address: {{ fip.resource.address }}\"\n\n    - name: Configure Security Group Rule to open SSH on the VSI\n      ibm_is_security_group_rule:\n        state: available\n        group: \"{{ vpc.resource.default_security_group }}\"\n        direction: inbound\n        remote: 0.0.0.0/0\n        tcp:\n          - port_max: 22\n            port_min: 22\n\n    - name: Add VSI to Ansible inventory\n      add_host:\n        name: \"{{ fip.resource.address }}\"\n        ansible_user: root\n        groups: new_vsi\n        ansible_ssh_extra_args: -o StrictHostKeyChecking=no\n\n- name: Check Ansible connection to new DEMO VSI\n  hosts: new_vsi\n  gather_facts: False\n  tasks:\n    - name: Wait for VSI to become reachable over SSH\n      wait_for_connection:\n\n- name: Check Ansible connection to new DEMO VSI\n  hosts: new_vsi\n  tasks:\n    - name: Collect OS information", "license": "", "module": "command", "output": "      command: cat /etc/os-release\n      register: os_info\n", "path": "examples/simple-vm-ssh/create.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: Create IBM Cloud VPC VSI\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n    - name: Fetch the variables from var file\n      include_vars:\n        file: vars.yml\n\n    - name: Checking for existing VPC\n      ibm_is_vpc_info:\n        name: \"{{ vpc_name }}\"\n      failed_when:\n        - vpc.rc != 0\n        - '\"No VPC found\" not in vpc.stderr'\n      register: vpc\n\n    - name: Configure VPC\n      ibm_is_vpc:\n        name: \"{{ vpc_name }}\"\n        state: available\n        id: \"{{ vpc.resource.id | default(omit) }}\"\n      register: vpc\n\n    - name: Checking for existing VPC Subnet\n      ibm_is_subnet_info:\n        name: \"{{ subnet_name }}\"\n      failed_when:\n        - subnet.rc != 0\n        - '\"No subnet found\" not in subnet.stderr'\n      register: subnet\n\n    - name: Configure VPC Subnet\n      ibm_is_subnet:\n        name: \"{{ subnet_name }}\"\n        state: available\n        id: \"{{ subnet.id | default(omit) }}\"\n        vpc: \"{{ vpc.resource.id }}\"\n        total_ipv4_address_count: \"{{ total_ipv4_address_count }}\"\n        zone: \"{{ zone }}\"\n      register: subnet\n\n    - name: Checking for existing SSH key\n      ibm_is_ssh_key_info:\n        name: \"{{ ssh_key_name }}\"\n      failed_when:\n        - ssh_key.rc != 0\n        - '\"No SSH Key found\" not in ssh_key.stderr'\n      register: ssh_key\n\n    - name: Configure SSH Key\n      ibm_is_ssh_key:\n        name: \"{{ ssh_key_name }}\"\n        public_key: \"{{ ssh_public_key.split()[:2]|join(' ') }}\"\n        id: \"{{ ssh_key.resource.id | default(omit) }}\"\n      register: ssh_key\n\n    - name: Retrieve image list\n      ibm_is_images_info:\n      register: images_list\n\n    - name: Set VM image name/id dictionary fact\n      set_fact:\n        image_dict: \"{{ images_list.resource.images |\n                        items2dict(key_name='name', value_name='id') }}\"\n\n    - name: Check for existing VSI\n      ibm_is_instance_info:\n        name: \"{{ vsi_name }}\"\n      failed_when:\n        - vsi.rc != 0\n        - '\"No Instance found\" not in vsi.stderr'\n      register: vsi\n\n    - name: Configure VSI\n      ibm_is_instance:\n        name: \"{{ vsi_name }}\"\n        state: available\n        id: \"{{ vsi.resource.id | default(omit) }}\"\n        vpc: \"{{ vpc.resource.id }}\"\n        profile: \"{{ vsi_profile }}\"\n        image: \"{{ image_dict[vsi_image] }}\"\n        keys:\n         - \"{{ ssh_key.resource.id }}\"\n        primary_network_interface:\n         - subnet: \"{{ subnet.resource.id }}\"\n        zone: \"{{ zone }}\"\n      register: vsi\n\n    - name: Check for existing Floating IP\n      ibm_is_floating_ip_info:\n        name: \"{{ fip_name }}\"\n      failed_when:\n        - fip.rc != 0\n        - '\"No floatingIP found\" not in fip.stderr'\n      register: fip\n\n    - name: Configure Floating IP Address\n      ibm_is_floating_ip:\n        name: \"{{ fip_name }}\"\n        state: available\n        id: \"{{ fip.resource.id | default(omit) }}\"\n        target: \"{{ vsi.resource.primary_network_interface[0]['id'] }}\"\n      register: fip\n\n    - name: Print Floating IP Address\n      debug:\n        msg: \"{{ vsi_name }} IP Address: {{ fip.resource.address }}\"\n\n    - name: Configure Security Group Rule to open SSH on the VSI\n      ibm_is_security_group_rule:\n        state: available\n        group: \"{{ vpc.resource.default_security_group }}\"\n        direction: inbound\n        remote: 0.0.0.0/0\n        tcp:\n          - port_max: 22\n            port_min: 22\n\n    - name: Add VSI to Ansible inventory\n      add_host:\n        name: \"{{ fip.resource.address }}\"\n        ansible_user: root\n        groups: new_vsi\n        ansible_ssh_extra_args: -o StrictHostKeyChecking=no\n\n- name: Check Ansible connection to new DEMO VSI\n  hosts: new_vsi\n  gather_facts: False\n  tasks:\n    - name: Wait for VSI to become reachable over SSH\n      wait_for_connection:\n\n- name: Check Ansible connection to new DEMO VSI\n  hosts: new_vsi\n  tasks:\n    - name: Collect OS information\n      command: cat /etc/os-release\n      register: os_info\n\n    - name: Print OS information", "license": "", "module": "debug", "output": "      debug:\n        var: os_info.stdout_lines", "path": "examples/simple-vm-ssh/create.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: Destroy IBM Cloud VPC VSI\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n    - name: Fetch the variables from var file", "license": "", "module": "include_vars", "output": "      include_vars:\n        file: vars.yml\n", "path": "examples/simple-vm-ssh/destroy.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: Destroy IBM Cloud VPC VSI\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n    - name: Fetch the variables from var file\n      include_vars:\n        file: vars.yml\n\n    - name: Check for existing Floating IP", "license": "", "module": "ibm_is_floating_ip_info", "output": "      ibm_is_floating_ip_info:\n        name: \"{{ fip_name }}\"\n      failed_when:\n        - fip.rc != 0\n        - '\"No floatingIP found\" not in fip.stderr'\n      register: fip\n", "path": "examples/simple-vm-ssh/destroy.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: Destroy IBM Cloud VPC VSI\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n    - name: Fetch the variables from var file\n      include_vars:\n        file: vars.yml\n\n    - name: Check for existing Floating IP\n      ibm_is_floating_ip_info:\n        name: \"{{ fip_name }}\"\n      failed_when:\n        - fip.rc != 0\n        - '\"No floatingIP found\" not in fip.stderr'\n      register: fip\n\n    - name: Release Floating IP", "license": "", "module": "ibm_is_floating_ip", "output": "      ibm_is_floating_ip:\n        state: absent\n        id: \"{{ fip.resource.id }}\"\n      when: fip.resource.id is defined\n", "path": "examples/simple-vm-ssh/destroy.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: Destroy IBM Cloud VPC VSI\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n    - name: Fetch the variables from var file\n      include_vars:\n        file: vars.yml\n\n    - name: Check for existing Floating IP\n      ibm_is_floating_ip_info:\n        name: \"{{ fip_name }}\"\n      failed_when:\n        - fip.rc != 0\n        - '\"No floatingIP found\" not in fip.stderr'\n      register: fip\n\n    - name: Release Floating IP\n      ibm_is_floating_ip:\n        state: absent\n        id: \"{{ fip.resource.id }}\"\n      when: fip.resource.id is defined\n\n    - name: Check for existing VSI", "license": "", "module": "ibm_is_instance_info", "output": "      ibm_is_instance_info:\n        name: \"{{ vsi_name }}\"\n      failed_when:\n        - vsi.rc != 0\n        - '\"No Instance found\" not in vsi.stderr'\n      register: vsi\n", "path": "examples/simple-vm-ssh/destroy.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: Destroy IBM Cloud VPC VSI\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n    - name: Fetch the variables from var file\n      include_vars:\n        file: vars.yml\n\n    - name: Check for existing Floating IP\n      ibm_is_floating_ip_info:\n        name: \"{{ fip_name }}\"\n      failed_when:\n        - fip.rc != 0\n        - '\"No floatingIP found\" not in fip.stderr'\n      register: fip\n\n    - name: Release Floating IP\n      ibm_is_floating_ip:\n        state: absent\n        id: \"{{ fip.resource.id }}\"\n      when: fip.resource.id is defined\n\n    - name: Check for existing VSI\n      ibm_is_instance_info:\n        name: \"{{ vsi_name }}\"\n      failed_when:\n        - vsi.rc != 0\n        - '\"No Instance found\" not in vsi.stderr'\n      register: vsi\n\n    - name: Remove VSI", "license": "", "module": "ibm_is_instance", "output": "      ibm_is_instance:\n        state: absent\n        id: \"{{ vsi.resource.id }}\"\n        vpc: \"{{ vsi.resource.vpc }}\"\n        keys: []\n        image: \"{{ vsi.resource.image }}\"\n        profile: \"{{ vsi.resource.profile }}\"\n        zone: \"{{ vsi.resource.zone }}\"\n        primary_network_interface:\n          - subnet: \"{{ vsi.resource.primary_network_interface[0].subnet }}\"\n      when: vsi.resource.id is defined\n", "path": "examples/simple-vm-ssh/destroy.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: Destroy IBM Cloud VPC VSI\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n    - name: Fetch the variables from var file\n      include_vars:\n        file: vars.yml\n\n    - name: Check for existing Floating IP\n      ibm_is_floating_ip_info:\n        name: \"{{ fip_name }}\"\n      failed_when:\n        - fip.rc != 0\n        - '\"No floatingIP found\" not in fip.stderr'\n      register: fip\n\n    - name: Release Floating IP\n      ibm_is_floating_ip:\n        state: absent\n        id: \"{{ fip.resource.id }}\"\n      when: fip.resource.id is defined\n\n    - name: Check for existing VSI\n      ibm_is_instance_info:\n        name: \"{{ vsi_name }}\"\n      failed_when:\n        - vsi.rc != 0\n        - '\"No Instance found\" not in vsi.stderr'\n      register: vsi\n\n    - name: Remove VSI\n      ibm_is_instance:\n        state: absent\n        id: \"{{ vsi.resource.id }}\"\n        vpc: \"{{ vsi.resource.vpc }}\"\n        keys: []\n        image: \"{{ vsi.resource.image }}\"\n        profile: \"{{ vsi.resource.profile }}\"\n        zone: \"{{ vsi.resource.zone }}\"\n        primary_network_interface:\n          - subnet: \"{{ vsi.resource.primary_network_interface[0].subnet }}\"\n      when: vsi.resource.id is defined\n\n    - name: Checking for existing SSH key", "license": "", "module": "ibm_is_ssh_key_info", "output": "      ibm_is_ssh_key_info:\n        name: \"{{ ssh_key_name }}\"\n      failed_when:\n        - ssh_key.rc != 0\n        - '\"No SSH Key found\" not in ssh_key.stderr'\n      register: ssh_key\n", "path": "examples/simple-vm-ssh/destroy.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: Destroy IBM Cloud VPC VSI\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n    - name: Fetch the variables from var file\n      include_vars:\n        file: vars.yml\n\n    - name: Check for existing Floating IP\n      ibm_is_floating_ip_info:\n        name: \"{{ fip_name }}\"\n      failed_when:\n        - fip.rc != 0\n        - '\"No floatingIP found\" not in fip.stderr'\n      register: fip\n\n    - name: Release Floating IP\n      ibm_is_floating_ip:\n        state: absent\n        id: \"{{ fip.resource.id }}\"\n      when: fip.resource.id is defined\n\n    - name: Check for existing VSI\n      ibm_is_instance_info:\n        name: \"{{ vsi_name }}\"\n      failed_when:\n        - vsi.rc != 0\n        - '\"No Instance found\" not in vsi.stderr'\n      register: vsi\n\n    - name: Remove VSI\n      ibm_is_instance:\n        state: absent\n        id: \"{{ vsi.resource.id }}\"\n        vpc: \"{{ vsi.resource.vpc }}\"\n        keys: []\n        image: \"{{ vsi.resource.image }}\"\n        profile: \"{{ vsi.resource.profile }}\"\n        zone: \"{{ vsi.resource.zone }}\"\n        primary_network_interface:\n          - subnet: \"{{ vsi.resource.primary_network_interface[0].subnet }}\"\n      when: vsi.resource.id is defined\n\n    - name: Checking for existing SSH key\n      ibm_is_ssh_key_info:\n        name: \"{{ ssh_key_name }}\"\n      failed_when:\n        - ssh_key.rc != 0\n        - '\"No SSH Key found\" not in ssh_key.stderr'\n      register: ssh_key\n\n    - name: Remove SSH Key", "license": "", "module": "ibm_is_ssh_key", "output": "      ibm_is_ssh_key:\n        state: absent\n        id: \"{{ ssh_key.resource.id }}\"\n      when: ssh_key.resource.id is defined\n", "path": "examples/simple-vm-ssh/destroy.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: Destroy IBM Cloud VPC VSI\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n    - name: Fetch the variables from var file\n      include_vars:\n        file: vars.yml\n\n    - name: Check for existing Floating IP\n      ibm_is_floating_ip_info:\n        name: \"{{ fip_name }}\"\n      failed_when:\n        - fip.rc != 0\n        - '\"No floatingIP found\" not in fip.stderr'\n      register: fip\n\n    - name: Release Floating IP\n      ibm_is_floating_ip:\n        state: absent\n        id: \"{{ fip.resource.id }}\"\n      when: fip.resource.id is defined\n\n    - name: Check for existing VSI\n      ibm_is_instance_info:\n        name: \"{{ vsi_name }}\"\n      failed_when:\n        - vsi.rc != 0\n        - '\"No Instance found\" not in vsi.stderr'\n      register: vsi\n\n    - name: Remove VSI\n      ibm_is_instance:\n        state: absent\n        id: \"{{ vsi.resource.id }}\"\n        vpc: \"{{ vsi.resource.vpc }}\"\n        keys: []\n        image: \"{{ vsi.resource.image }}\"\n        profile: \"{{ vsi.resource.profile }}\"\n        zone: \"{{ vsi.resource.zone }}\"\n        primary_network_interface:\n          - subnet: \"{{ vsi.resource.primary_network_interface[0].subnet }}\"\n      when: vsi.resource.id is defined\n\n    - name: Checking for existing SSH key\n      ibm_is_ssh_key_info:\n        name: \"{{ ssh_key_name }}\"\n      failed_when:\n        - ssh_key.rc != 0\n        - '\"No SSH Key found\" not in ssh_key.stderr'\n      register: ssh_key\n\n    - name: Remove SSH Key\n      ibm_is_ssh_key:\n        state: absent\n        id: \"{{ ssh_key.resource.id }}\"\n      when: ssh_key.resource.id is defined\n\n    - name: Checking for existing VPC Subnet", "license": "", "module": "ibm_is_subnet_info", "output": "      ibm_is_subnet_info:\n        name: \"{{ subnet_name }}\"\n      failed_when:\n        - subnet.rc != 0\n        - '\"No subnet found\" not in subnet.stderr'\n      register: subnet\n", "path": "examples/simple-vm-ssh/destroy.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: Destroy IBM Cloud VPC VSI\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n    - name: Fetch the variables from var file\n      include_vars:\n        file: vars.yml\n\n    - name: Check for existing Floating IP\n      ibm_is_floating_ip_info:\n        name: \"{{ fip_name }}\"\n      failed_when:\n        - fip.rc != 0\n        - '\"No floatingIP found\" not in fip.stderr'\n      register: fip\n\n    - name: Release Floating IP\n      ibm_is_floating_ip:\n        state: absent\n        id: \"{{ fip.resource.id }}\"\n      when: fip.resource.id is defined\n\n    - name: Check for existing VSI\n      ibm_is_instance_info:\n        name: \"{{ vsi_name }}\"\n      failed_when:\n        - vsi.rc != 0\n        - '\"No Instance found\" not in vsi.stderr'\n      register: vsi\n\n    - name: Remove VSI\n      ibm_is_instance:\n        state: absent\n        id: \"{{ vsi.resource.id }}\"\n        vpc: \"{{ vsi.resource.vpc }}\"\n        keys: []\n        image: \"{{ vsi.resource.image }}\"\n        profile: \"{{ vsi.resource.profile }}\"\n        zone: \"{{ vsi.resource.zone }}\"\n        primary_network_interface:\n          - subnet: \"{{ vsi.resource.primary_network_interface[0].subnet }}\"\n      when: vsi.resource.id is defined\n\n    - name: Checking for existing SSH key\n      ibm_is_ssh_key_info:\n        name: \"{{ ssh_key_name }}\"\n      failed_when:\n        - ssh_key.rc != 0\n        - '\"No SSH Key found\" not in ssh_key.stderr'\n      register: ssh_key\n\n    - name: Remove SSH Key\n      ibm_is_ssh_key:\n        state: absent\n        id: \"{{ ssh_key.resource.id }}\"\n      when: ssh_key.resource.id is defined\n\n    - name: Checking for existing VPC Subnet\n      ibm_is_subnet_info:\n        name: \"{{ subnet_name }}\"\n      failed_when:\n        - subnet.rc != 0\n        - '\"No subnet found\" not in subnet.stderr'\n      register: subnet\n\n    - name: Remove VPC Subnet", "license": "", "module": "ibm_is_subnet", "output": "      ibm_is_subnet:\n        state: absent\n        id: \"{{ subnet.resource.id }}\"\n      when: subnet.resource.id is defined\n", "path": "examples/simple-vm-ssh/destroy.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: Destroy IBM Cloud VPC VSI\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n    - name: Fetch the variables from var file\n      include_vars:\n        file: vars.yml\n\n    - name: Check for existing Floating IP\n      ibm_is_floating_ip_info:\n        name: \"{{ fip_name }}\"\n      failed_when:\n        - fip.rc != 0\n        - '\"No floatingIP found\" not in fip.stderr'\n      register: fip\n\n    - name: Release Floating IP\n      ibm_is_floating_ip:\n        state: absent\n        id: \"{{ fip.resource.id }}\"\n      when: fip.resource.id is defined\n\n    - name: Check for existing VSI\n      ibm_is_instance_info:\n        name: \"{{ vsi_name }}\"\n      failed_when:\n        - vsi.rc != 0\n        - '\"No Instance found\" not in vsi.stderr'\n      register: vsi\n\n    - name: Remove VSI\n      ibm_is_instance:\n        state: absent\n        id: \"{{ vsi.resource.id }}\"\n        vpc: \"{{ vsi.resource.vpc }}\"\n        keys: []\n        image: \"{{ vsi.resource.image }}\"\n        profile: \"{{ vsi.resource.profile }}\"\n        zone: \"{{ vsi.resource.zone }}\"\n        primary_network_interface:\n          - subnet: \"{{ vsi.resource.primary_network_interface[0].subnet }}\"\n      when: vsi.resource.id is defined\n\n    - name: Checking for existing SSH key\n      ibm_is_ssh_key_info:\n        name: \"{{ ssh_key_name }}\"\n      failed_when:\n        - ssh_key.rc != 0\n        - '\"No SSH Key found\" not in ssh_key.stderr'\n      register: ssh_key\n\n    - name: Remove SSH Key\n      ibm_is_ssh_key:\n        state: absent\n        id: \"{{ ssh_key.resource.id }}\"\n      when: ssh_key.resource.id is defined\n\n    - name: Checking for existing VPC Subnet\n      ibm_is_subnet_info:\n        name: \"{{ subnet_name }}\"\n      failed_when:\n        - subnet.rc != 0\n        - '\"No subnet found\" not in subnet.stderr'\n      register: subnet\n\n    - name: Remove VPC Subnet\n      ibm_is_subnet:\n        state: absent\n        id: \"{{ subnet.resource.id }}\"\n      when: subnet.resource.id is defined\n\n    - name: Checking for existing VPC", "license": "", "module": "ibm_is_vpc_info", "output": "      ibm_is_vpc_info:\n        name: \"{{ vpc_name }}\"\n      failed_when:\n        - vpc.rc != 0\n        - '\"No VPC found\" not in vpc.stderr'\n      register: vpc\n", "path": "examples/simple-vm-ssh/destroy.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
{"data_source_description": "", "input": "---\n- name: Destroy IBM Cloud VPC VSI\n  hosts: localhost\n  collections:\n   - ibm.cloudcollection\n  tasks:\n    - name: Fetch the variables from var file\n      include_vars:\n        file: vars.yml\n\n    - name: Check for existing Floating IP\n      ibm_is_floating_ip_info:\n        name: \"{{ fip_name }}\"\n      failed_when:\n        - fip.rc != 0\n        - '\"No floatingIP found\" not in fip.stderr'\n      register: fip\n\n    - name: Release Floating IP\n      ibm_is_floating_ip:\n        state: absent\n        id: \"{{ fip.resource.id }}\"\n      when: fip.resource.id is defined\n\n    - name: Check for existing VSI\n      ibm_is_instance_info:\n        name: \"{{ vsi_name }}\"\n      failed_when:\n        - vsi.rc != 0\n        - '\"No Instance found\" not in vsi.stderr'\n      register: vsi\n\n    - name: Remove VSI\n      ibm_is_instance:\n        state: absent\n        id: \"{{ vsi.resource.id }}\"\n        vpc: \"{{ vsi.resource.vpc }}\"\n        keys: []\n        image: \"{{ vsi.resource.image }}\"\n        profile: \"{{ vsi.resource.profile }}\"\n        zone: \"{{ vsi.resource.zone }}\"\n        primary_network_interface:\n          - subnet: \"{{ vsi.resource.primary_network_interface[0].subnet }}\"\n      when: vsi.resource.id is defined\n\n    - name: Checking for existing SSH key\n      ibm_is_ssh_key_info:\n        name: \"{{ ssh_key_name }}\"\n      failed_when:\n        - ssh_key.rc != 0\n        - '\"No SSH Key found\" not in ssh_key.stderr'\n      register: ssh_key\n\n    - name: Remove SSH Key\n      ibm_is_ssh_key:\n        state: absent\n        id: \"{{ ssh_key.resource.id }}\"\n      when: ssh_key.resource.id is defined\n\n    - name: Checking for existing VPC Subnet\n      ibm_is_subnet_info:\n        name: \"{{ subnet_name }}\"\n      failed_when:\n        - subnet.rc != 0\n        - '\"No subnet found\" not in subnet.stderr'\n      register: subnet\n\n    - name: Remove VPC Subnet\n      ibm_is_subnet:\n        state: absent\n        id: \"{{ subnet.resource.id }}\"\n      when: subnet.resource.id is defined\n\n    - name: Checking for existing VPC\n      ibm_is_vpc_info:\n        name: \"{{ vpc_name }}\"\n      failed_when:\n        - vpc.rc != 0\n        - '\"No VPC found\" not in vpc.stderr'\n      register: vpc\n\n    - name: Remove VPC", "license": "", "module": "ibm_is_vpc", "output": "      ibm_is_vpc:\n        state: absent\n        id: \"{{ vpc.resource.id }}\"\n      when: vpc.resource.id is defined", "path": "examples/simple-vm-ssh/destroy.yml", "repo_name": "ansible-collection-ibm", "repo_url": "https://github.com/IBM-Cloud/ansible-collection-ibm.git"}
