- name: Create a host report
  hosts: myhosts

  tasks:

    # Extract the Linux OS type & Extract the OS version & Extract the uptime and store the information in variables
    - name: Extract the Linux OS type
      ansible.builtin.command: uname -s
      register: os_type

    - name: Extract the OS version
      ansible.builtin.command: uname -r
      register: os_version

    - name: Extract the uptime and store the information in variables
      ansible.builtin.command: uptime
      register: uptime

    # - name: Extract the exact OS distribution in a variable

    - name: Extract the exact OS distribution in a variable using the Ansible facts
      ansible.builtin.set_fact:
        os_distribution: "{{ ansible_facts.distribution }}"
    
    
    - name: Print out a report using the variables that were extracted
      ansible.builtin.debug:
        msg:
          - 'OS Type: {{ os_type.stdout }}'
          - 'OS Version: {{ os_version.stdout }}'
          - 'OS Distribution: {{ os_distribution }}'
          - 'Uptime: {{ uptime.stdout }}'
    
    - name: Create a directory under /tmp with the connected user name
      ansible.builtin.file:
        path: /tmp/{{ ansible_user_id }}
        state: directory
        mode: '0755'
    
    
    - name: Print out a report using the variables that were exracted in a JSON format in a file called my_host.json saved in the user home directory
      ansible.builtin.copy:
        content: |
          {
            "os_type": "{{ os_type.stdout }}",
            "os_version": "{{ os_version.stdout }}",
            "os_distribution": "{{ os_distribution }}",
            "uptime": "{{ uptime.stdout }}",
            "user_name": "{{ ansible_user_id }}",
            "user_home": "{{ ansible_user_dir }}"
          }
        dest: /tmp/{{ ansible_user_id }}/my_host.json
        mode: '0755'
    
      # ansible.builtin.copy:
      #   content: |
      #     {
      #       "os_type": "{{ os_type.stdout }}",
      #       "os_version": "{{ os_version.stdout }}",
      #       "os_distro": "{{ os_distro.stdout }}",
      #       "uptime": "{{ uptime.stdout }}"
      #     }
      #   dest: /home/{{ ansible_user }}/my_host.json
       
    - name: Fetch the generated file on the remote server to my localhost and rename the file to remote-hostname appended with the source filename
      ansible.builtin.fetch:
        src: /home/{{ ansible_user }}/my_host.json
        dest: /home/{{ ansible_user }}/{{ inventory_hostname }}.json
        flat: true
    
        


    
    



    




